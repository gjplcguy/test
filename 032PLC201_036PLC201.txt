(*********************************************

  Import-Export
  Version   := RSLogix 5000 v35.00
  Owner     := , 
  Exported  := Thu Feb 15 15:31:32 2024

  Note:  File encoded in UTF-8.  Only edit file in a program 
         which supports UTF-8 (like Notepad, not Wordpad).

**********************************************)
IE_VER := 2.26;

CONTROLLER CommonFunctionsGW (ProcessorType := "Emulate 5570",
                              Major := 35,
                              TimeSlice := 20,
                              ShareUnusedTimeSlice := 1,
                              RedundancyEnabled := 0,
                              KeepTestEditsOnSwitchOver := 0,
                              DataTablePadPercentage := 50,
                              SecurityCode := 0,
                              ChangesToDetect := 16#ffff_ffff_ffff_ffff,
                              SFCExecutionControl := "CurrentActive",
                              SFCRestartPosition := "MostRecent",
                              SFCLastScan := "DontScan",
                              SerialNumber := 16#0000_0000,
                              MatchProjectToController := No,
                              CanUseRPIFromProducer := No,
                              InhibitAutomaticFirmwareUpdate := 0,
                              PassThroughConfiguration := EnabledWithAppend,
                              DownloadProjectDocumentationAndExtendedProperties := Yes,
                              ReportMinorOverflow := 0)
	DATATYPE BOOL_WORD (FamilyType := NoFamily)
		BOOL Bit[32];
	END_DATATYPE

	DATATYPE Comms_Data (FamilyType := NoFamily)
		CONNECTION_STATUS Tags_Stat;
		DINT Tag[120];
	END_DATATYPE

	DATATYPE ControllerRedundancy (FamilyType := NoFamily)
		SINT ZZZZZZZZZZController0 (Hidden := 1);
		BIT ChassisRedundancyState ZZZZZZZZZZController0 : 0;
		BIT SwitchoverHappened ZZZZZZZZZZController0 : 1;
		COUNTER SwitchOverCounter;
		TIMER SwitchoverTimer;
		SINT ZZZZZZZZZZController5 (Hidden := 1);
		BIT WatchdogSwitchover ZZZZZZZZZZController5 : 0;
	END_DATATYPE

	DATATYPE DLR_Active_Node (FamilyType := NoFamily)
		DINT Device_IP_Address (Description := "Devices IP address");
		DLR_MAC Device_Mac_Address (Description := "Devices mac address");
	END_DATATYPE

	DATATYPE DLR_BOOL64 (FamilyType := NoFamily)
		BOOL Bit[64];
	END_DATATYPE

	DATATYPE DLR_Capture_Error (FamilyType := NoFamily)
		DINT Step;
		DINT Class;
		DINT Instance;
		DINT Attribute;
		STRING Path;
	END_DATATYPE

	DATATYPE DLR_Diagnostics (FamilyType := NoFamily)
		INT NetworkStatus (Description := "0 = Normal$N1 = Ring Fault$N2 = Unexpected Loop$N3 = Partial Network Fault$N4 = Raid Fault/Restore");
		INT RingCount (Description := "Number of devices in the ring");
		INT FaultCount (Description := "Number of faults since last reset");
		INT LastNode1 (Description := "Device number of last node on ring leg 1 when fault is present");
		INT LastNode2 (Description := "Device number of last node on ring leg 2 when fault is present");
		INT Participants[64] (Description := "Id of device.$N2 = 1783-ETAP$N3 = 1756-ENET$N11 = 1794-AENTR$N12 = 5069-AENTR$N26 = Unknown");
		BOOL NotResponding[64] (Description := "Device is not responding.$NRelates to device number 0 to 63.$NWhere 0 equals the ring supervisor");
		BOOL Supervisor[64] (Description := "0 = Normal Device$N1 = Ring Supervisor");
		BOOL LinkState[64] (Description := "Status of segment  relating to connection to device number from 0 to 63.$NWher 0 equals the ring supervisor");
		DINT Node (Description := "A pointer to each participant and link status");
		DLR_AOI AOI;
	END_DATATYPE

	DATATYPE DLR_HMI (FamilyType := NoFamily)
		DINT Set_FaceplateAnimation;
		DINT Val_Layout (Description := "0 - default 24 nodes$N1 - compact 12 nodes 2 - full  48 nodes");
		DLR_BOOL64 Set_Node_Direct;
		SINT ZZZZZZZZZZDLR_HMI3 (Hidden := 1);
		BIT Set_Node_Up ZZZZZZZZZZDLR_HMI3 : 0;
		BIT Set_Node_Dn ZZZZZZZZZZDLR_HMI3 : 1;
		BIT Set_ClearFaultCount ZZZZZZZZZZDLR_HMI3 : 2;
		BIT Set_ClearRapidFaults ZZZZZZZZZZDLR_HMI3 : 3;
		SINT Val_Network_Topology;
		SINT Val_Network_Status;
		INT Val_Ring_Participant_Count;
		DLR_Node_Info Val_Participants[51];
		DLR_Node_Info Val_Active_Supervisor;
		DLR_Last_Node Val_Last_Node_Port1;
		DLR_Last_Node Val_Last_Node_Port2;
		BOOL Val_LinkState[64];
		DINT Val_Selected_Node;
		DINT Val_Selected_NodePlus;
		DLR_Node_Info Val_Display_Node;
		SINT Storage[520];
		SINT ZZZZZZZZZZDLR_HMI20 (Hidden := 1);
		BIT Val_AOI_Enabled ZZZZZZZZZZDLR_HMI20 : 0;
		BIT Val_AOI_Error ZZZZZZZZZZDLR_HMI20 : 1;
	END_DATATYPE

	DATATYPE DLR_Last_Node (FamilyType := NoFamily)
		STRING16 Last_Node_IP_String;
		STRING32 Last_Node_MAC_String;
		DLR_Active_Node Last_Node_Raw;
		DINT Last_Node_Number;
		STRING32 Last_Node_Cat_Number;
		STRING32 Last_Node_Serial_Number;
	END_DATATYPE

	DATATYPE DLR_MAC (FamilyType := NoFamily)
		SINT Addr[6];
	END_DATATYPE

	DATATYPE DLR_Node_Info (FamilyType := NoFamily)
		STRING16 Device_IP (Description := "Device IP Address");
		STRING32 Device_MAC (Description := "Device MAC Address");
		DLR_Active_Node Node_Addr_Raw;
		STRING32 Cat_Number (Description := "Catalog Number String");
		DINT Vendor_Code (Description := "Device Vendor Code");
		DINT Product_Type (Description := "Product Type Code");
		DINT Device_Code (Description := "Device Specific Code");
		INT Revision_Major;
		INT Revision_Minor;
		STRING16 Serial_Number;
		SINT Supervisor_Mode;
		SINT Supervisor_Enable;
		SINT Supervisor_Presedence;
		INT Takeover_Order;
		INT Ring_Faults;
		DINT Beacon_Interval;
		DINT Beacon_Timeout;
		INT DLR_VLAN;
		DINT Capabilities;
		DINT HMI_Icon (Description := "Device Icon Selector");
		DINT Not_Responding;
	END_DATATYPE

	DATATYPE DLR_Takeover_Order (FamilyType := NoFamily)
		DINT Index;
		DINT Presedence;
		DLR_MAC MAC;
	END_DATATYPE

	DATATYPE Stratix_Ethernet_Link (FamilyType := NoFamily)
		SINT MAC1 (Radix := Hex);
		SINT MAC2 (Radix := Hex);
		SINT MAC3 (Radix := Hex);
		SINT MAC4 (Radix := Hex);
		SINT MAC5 (Radix := Hex);
		SINT MAC6 (Radix := Hex);
		DINT InOctets;
		DINT InUcastPackets;
		DINT InNUcastPackets;
		DINT InDiscards;
		DINT InErrors;
		DINT InUnknownProtos;
		DINT OutOctets;
		DINT OutUcastPackets;
		DINT OutNUcastPackets;
		DINT OutDiscards;
		DINT OutErrors;
		DINT Alignment_Errors;
		DINT FCS_Errors;
		DINT Single_Collisions;
		DINT Multiple_Collisions;
		DINT SQE_Test_Errors;
		DINT Deferred_Transmissions;
		DINT Late_Collisions;
		DINT Excessive_Collisions;
		DINT MAC_TX_Errors;
		DINT Carrier_Sense_Errors;
		DINT Frame_Too_Long;
		DINT MAC_RX_Errors;
		INT Control_Bits;
		STRING64 Applied_Smartport_Macro;
		INT Port_Mode;
		INT Access_VLAN;
		INT Voice_VLAN;
		INT Native_VLAN;
		Stratix_TDR_Diag_Output TDR_Diag_Output;
		DINT Port_Treshold_Exceeded_Status;
	END_DATATYPE

	DATATYPE Stratix_Ethernet_Link_Class (FamilyType := NoFamily)
		DINT GlobalLink_Status;
		DINT Global_Unauthorised_Device;
		DINT Global_Threshold_Exceeded;
		SINT Bandwidth_Utilisation;
		DINT Disabled_Ports;
	END_DATATYPE

	DATATYPE Stratix_Ethernet_Port (FamilyType := NoFamily)
		DINT SFP_Type;
		DINT Port_Major_Alarm_Status;
		DINT Port_Fault_Status;
	END_DATATYPE

	DATATYPE Stratix_HMI (FamilyType := NoFamily)
		Stratix_Tab_Home Home;
		Stratix_Tab_Port Port;
		Stratix_Tab_TDR TDR;
		Stratix_Tab_PTP PTP;
		Stratix_Tab_Alarm Alarm;
		DINT Platform;
		DINT Animation_Active;
		SINT ZZZZZZZZZZStratix_HM7 (Hidden := 1);
		BIT Alarm_Active ZZZZZZZZZZStratix_HM7 : 0;
		BIT AOI_Error ZZZZZZZZZZStratix_HM7 : 1;
		BIT AOI_Enabled ZZZZZZZZZZStratix_HM7 : 2;
		BIT AOI_Vendor_Error ZZZZZZZZZZStratix_HM7 : 3;
		SINT Storage[300];
	END_DATATYPE

	DATATYPE Stratix_Info (FamilyType := NoFamily)
		DINT Platform;
		DINT Layout;
		DINT Max_Instances;
		SINT ZZZZZZZZZZStratix_In3 (Hidden := 1);
		BIT SwType ZZZZZZZZZZStratix_In3 : 0;
		BIT PTP ZZZZZZZZZZStratix_In3 : 1;
		BIT NAT ZZZZZZZZZZStratix_In3 : 2;
		BIT DLR ZZZZZZZZZZStratix_In3 : 3;
		SINT Base;
		SINT Mod1;
		SINT Mod2;
		SINT Gap1;
		SINT Gap2;
		DINT Combo_Ports;
		DINT RJ_PoE_Ports;
		DINT SFP_Ports;
		DINT GiG_Ports;
	END_DATATYPE

	DATATYPE Stratix_Local_Data (FamilyType := NoFamily)
		DINT Active_Port_Alarms;
		DINT Active_Port_Fault;
		CONTROL C1;
		CONTROL C2;
		STRING16 Char;
		DINT Char_found;
		NET_Dec_to_Hex D2H;
		SINT ZZZZZZZZZZStratix_Lo7 (Hidden := 1);
		BIT Detect_SFPs ZZZZZZZZZZStratix_Lo7 : 0;
		DINT Device_Type;
		Stratix_Ethernet_Link_Class Ethernet_Class;
		TIMER Fault_Reset_timer;
		SINT Gap1;
		SINT Gap2;
		NET_Inc_with_Gap GapInc;
		DINT Gig_Ports;
		SINT ZZZZZZZZZZStratix_Lo16 (Hidden := 1);
		BIT init ZZZZZZZZZZStratix_Lo16 : 0;
		DINT Last_RJ_Port;
		DINT Link_Status;
		DINT Max_Instances;
		SINT Mod1;
		SINT Mod2;
		TIMER Msg_Timer;
		TIMER Msg_Timer_Long;
		DINT OffsetCode12;
		DINT OffsetCode44;
		DINT Old_Select_Port_Req;
		DINT OldAnimation;
		DINT OldInstance;
		DINT ONS_bits;
		DINT Port_Index;
		SINT Port_Indicator_State;
		Stratix_Ethernet_Link Port_Link;
		DINT Port_Req_Temp;
		Stratix_Ethernet_Port Port_Status[30];
		SINT ZZZZZZZZZZStratix_Lo36 (Hidden := 1);
		BIT PortAlarmDetectLoop ZZZZZZZZZZStratix_Lo36 : 0;
		DINT PortAlarmInstance;
		SINT ZZZZZZZZZZStratix_Lo39 (Hidden := 1);
		BIT PortFaultDetectLoop ZZZZZZZZZZStratix_Lo39 : 0;
		DINT PortInstanceDisplay;
		DINT PortInstanceMsg;
		INT PortPTP_Enable[30];
		INT PortPTP_State[30];
		DINT PortSFP_Instance;
		DINT Product_code;
		INT Product_code_INT;
		SINT ZZZZZZZZZZStratix_Lo48 (Hidden := 1);
		BIT Reset_Steps_Messaging ZZZZZZZZZZStratix_Lo48 : 0;
		TIMER RestartDelay;
		DINT Selected_Port_Req;
		DINT SFP_Indicator_State;
		SINT ZZZZZZZZZZStratix_Lo53 (Hidden := 1);
		BIT SFP_Port ZZZZZZZZZZStratix_Lo53 : 0;
		DINT SFP_Ports;
		DINT SimulatedMod1;
		DINT SimulatedMod2;
		DINT Step;
		DINT Sub_Step;
		Stratix_Switch_Parameters SwParam;
		Stratix_TCPIP_Interface TCPIP;
		SINT ZZZZZZZZZZStratix_Lo62 (Hidden := 1);
		BIT TDR_Fault_Captured ZZZZZZZZZZStratix_Lo62 : 0;
		DINT Temp_index;
		DINT Temp1;
		DINT Temp2;
		DINT Temp3;
		DINT Temp4;
		STRING16 TempString16;
		STRING32 TempString32;
		DINT Time_Port_Index;
		DINT Total_SFP;
		SINT ZZZZZZZZZZStratix_Lo73 (Hidden := 1);
		BIT Trigger_MSG_All ZZZZZZZZZZStratix_Lo73 : 0;
		BIT Trigger_MSG_SetCustom ZZZZZZZZZZStratix_Lo73 : 1;
		BIT Trigger_MSG_SetSingle ZZZZZZZZZZStratix_Lo73 : 2;
		BIT Trigger_MSG_Single ZZZZZZZZZZStratix_Lo73 : 3;
		DINT Vendor_ID;
		SINT ZZZZZZZZZZStratix_Lo79 (Hidden := 1);
		BIT Vendor_ID_Error ZZZZZZZZZZStratix_Lo79 : 0;
		DINT Combo_Ports;
		STRING32 SmartPortName;
	END_DATATYPE

	DATATYPE Stratix_Message_Log_Record (FamilyType := NoFamily)
		DINT Message_Type;
		DINT Step;
		DINT Error_Code;
		DINT Ext_Error_Code;
		DINT Time_Stamp[7];
	END_DATATYPE

	DATATYPE Stratix_Port_Selector (FamilyType := NoFamily)
		STRING16 Selected_Port_Name;
		SINT ZZZZZZZZZZS2500_Port1 (Hidden := 1);
		BIT Set_Port_Up ZZZZZZZZZZS2500_Port1 : 0;
		BIT Set_Port_Down ZZZZZZZZZZS2500_Port1 : 1;
	END_DATATYPE

	DATATYPE Stratix_Switch_Parameters (FamilyType := NoFamily)
		DINT Temperature;
		DINT Hardware_Alarm_Status;
		DINT Active_Alarms;
		DINT Active_Faults;
		SINT Dual_Mode_Power_Alarm;
		STRING128 IOS_Release;
		DINT Module_Present;
		STRING64 Switch_Uptime;
		DINT Multicast_Groups_Active;
		INT VLAN_Count;
		SINT SD_Status;
		SINT ZZZZZZZZZZStratix_Sw11 (Hidden := 1);
		BIT Password_OK ZZZZZZZZZZStratix_Sw11 : 0;
		BIT Password_Wrong ZZZZZZZZZZStratix_Sw11 : 1;
	END_DATATYPE

	DATATYPE Stratix_Tab_Alarm (FamilyType := NoFamily)
		Stratix_Tab_Alarm_Global Global;
		Stratix_Tab_Alarm_Port Port;
		SINT ZZZZZZZZZZS5xxx_Tab_2 (Hidden := 1);
		BIT Global_Alarm ZZZZZZZZZZS5xxx_Tab_2 : 0;
		BIT Port_Alarm ZZZZZZZZZZS5xxx_Tab_2 : 1;
	END_DATATYPE

	DATATYPE Stratix_Tab_Alarm_Global (FamilyType := NoFamily)
		SINT ZZZZZZZZZZS5xxx_Tab_0 (Hidden := 1);
		BIT SD_Card ZZZZZZZZZZS5xxx_Tab_0 : 0;
		BIT Power_Supply ZZZZZZZZZZS5xxx_Tab_0 : 1;
		BIT License_File ZZZZZZZZZZS5xxx_Tab_0 : 2;
		BIT Primary_Temperature ZZZZZZZZZZS5xxx_Tab_0 : 3;
		BIT Secondary_Temperature ZZZZZZZZZZS5xxx_Tab_0 : 4;
		BIT Major_Output ZZZZZZZZZZS5xxx_Tab_0 : 5;
		BIT Input_1 ZZZZZZZZZZS5xxx_Tab_0 : 6;
		BIT Input_2 ZZZZZZZZZZS5xxx_Tab_0 : 7;
		SINT ZZZZZZZZZZS5xxx_Tab_9 (Hidden := 1);
		BIT Input_3 ZZZZZZZZZZS5xxx_Tab_9 : 0;
		BIT Input_4 ZZZZZZZZZZS5xxx_Tab_9 : 1;
	END_DATATYPE

	DATATYPE Stratix_Tab_Alarm_Port (FamilyType := NoFamily)
		DINT Port_Alarm;
		SINT ZZZZZZZZZZS5xxx_Tab_1 (Hidden := 1);
		BIT Unauthorized_Device ZZZZZZZZZZS5xxx_Tab_1 : 0;
		BIT Link_Fault ZZZZZZZZZZS5xxx_Tab_1 : 1;
		BIT Not_Forwarding ZZZZZZZZZZS5xxx_Tab_1 : 2;
		BIT Not_Operating ZZZZZZZZZZS5xxx_Tab_1 : 3;
		BIT FCS_Error ZZZZZZZZZZS5xxx_Tab_1 : 4;
		BIT Port_Error_Disable ZZZZZZZZZZS5xxx_Tab_1 : 5;
		BIT SFP_Security ZZZZZZZZZZS5xxx_Tab_1 : 6;
		BIT Native_VLan_Mismatch ZZZZZZZZZZS5xxx_Tab_1 : 7;
		SINT ZZZZZZZZZZS5xxx_Tab_10 (Hidden := 1);
		BIT MAC_Address_Flap ZZZZZZZZZZS5xxx_Tab_10 : 0;
		BIT Port_Security_Violation ZZZZZZZZZZS5xxx_Tab_10 : 1;
		BIT Threshold_Exceeded ZZZZZZZZZZS5xxx_Tab_10 : 2;
	END_DATATYPE

	DATATYPE Stratix_Tab_Home (FamilyType := NoFamily)
		STRING64 DeviceName;
		SINT Port_Indicator[30];
		SINT SFP_Indicator[30];
		BOOL_WORD Set_Port;
		Stratix_Tab_Home_Page_1 Page_1;
		Stratix_Tab_Home_Page_2 Page_2;
		Stratix_Tab_Home_Page_3 Page_3;
	END_DATATYPE

	DATATYPE Stratix_Tab_Home_Page_1 (FamilyType := NoFamily)
		DINT Port_Layout;
		SINT ZZZZZZZZZZS5xxx_Tab_1 (Hidden := 1);
		BIT Power_1 ZZZZZZZZZZS5xxx_Tab_1 : 0;
		BIT Power_2 ZZZZZZZZZZS5xxx_Tab_1 : 1;
		SINT SD_Card;
		SINT POE_Ports;
		SINT Set_Select_Exp;
		SINT Base;
		SINT Mod1;
		SINT Mod2;
	END_DATATYPE

	DATATYPE Stratix_Tab_Home_Page_2 (FamilyType := NoFamily)
		STRING32 Model;
		STRING16 Serial_Number;
		STRING128 SW_Version;
		SINT CIP_Major_Rev;
		SINT CIP_Minor_Rev;
		SINT ZZZZZZZZZZStratix_Ta5 (Hidden := 1);
		BIT FW_Type ZZZZZZZZZZStratix_Ta5 : 0;
		BIT PTP ZZZZZZZZZZStratix_Ta5 : 1;
		BIT NAT ZZZZZZZZZZStratix_Ta5 : 2;
		BIT DLR ZZZZZZZZZZStratix_Ta5 : 3;
	END_DATATYPE

	DATATYPE Stratix_Tab_Home_Page_3 (FamilyType := NoFamily)
		STRING16 IP_Address;
		STRING16 Subnet_Mask;
		STRING16 Gateway_Address;
		STRING16 Name_Server_1;
		STRING16 Name_Server_2;
		STRING64 Domain_Name;
		DINT Temperature;
		STRING64 UpTime;
		SINT PS_Type[2];
	END_DATATYPE

	DATATYPE Stratix_Tab_Port (FamilyType := NoFamily)
		Stratix_Port_Selector Port_Selector;
		Stratix_Tab_Port_Page_1 Page_1;
		Stratix_Tab_Port_Page_2 Page_2;
		Stratix_Tab_Port_Page_3 Page_3;
	END_DATATYPE

	DATATYPE Stratix_Tab_Port_Page_1 (FamilyType := NoFamily)
		DINT Link_Status;
		DINT Port_Speed;
		DINT InterfaceFlags;
		DINT SmartPort_Number;
		DINT VLAN;
		DINT Utilization;
		DINT Threshold_Broadcast_Unit;
		DINT Threshold_Broadcast_Val;
		DINT Threshold_Unicast_Unit;
		DINT Threshold_Unicast_Val;
		DINT Threshold_Multicast_Unit;
		DINT Threshold_MultiCast_Val;
	END_DATATYPE

	DATATYPE Stratix_Tab_Port_Page_2 (FamilyType := NoFamily)
		DINT InOctets_UDINT[2];
		DINT InUCast_UDINT[2];
		DINT InNUCast_UDINT[2];
		DINT InDiscards;
		DINT InErrors;
		DINT InUnkn_Protocols;
		DINT OutOctets_UDINT[2];
		DINT OutUCast_UDINT[2];
		DINT OutNUCast_UDINT[2];
		DINT OutDiscards;
		DINT OutErrors;
	END_DATATYPE

	DATATYPE Stratix_Tab_Port_Page_3 (FamilyType := NoFamily)
		DINT Alignment_Errors;
		DINT FCS_Errors;
		DINT Single_Collisions;
		DINT Multiple_Collisions;
		DINT SQE_Test_Errors;
		DINT Deferred_Transmissions;
		DINT Late_Collisions;
		DINT Excessive_Collisions;
		DINT MAC_TX_Errors;
		DINT Carrier_Sense_Errors;
		DINT Frame_Too_Long;
		DINT MAC_RX_Errors;
	END_DATATYPE

	DATATYPE Stratix_Tab_PTP (FamilyType := NoFamily)
		SINT ZZZZZZZZZZS5xxx_Tab_0 (Hidden := 1);
		BIT PTP_Enable ZZZZZZZZZZS5xxx_Tab_0 : 0 (Description := "Attr 1");
		INT ClockType (Description := "Attr 19");
		Stratix_Tab_PTP_Page_1 Page_1;
		Stratix_Tab_PTP_Page_2 Page_2;
		Stratix_Tab_PTP_Page_3 Page_3;
	END_DATATYPE

	DATATYPE Stratix_Tab_PTP_Page_1 (FamilyType := NoFamily)
		DINT GM_Identity[2] (Description := "Attr 8");
		STRING16 GM_Identity_String;
		INT GM_Class;
		INT GM_Accuracy;
		INT GM_Variance;
		DINT GM_Variance_DINT;
		INT GM_Source;
		INT GM_Priority1;
		INT GM_Priority2;
	END_DATATYPE

	DATATYPE Stratix_Tab_PTP_Page_2 (FamilyType := NoFamily)
		SINT ZZZZZZZZZZS5xxx_Tab_0 (Hidden := 1);
		BIT SyncStatus ZZZZZZZZZZS5xxx_Tab_0 : 0 (Description := "Attr 2");
		DINT Local_Identity[2] (Description := "Attr 10");
		STRING16 Local_Identity_String;
		INT Local_Class;
		INT Local_Accuracy;
		INT Local_Variance;
		DINT Local_Variance_DINT;
		INT Local_Source;
	END_DATATYPE

	DATATYPE Stratix_Tab_PTP_Page_3 (FamilyType := NoFamily)
		INT PortPTP_State (Description := "Attr_12");
		INT PortPTP_Enable (Description := "Attr_13");
	END_DATATYPE

	DATATYPE Stratix_Tab_TDR (FamilyType := NoFamily)
		Stratix_TDR_Diag_Output Diag_Output;
		SINT ZZZZZZZZZZS5xxx_Tab_1 (Hidden := 1);
		BIT Set_Initiate_Login ZZZZZZZZZZS5xxx_Tab_1 : 0;
		BIT Set_Initiate_TDR ZZZZZZZZZZS5xxx_Tab_1 : 1;
		STRING32 Set_Password;
		STRING32 Hidden_Password;
		DINT TDR_Error;
		SINT ZZZZZZZZZZS5xxx_Tab_7 (Hidden := 1);
		BIT Logged_in ZZZZZZZZZZS5xxx_Tab_7 : 0;
		BIT Wrong_Password ZZZZZZZZZZS5xxx_Tab_7 : 1;
		BIT Copper_Port ZZZZZZZZZZS5xxx_Tab_7 : 2;
	END_DATATYPE

	DATATYPE Stratix_TCPIP_Interface (FamilyType := NoFamily)
		DINT Status;
		DINT Interface_Capability_Flags;
		DINT Config_Control;
		INT Path_Size;
		INT Object_Path_1;
		INT Object_Path_2;
		DINT IP_Address;
		DINT Netmask;
		DINT Gateway_Address;
		DINT Name_Server_1;
		DINT Name_Server_2;
		STRING Domain_Name;
		STRING Host_Name;
	END_DATATYPE

	DATATYPE Stratix_TDR_Diag_Output (FamilyType := NoFamily)
		Stratix_TDR_Last_Run TDR_Last_Run;
		DINT Speed;
		Stratix_TDR_Pair_Data Pair_Data[4];
	END_DATATYPE

	DATATYPE Stratix_TDR_Last_Run (FamilyType := NoFamily)
		DINT Year;
		DINT Month;
		DINT Day;
		DINT Hour;
		DINT Minute;
		DINT Second;
		DINT Millisecond;
		DINT Day_of_week;
		DINT Day_of_year;
		DINT Tz_offset;
	END_DATATYPE

	DATATYPE Stratix_TDR_Pair_Data (FamilyType := NoFamily)
		INT Local_Pair (Description := "local Pair ID");
		INT Remote_Pair (Description := "Remote pair ID");
		DINT Length (Description := "Cable length");
		DINT PlusMinus (Description := "cable length plus / minus");
		DINT Status;
	END_DATATYPE

	DATATYPE STRING128 (FamilyType := StringFamily)
		DINT LEN;
		SINT DATA[128] (Radix := ASCII);
	END_DATATYPE

	DATATYPE STRING16 (FamilyType := StringFamily)
		DINT LEN;
		SINT DATA[16] (Radix := ASCII);
	END_DATATYPE

	DATATYPE STRING2 (FamilyType := StringFamily)
		DINT LEN;
		SINT DATA[2] (Radix := ASCII);
	END_DATATYPE

	DATATYPE STRING32 (FamilyType := StringFamily)
		DINT LEN;
		SINT DATA[32] (Radix := ASCII);
	END_DATATYPE

	DATATYPE STRING64 (FamilyType := StringFamily)
		DINT LEN;
		SINT DATA[64] (Radix := ASCII);
	END_DATATYPE

	DATATYPE UDT_Stratix_Diagnostics (FamilyType := NoFamily)
		INT PowerSupply (Description := "Status indication of dual power supplies.$N1 = Power 1 Healthy$N2 = Power 2 Healthy$N3 = Power 1 & 2 Healthy");
		INT Temperature (Description := "Switch Temperature in degrees C");
		INT TimeSyncStatus (Description := "1= Switch is synched$N0 = Switch is not synched");
		INT UpTime[6] (Description := "[0] = Years$N[1] = Months$N[2] = Weeks$N[3] = Days$N[4] = Hours$N[5] = Minutes");
		SINT PortStatus[29] (Description := "Element 0 is not used.$NElements 1 to 28 refure to actual port number.$Nfor Copper (fibre in brackets)$N0 (20) = Port Inactive/Disconnected$N1 (21) Fault$N2 (22) = Disabled$N3 (23) = Port Active/Connected$N99 = POE Capable (Do not use)");
		DINT Fault (Description := "Fault Indicators$NBit 0 = Generic Alarm$NBits 1 to 28 indicate an Alarm with the port of the same number.$NBit 29 = Power Supply Alarm$NBit 30  = Excess Temperature Alarm$NBit 31 = Port Alarm (Check switch through Studio 500 for further details).");
		DINT PrpStatus;
		DINT FaultMask;
		STRING FindStringYear;
		STRING FindStringMonth;
		STRING FindStringWeek;
		STRING FindStringDay;
		STRING FindStringHour;
		STRING FindStringMinute;
		STRING StringYear;
		STRING StringMonth;
		STRING StringWeek;
		STRING StringDay;
		STRING StringHour;
		STRING StringMinute;
		DINT Temp[20];
	END_DATATYPE

	MODULE Local (Parent := "Local",
	              ParentModPortId := 1,
	              CatalogNumber := "Emulate 5570",
	              Vendor := 1,
	              ProductType := 14,
	              ProductCode := 53,
	              Major := 35,
	              Minor := 11,
	              ChassisSize := 17,
	              Slot := 2,
	              Mode := 2#0000_0000_0000_0001,
	              CompatibleModule := 0,
	              KeyMask := 2#0000_0000_0001_1111)
	END_MODULE

	ADD_ON_INSTRUCTION_DEFINITION AOI_DigitalWrites_GW (Revision := "0.1",
	                                                    ExecutePrescan := No,
	                                                    ExecutePostscan := No,
	                                                    ExecuteEnableInFalse := No,
	                                                    CreatedDate := "2024-02-07T13:59:00.718Z",
	                                                    CreatedBy := "0946a--Rockwell\GJones",
	                                                    EditedDate := "2024-02-14T16:54:59.653Z",
	                                                    EditedBy := "0946a--Rockwell\GJones",
	                                                    SoftwareRevision := "v35.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Buffer : Comms_Data (Usage := InOut,
			                  Required := Yes,
			                  Visible := Yes);
			DigComData : Comms_Data (Usage := InOut,
			                      Required := Yes,
			                      Visible := Yes);
		END_PARAMETERS

		LOCAL_TAGS
			Timer : TIMER (ExternalAccess := None,
			                DefaultData := "[0,500,0]");
			FAL : CONTROL (ExternalAccess := None,
			              DefaultData := "[0,50,0]");
			FSC : CONTROL (ExternalAccess := None,
			              DefaultData := "[0,50,49]");
			array_length : DINT (RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "*********************************************************************************************************************************************$N"
				    "AOI Name: AOI_DigitalWrites_GW$N"
				    "Author: Guy Jones$N"
				    "Date: 13/02/2024$N"
				    "Version: 0.1$N"
				    "$N"
				    "Compare the Sub Network acknowledgement data (Buffer) against the alarm/command data (DigCom) and$N"
				    "clear the (DigCom) if the Sub Network has recieved the data.$N"
				    "*********************************************************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Find array size for FSC instruction$N"
				    "$N"
				    "";
				N: SIZE(DigComData.Tag[0],0,array_length)SUB(array_length,1,FSC.LEN)SUB(array_length,1,FAL.LEN);
				RC: "Scan through the data received from the Sub Network PLC and set the .FD if a bit is set true$N"
				    "$N"
				    "$N"
				    "";
				N: XIO(FSC.FD)XIO(FSC.DN)FSC(FSC,?,?,ALL,Buffer.Tag[FSC.POS]<>0);
				RC: "Delay the clearing of the DigCom data, SCADA will ignore changes for the first 100ms after transmitting data$N"
				    "$N"
				    "";
				N: XIC(FSC.FD)TON(Timer,?,?);
				RC: "When a change in the data set is detected, update the internal DigCom array$N"
				    "$N"
				    "";
				N: XIC(Timer.DN)XIO(FAL.DN)FAL(FAL,?,?,ALL,DigComData.Tag[FAL.POS],DigComData.Tag[FAL.POS] XOR Buffer.Tag[FAL.POS]);
				RC: "Clear down the bits when complete and update the buffer array to feed back to the gateway PLC that the Sub Network has the new data$N"
				    "$N"
				    "";
				N: XIC(FAL.DN)OTU(FSC.UL)OTU(FSC.IN)OTU(FSC.FD);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION AOI_Watchdog_1 (Description := "Produce a incremental value for SCADA to read and alarm when no change detected for 10 seconds$N$N",
	                                              Revision := "0.1",
	                                              ExecutePrescan := No,
	                                              ExecutePostscan := No,
	                                              ExecuteEnableInFalse := No,
	                                              CreatedDate := "2024-02-06T16:31:13.020Z",
	                                              CreatedBy := "0946a--Rockwell\GJones",
	                                              EditedDate := "2024-02-15T15:31:32.202Z",
	                                              EditedBy := "0946a--Rockwell\GJones",
	                                              SoftwareRevision := "v35.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			SCADA_Output : DINT (Usage := Output,
			                        RADIX := Decimal,
			                        Required := Yes,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			Counter : COUNTER (ExternalAccess := None,
			                  DefaultData := "[0,1000,738]");
			New_Tag : DINT (RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "*********************************************************************************************************************************************$N"
				    "AOI Name: AOI_Watchdog_1$N"
				    "Author: Guy Jones$N"
				    "Date: 13/02/2024$N"
				    "Version: 0.1$N"
				    "$N"
				    "Produce a incremental value for SCADA to read and alarm when no change detected for 10 seconds$N"
				    "$N"
				    "*********************************************************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Rolling value for SCADA to read and alarm when no change detected for 10 seconds$N"
				    "$N"
				    "";
				N: XIO(Counter.CU)XIO(Counter.CU)[CTU(Counter,?,?) ,XIC(Counter.DN) CLR(Counter.ACC) ];
				RC: "Map the watchdog data to registers for the SCADA$N"
				    "$N"
				    "";
				N: MOV(Counter.ACC,SCADA_Output);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION AOI_Watchdog_2 (Description := "Monitor an incrementing value from the SCADA and trigger a switchover if the value does not change for more than 10 seconds$N$N",
	                                              Revision := "0.1",
	                                              ExecutePrescan := No,
	                                              ExecutePostscan := No,
	                                              ExecuteEnableInFalse := No,
	                                              CreatedDate := "2024-02-06T16:31:13.020Z",
	                                              CreatedBy := "0946a--Rockwell\GJones",
	                                              EditedDate := "2024-02-15T14:24:44.805Z",
	                                              EditedBy := "0946a--Rockwell\GJones",
	                                              SoftwareRevision := "v35.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			SCADA_Input : DINT (Usage := Input,
			                       RADIX := Decimal,
			                       Required := Yes,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			Switchover_Happened_Alarm : BOOL (Usage := Input,
			                                     RADIX := Decimal,
			                                     Required := Yes,
			                                     Visible := Yes,
			                                     ExternalAccess := Read Only,
			                                     DefaultData := 0);
			Trigger_Switchover : BOOL (Usage := InOut,
			                              RADIX := Decimal,
			                              Required := Yes,
			                              Visible := Yes);
			Enable : BOOL (Usage := Input,
			                  RADIX := Decimal,
			                  Required := Yes,
			                  Visible := Yes,
			                  ExternalAccess := Read Only,
			                  DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			Timer : TIMER (ExternalAccess := None,
			                DefaultData := "[0,10000,0]");
			Last_Value : DINT (RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			Update_Timer : TIMER (ExternalAccess := None,
			                       DefaultData := "[0,500,2500]");
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "*********************************************************************************************************************************************$N"
				    "AOI Name: AOI_Watchdog_2$N"
				    "Author: Guy Jones$N"
				    "Date: 13/02/2024$N"
				    "Version: 0.1$N"
				    "$N"
				    "Monitor an incrementing value from the SCADA and trigger a switchover is the value does not change for more than 10 seconds$N"
				    "$N"
				    "*********************************************************************************************************************************************$N"
				    "";
				N: NOP();
				N: XIC(Enable)EQU(SCADA_Input,Last_Value)XIO(Switchover_Happened_Alarm)XIO(Timer.DN)TON(Timer,?,?);
				N: XIC(Timer.DN)OTL(Trigger_Switchover);
				N: XIC(Switchover_Happened_Alarm)OTU(Trigger_Switchover);
				N: XIO(Update_Timer.DN)TON(Update_Timer,?,?);
				N: XIC(Update_Timer.DN)MOV(SCADA_Input,Last_Value);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION AOI_Watchdog_3 (Description := "Monitor Sub Network PLC communication health using produced and consumed status $N$N",
	                                              Revision := "0.1",
	                                              ExecutePrescan := No,
	                                              ExecutePostscan := No,
	                                              ExecuteEnableInFalse := No,
	                                              CreatedDate := "2024-02-06T16:31:13.020Z",
	                                              CreatedBy := "0946a--Rockwell\GJones",
	                                              EditedDate := "2024-02-13T12:09:33.633Z",
	                                              EditedBy := "0946a--Rockwell\GJones",
	                                              SoftwareRevision := "v35.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			RunMode : BOOL (Usage := Input,
			                   RADIX := Decimal,
			                   Required := Yes,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			ConnectionFaulted : BOOL (Usage := Input,
			                             RADIX := Decimal,
			                             Required := Yes,
			                             Visible := Yes,
			                             ExternalAccess := Read Only,
			                             DefaultData := 0);
			SCADA_Alarm : BOOL (Usage := Output,
			                       RADIX := Decimal,
			                       Required := Yes,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			SCADA_Acknowledgement : BOOL (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := Yes,
			                                 Visible := Yes,
			                                 ExternalAccess := Read Only,
			                                 DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			Timer : TIMER (ExternalAccess := None,
			                DefaultData := "[0,10000,10000]");
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "*********************************************************************************************************************************************$N"
				    "AOI Name: AOI_Watchdog_3$N"
				    "Author: Guy Jones$N"
				    "Date: 13/02/2024$N"
				    "Version: 0.1$N"
				    "$N"
				    "Monitor Sub Network PLC communication health using produced and consumed status $N"
				    "$N"
				    "*********************************************************************************************************************************************$N"
				    "";
				N: NOP();
				N: [XIO(RunMode) ,XIC(ConnectionFaulted) ]TON(Timer,?,?);
				N: XIC(Timer.DN)XIO(SCADA_Alarm)OTL(SCADA_Alarm)OTU(SCADA_Acknowledgement);
				N: XIO(Timer.DN)XIC(SCADA_Acknowledgement)OTU(SCADA_Alarm);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION DLR_Clear_Node_Info (Revision := "1.0",
	                                                   ExecutePrescan := No,
	                                                   ExecutePostscan := No,
	                                                   ExecuteEnableInFalse := No,
	                                                   CreatedDate := "2015-08-10T11:58:14.359Z",
	                                                   CreatedBy := "Not Available",
	                                                   EditedDate := "2015-10-07T15:17:58.165Z",
	                                                   EditedBy := "Not Available",
	                                                   SoftwareRevision := "v20.01")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			DLR_Node : DLR_Node_Info (Usage := InOut,
			                    Required := Yes,
			                    Visible := Yes);
			Clear_Identity : BOOL (Usage := Input,
			                          RADIX := Decimal,
			                          Required := Yes,
			                          Visible := Yes,
			                          DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
		END_LOCAL_TAGS

		ROUTINE Logic 
				N: XIC(Clear_Identity)[CLR(DLR_Node.Vendor_Code) CLR(DLR_Node.Product_Type) CLR(DLR_Node.Device_Code) ,FLL(0,DLR_Node.Cat_Number,1) CLR(DLR_Node.Revision_Major) CLR(DLR_Node.Revision_Minor) ,FLL(0,DLR_Node.Serial_Number,1) MOV(99,DLR_Node.HMI_Icon) CLR(DLR_Node.Not_Responding) ];
				N: [CLR(DLR_Node.Supervisor_Mode) CLR(DLR_Node.Supervisor_Presedence) CLR(DLR_Node.Takeover_Order) ,CLR(DLR_Node.Ring_Faults) CLR(DLR_Node.Beacon_Interval) CLR(DLR_Node.Beacon_Timeout) ,CLR(DLR_Node.Supervisor_Enable) CLR(DLR_Node.DLR_VLAN) CLR(DLR_Node.Capabilities) ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION DLR_Dec_to_Hex (Revision := "1.0",
	                                              ExecutePrescan := No,
	                                              ExecutePostscan := No,
	                                              ExecuteEnableInFalse := No,
	                                              CreatedDate := "2015-06-16T17:18:11.516Z",
	                                              CreatedBy := "Not Available",
	                                              EditedDate := "2015-09-05T22:25:30.697Z",
	                                              EditedBy := "Not Available",
	                                              SoftwareRevision := "v20.01")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Source_Dec : DINT (Usage := Input,
			                      RADIX := Decimal,
			                      Required := Yes,
			                      Visible := Yes,
			                      DefaultData := 0);
			Dest_String : STRING16 (Usage := InOut,
			                       Required := Yes,
			                       Visible := Yes);
		END_PARAMETERS

		LOCAL_TAGS
			J : DINT (RADIX := Decimal,
			            ExternalAccess := Read/Write,
			            DefaultData := 0);
			Nibble_SINT : SINT[9] (RADIX := Decimal,
			                      ExternalAccess := Read/Write,
			                      DefaultData := "[0,0,0,0,0,0,0,0,0]");
			temp : DINT (RADIX := Decimal,
			               ExternalAccess := Read/Write,
			               DefaultData := 0);
			temp_DINT : DINT (RADIX := Decimal,
			                    ExternalAccess := Read/Write,
			                    DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				N: MOV(7,J)MOV(Source_Dec,temp_DINT);
				N: LBL(ONE)AND(temp_DINT,15,temp)[LIM(0,temp,9) ADD(temp,48,Nibble_SINT[J]) ,LIM(10,temp,15) ADD(temp,55,Nibble_SINT[J]) ,NEQ(J,0) SUB(J,1,J) BTD(temp_DINT,4,temp_DINT,0,28) JMP(ONE) ];
				N: COP(Nibble_SINT[0],Dest_String.DATA[0],8)MOV(8,Dest_String.LEN);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION DLR_Icon (Revision := "2.0",
	                                        ExecutePrescan := No,
	                                        ExecutePostscan := No,
	                                        ExecuteEnableInFalse := No,
	                                        CreatedDate := "2015-07-30T01:14:34.290Z",
	                                        CreatedBy := "Not Available",
	                                        EditedDate := "2016-06-02T13:53:22.652Z",
	                                        EditedBy := "Not Available",
	                                        SoftwareRevision := "v20.04")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Vendor : DINT (Usage := Input,
			                  RADIX := Decimal,
			                  Required := Yes,
			                  Visible := Yes,
			                  DefaultData := 0);
			Type : DINT (Usage := Input,
			                RADIX := Decimal,
			                Required := Yes,
			                Visible := Yes,
			                DefaultData := 0);
			Code : DINT (Usage := Input,
			                RADIX := Decimal,
			                Required := Yes,
			                Visible := Yes,
			                DefaultData := 0);
			Catalog_Number : STRING32 (Usage := InOut,
			                          Required := Yes,
			                          Visible := Yes);
			Icon : DINT (Usage := Output,
			                RADIX := Decimal,
			                Required := Yes,
			                Visible := Yes,
			                ExternalAccess := Read Only,
			                DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			Temp_Icon : DINT (RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			Cat_DINT : DINT (RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			Temp_String : STRING16 (ExternalAccess := None,
			                      DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Char_found : DINT (RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 1);
			Char : STRING2 (ExternalAccess := None,
			               DefaultData := "[0,'$00$00']");
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "Prepare Unknown Adapter";
				N: MOV(99,Temp_Icon);
				RC: "If no vendor, then no icon";
				N: EQU(Vendor,0)CLR(Temp_Icon)JMP(end);
				N: NEQ(Vendor,1)NEQ(Vendor,888)MOV(98,Temp_Icon)JMP(end);
				RC: "Trim on first $QSpace$Q";
				N: MOV(32,Char.DATA[0])MOV(1,Char.LEN)CLR(Char_found);
				N: FIND(Catalog_Number,Char,1,Char_found)LIM(1,Char_found,31)SUB(Char_found,1,Char_found)MID(Catalog_Number,Char_found,1,Catalog_Number);
				RC: "Trim on first $Q/$Q";
				N: MOV(47,Char.DATA[0])MOV(1,Char.LEN)CLR(Char_found);
				N: FIND(Catalog_Number,Char,1,Char_found)LIM(1,Char_found,31)SUB(Char_found,1,Char_found)MID(Catalog_Number,Char_found,1,Catalog_Number);
				RC: "Trim on second Dash $Q-$Q";
				N: MOV(45,Char.DATA[0])MOV(1,Char.LEN)CLR(Char_found);
				N: GRT(Catalog_Number.LEN,8)FIND(Catalog_Number,Char,8,Char_found)LIM(1,Char_found,31)SUB(Char_found,1,Char_found)MID(Catalog_Number,Char_found,1,Catalog_Number);
				N: UPPER(Catalog_Number,Temp_String)STOD(Catalog_Number,Cat_DINT);
				RC: "Detect Stratix BMS, HMS, ZMS ";
				N: EQU(Cat_DINT,1783)[EQU(Temp_String.DATA[5],66) ,EQU(Temp_String.DATA[5],72) ,EQU(Temp_String.DATA[5],90) ]EQU(Temp_String.DATA[6],77)EQU(Temp_String.DATA[7],83)MOV(1,Temp_Icon)JMP(end);
				RC: "Detect ETAP and NATR";
				N: EQU(Cat_DINT,1783)[EQU(Temp_String.DATA[5],69) ,EQU(Temp_String.DATA[5],78) ]MOV(2,Temp_Icon)JMP(end);
				RC: "Detect all ControlLogix";
				N: EQU(Cat_DINT,1756)MOV(3,Temp_Icon)JMP(end);
				RC: "Detect SLC adapter";
				N: EQU(Cat_DINT,1747)MOV(3,Temp_Icon)JMP(end);
				RC: "Detect 1769-Ly";
				N: EQU(Cat_DINT,1769)EQU(Temp_String.DATA[5],76)[EQU(Temp_String.DATA[6],49) MOV(4,Temp_Icon) ,EQU(Temp_String.DATA[6],50) MOV(5,Temp_Icon) ,EQU(Temp_String.DATA[6],51) MOV(6,Temp_Icon) ]JMP(end);
				RC: "Detect 1769-AENTR";
				N: EQU(Cat_DINT,1769)EQU(Temp_String.DATA[5],65)MOV(7,Temp_Icon)JMP(end);
				RC: "Detect Point Adapter";
				N: EQU(Cat_DINT,1734)MOV(8,Temp_Icon)JMP(end);
				RC: "Detect ArmorPoint";
				N: EQU(Cat_DINT,1738)MOV(9,Temp_Icon)JMP(end);
				RC: "Detect all 1732ER";
				N: EQU(Cat_DINT,1732)MOV(10,Temp_Icon)JMP(end);
				RC: "Detect 1794 AENTR";
				N: EQU(Cat_DINT,1794)MOV(11,Temp_Icon)JMP(end);
				RC: "Compact 5069";
				N: EQU(Cat_DINT,5069)MOV(12,Temp_Icon)JMP(end);
				RC: "K6500$N"
				    "";
				N: EQU(Cat_DINT,2094)MOV(13,Temp_Icon)JMP(end);
				RC: "K5500";
				N: EQU(Cat_DINT,2198)MOV(14,Temp_Icon)JMP(end);
				RC: "PF 755";
				N: EQU(Cat_DINT,0)EQU(Type,143)EQU(Temp_String.DATA[0],80)EQU(Temp_String.DATA[1],79)EQU(Temp_String.DATA[5],70)EQU(Temp_String.DATA[6],76)MOV(15,Temp_Icon)JMP(end);
				RC: "PF 525";
				N: EQU(Cat_DINT,0)[EQU(Type,45) ,EQU(Type,150) ,EQU(Type,151) ,EQU(Type,152) ]EQU(Temp_String.DATA[0],80)EQU(Temp_String.DATA[1],79)EQU(Temp_String.DATA[5],70)EQU(Temp_String.DATA[6],76)MOV(16,Temp_Icon)JMP(end);
				RC: "E300 Overload";
				N: EQU(Cat_DINT,300)MOV(17,Temp_Icon)JMP(end);
				RC: "193-DNENCATR";
				N: EQU(Cat_DINT,193)EQU(Code,221)MOV(18,Temp_Icon)JMP(end);
				RC: "1799ER board";
				N: EQU(Cat_DINT,1799)MOV(19,Temp_Icon)JMP(end);
				RC: "Panelview$N"
				    "";
				N: [EQU(Cat_DINT,2711) ,EQU(Cat_DINT,2715) ,EQU(Type,24) ]MOV(20,Temp_Icon)JMP(end);
				RC: "1715-AENTR";
				N: EQU(Cat_DINT,1715)MOV(21,Temp_Icon)JMP(end);
				RC: "Dynamix 1444$N"
				    "";
				N: EQU(Cat_DINT,0)EQU(Type,109)EQU(Code,72)MOV(22,Temp_Icon)JMP(end);
				RC: "1788-EN2DNR";
				N: EQU(Cat_DINT,1788)EQU(Code,251)MOV(23,Temp_Icon)JMP(end);
				RC: "1788-EN2DNROM";
				N: EQU(Cat_DINT,1788)EQU(Code,313)MOV(10,Temp_Icon)JMP(end);
				RC: "1788-EN2FFR, 1788-EN2PAR,$N"
				    "1788-CN2FFR, 1788-CN2PAR$N"
				    "";
				N: EQU(Cat_DINT,1788)EQU(Vendor,888)EQU(Type,12)MOV(24,Temp_Icon)JMP(end);
				RC: "56RF-IN-IPSxxx";
				N: EQU(Cat_DINT,56)EQU(Type,139)LIM(4,Code,6)MOV(10,Temp_Icon)JMP(end);
				RC: "If catalog number was not identified at this point, then we will put a generic icon";
				N: GRT(Catalog_Number.LEN,2)MOV(98,Temp_Icon);
				N: LBL(end)MOV(Temp_Icon,Icon);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION DLR_IP_MAC_Addr_to_String (Description := "Converts numerical IP address into user-readable string",
	                                                         Revision := "1.0",
	                                                         Vendor := "Rockwell Automation",
	                                                         ExecutePrescan := No,
	                                                         ExecutePostscan := No,
	                                                         ExecuteEnableInFalse := No,
	                                                         CreatedDate := "2008-07-24T13:27:21.787Z",
	                                                         CreatedBy := "Not Available",
	                                                         EditedDate := "2015-10-07T15:17:43.303Z",
	                                                         EditedBy := "Not Available",
	                                                         SoftwareRevision := "v20.01",
	                                                         AdditionalHelpText := "AOI to convert a numerical IP address into a string in dotted decimal format$N$NEnter input DINT containing IP address in Numerical IP address field.$N$NEnter STRING variable to contain output in Readable IP address field")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Numerical_IP_Address : DINT (Usage := InOut,
			                                RADIX := Decimal,
			                                Required := Yes,
			                                Visible := Yes);
			MAC_Raw : DLR_MAC (Description := "Raw MAC",
			                   Usage := InOut,
			                   Required := Yes,
			                   Visible := Yes);
			Readable_IP_Address : STRING16 (Usage := InOut,
			                               Required := Yes,
			                               Visible := Yes);
			MAC_String : STRING32 (Usage := InOut,
			                      Required := Yes,
			                      Visible := Yes);
		END_PARAMETERS

		LOCAL_TAGS
			Octet_tmp : DINT (RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			StrOctet_tmp : STRING16 (ExternalAccess := None,
			                       DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			IP_Str : STRING16 (ExternalAccess := None,
			                 DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			temp_DINT2 : DINT (RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			temp_DINT1 : DINT (RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			temp_DINT : DINT[2] (RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := "[0,0]");
			temp : DINT (RADIX := Decimal,
			               ExternalAccess := None,
			               DefaultData := 0);
			Nibble_SINT : SINT[18] (RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]");
			J : DINT (RADIX := Decimal,
			            ExternalAccess := Read/Write,
			            DefaultData := 0);
			I : DINT (RADIX := Decimal,
			            ExternalAccess := None,
			            DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "Clear existing output";
				N: FLL(0,IP_Str,1)EQU(Numerical_IP_Address,0)JMP(ip_end);
				RC: " Transfer input to elements of a DINT array$N"
				    "Transfers octets from one DINT to four DINTs$N"
				    "Convert each DINT to a STRING";
				N: BTD(Numerical_IP_Address,24,Octet_tmp,0,8)DTOS(Octet_tmp,IP_Str)MOV(46,IP_Str.DATA[IP_Str.LEN])ADD(IP_Str.LEN,1,IP_Str.LEN);
				N: BTD(Numerical_IP_Address,16,Octet_tmp,0,8)DTOS(Octet_tmp,StrOctet_tmp)CONCAT(IP_Str,StrOctet_tmp,IP_Str)MOV(46,IP_Str.DATA[IP_Str.LEN])ADD(IP_Str.LEN,1,IP_Str.LEN);
				N: BTD(Numerical_IP_Address,8,Octet_tmp,0,8)DTOS(Octet_tmp,StrOctet_tmp)CONCAT(IP_Str,StrOctet_tmp,IP_Str)MOV(46,IP_Str.DATA[IP_Str.LEN])ADD(IP_Str.LEN,1,IP_Str.LEN);
				N: BTD(Numerical_IP_Address,0,Octet_tmp,0,8)DTOS(Octet_tmp,StrOctet_tmp)CONCAT(IP_Str,StrOctet_tmp,IP_Str);
				N: LBL(ip_end)COP(IP_Str,Readable_IP_Address,1);
				N: MOV(16,J)CLR(I)CLR(temp_DINT1)CLR(temp_DINT2)[BTD(MAC_Raw.Addr[5],0,temp_DINT[0],0,8) BTD(MAC_Raw.Addr[4],0,temp_DINT[0],8,8) BTD(MAC_Raw.Addr[3],0,temp_DINT[0],16,8) ,BTD(MAC_Raw.Addr[2],0,temp_DINT[1],0,8) BTD(MAC_Raw.Addr[1],0,temp_DINT[1],8,8) BTD(MAC_Raw.Addr[0],0,temp_DINT[1],16,8) ];
				N: LBL(MAC_Loop)AND(temp_DINT[I],15,temp)[LIM(0,temp,9) ADD(temp,48,Nibble_SINT[J]) ,LIM(10,temp,15) ADD(temp,55,Nibble_SINT[J]) ,NEQ(J,0) [SUB(J,1,J) BTD(temp_DINT[I],4,temp_DINT[I],0,28) ,EQU(J,8) MOV(1,I) ,[EQU(J,14) ,EQU(J,11) ,EQU(J,8) ,EQU(J,5) ,EQU(J,2) ] MOV(58,Nibble_SINT[J]) SUB(J,1,J) ] JMP(MAC_Loop) ];
				N: COP(Nibble_SINT[0],MAC_String.DATA[0],17)MOV(17,MAC_String.LEN);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION DLR_MAC_Compare (Revision := "1.0",
	                                               ExecutePrescan := No,
	                                               ExecutePostscan := No,
	                                               ExecuteEnableInFalse := No,
	                                               CreatedDate := "2015-08-13T13:08:11.476Z",
	                                               CreatedBy := "Not Available",
	                                               EditedDate := "2015-10-07T15:17:43.307Z",
	                                               EditedBy := "Not Available",
	                                               SoftwareRevision := "v20.01")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			MAC1 : DLR_MAC (Usage := InOut,
			                Required := Yes,
			                Visible := Yes);
			MAC2 : DLR_MAC (Usage := InOut,
			                Required := Yes,
			                Visible := Yes);
			EQU : BOOL (Usage := Output,
			               RADIX := Decimal,
			               Required := No,
			               Visible := Yes,
			               ExternalAccess := Read Only,
			               DefaultData := 0);
			NEQ : BOOL (Usage := Output,
			               RADIX := Decimal,
			               Required := No,
			               Visible := Yes,
			               ExternalAccess := Read/Write,
			               DefaultData := 0);
			GRT : BOOL (Usage := Output,
			               RADIX := Decimal,
			               Required := No,
			               Visible := Yes,
			               ExternalAccess := Read Only,
			               DefaultData := 0);
			GEQ : BOOL (Usage := Output,
			               RADIX := Decimal,
			               Required := No,
			               Visible := Yes,
			               ExternalAccess := Read/Write,
			               DefaultData := 0);
			LES : BOOL (Usage := Output,
			               RADIX := Decimal,
			               Required := No,
			               Visible := Yes,
			               ExternalAccess := Read Only,
			               DefaultData := 0);
			LEQ : BOOL (Usage := Output,
			               RADIX := Decimal,
			               Required := No,
			               Visible := Yes,
			               ExternalAccess := Read/Write,
			               DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			DINT1 : DINT[6] (RADIX := Decimal,
			                ExternalAccess := None,
			                DefaultData := "[0,0,0,0,0,0]");
			DINT2 : DINT[6] (RADIX := Decimal,
			                ExternalAccess := None,
			                DefaultData := "[0,0,0,0,0,0]");
		END_LOCAL_TAGS

		ROUTINE Logic 
				N: BTD(MAC1.Addr[0],0,DINT1[0],0,8)BTD(MAC1.Addr[1],0,DINT1[1],0,8)BTD(MAC1.Addr[2],0,DINT1[2],0,8)BTD(MAC1.Addr[3],0,DINT1[3],0,8)BTD(MAC1.Addr[4],0,DINT1[4],0,8)BTD(MAC1.Addr[5],0,DINT1[5],0,8);
				N: BTD(MAC2.Addr[0],0,DINT2[0],0,8)BTD(MAC2.Addr[1],0,DINT2[1],0,8)BTD(MAC2.Addr[2],0,DINT2[2],0,8)BTD(MAC2.Addr[3],0,DINT2[3],0,8)BTD(MAC2.Addr[4],0,DINT2[4],0,8)BTD(MAC2.Addr[5],0,DINT2[5],0,8);
				N: [GRT(DINT1[0],DINT2[0]) ,EQU(DINT1[0],DINT2[0]) [GRT(DINT1[1],DINT2[1]) ,EQU(DINT1[1],DINT2[1]) [GRT(DINT1[2],DINT2[2]) ,EQU(DINT1[2],DINT2[2]) [GRT(DINT1[3],DINT2[3]) ,EQU(DINT1[3],DINT2[3]) [GRT(DINT1[4],DINT2[4]) ,EQU(DINT1[4],DINT2[4]) [GRT(DINT1[5],DINT2[5]) ,EQU(DINT1[5],DINT2[5]) OTE(EQU) XIO(EQU) ] ] ] ] ] ]OTE(GRT);
				N: XIO(EQU)OTE(NEQ)XIO(GRT)OTE(LES);
				N: [XIC(EQU) ,XIC(LES) ]OTE(LEQ);
				N: [XIC(EQU) ,XIC(GRT) ]OTE(GEQ);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION DLR_PathToHex (Description := "Converts a Comma separated String (as typed in $QPath$Q of MSG) to Hex Path string as used in MSG.Path element.",
	                                             Revision := "2.2",
	                                             RevisionNote := "September 2013 Updated to improve error checking$N",
	                                             Vendor := "Rockwell Automation",
	                                             ExecutePrescan := No,
	                                             ExecutePostscan := No,
	                                             ExecuteEnableInFalse := No,
	                                             CreatedDate := "2007-03-16T20:58:31.648Z",
	                                             CreatedBy := "Not Available",
	                                             EditedDate := "2016-06-01T15:18:09.188Z",
	                                             EditedBy := "Not Available",
	                                             SoftwareRevision := "v20.04",
	                                             AdditionalHelpText := "Converts a Comma separated String (as typed in $QPath$Q$Nof a MSG Instruction) to a Hex Path string$Nas used in MSG.Path STRING element of the Structure.$N$NThe AOI is useful for when the Path of a Message$Ninstruction cannot be entered directly in the $QPath$Q entry$Nof the $QCommunication$Q Tab of the $QMessage Configuration$Q$Nscreen. It will also allow using the same MSG instruction to$Ntarget different destinations.$N$NIt will allow a user to save a Path into a separate STRING tag,$Nindependent to the Message Configuration Screen, but using$Nthe same Comma separated format.$N$NWARNING: Verify that the Comma Separated Path is correctly created.$NThe AOI instruction doesn$'t validate a particular path and this may cause$Na message instruction to be directed to the wrong device.$N$NWARNING: Make sure you understand the implication of sending$Na particular message to a device. If you send the wrong message to$Nthe wrong device, unexpected behavior may occur leading to personal$Ninjury or death, property damage, or economic loss.$N$NExamples of conversion:$N$NComma separated Path$THex Path string in MSG.Path$N1,4$T$T$T$$01$$04$N1,2,2,10.88.76.91,1,3$T$$01$$02$$12$$0B10.88.76.91$$00$$01$$03$N1,1,2,4,1,3$T$T$$01$$01$$02$$04$$01$$03$N$NFor more information on Path entry format, refer to RSLogix 5000 Online Help$Nin the section: $QSpecify the Communication Details$Q$N$NValidation of Input Path:$NThe AIO checks for certain errors on the syntax of the Comma-Separated Input path. The  errors checked and their respective errors generated are:$N   ErrorCode:$N   =0: No error found$N   =1: The number of commas in the path is not and odd number.$N          The Port/Address pair must always lead to an even number of entries in the path.$N   =2: The number of dots in the IP address is not 3 (x.x.x.x)$N   =3: The Port component of the path is not 1,2 or 3. These are the only valid numbers.$N   =4: There cannot be two consecutive commas (needs character between them)$N   =5: IP address octet needs to be between 0 and 255$N   =6: There needs to be an IP octet between two dots$N   =7: The next_address component of the path needs to be between 0 and 99 (when not an IP address)$N   =8: General Path format issue$N$N$N-----------------------------------$NRevision History$N-----------------------------------$N$Nv2 (3/26/08):$N- Added code to validate Comma Separated Path and included ERR bit and ErrorCode$N$Nv1 (3/16/2007):$N- Initial version")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Path_CS_Value : STRING (Usage := InOut,
			                         Required := Yes,
			                         Visible := Yes);
			Path_Hex_Value : STRING (Usage := InOut,
			                          Required := Yes,
			                          Visible := Yes);
			ERR : BOOL (Usage := Output,
			               RADIX := Decimal,
			               Required := No,
			               Visible := Yes,
			               ExternalAccess := Read Only,
			               DefaultData := 0);
			ErrorCode : DINT (Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			CommaLoc : INT (RADIX := Decimal,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0);
			DotLoc : DINT (RADIX := Decimal,
			                 ExternalAccess := Read/Write,
			                 DefaultData := 0);
			Comma : STRING (ExternalAccess := Read/Write,
			                DefaultData := "[1,',$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Path_Comma_Temp : STRING (ExternalAccess := Read/Write,
			                          DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Path_Element : STRING (ExternalAccess := Read/Write,
			                       DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Ptr_Path_Hex : DINT (RADIX := Decimal,
			                       ExternalAccess := Read/Write,
			                       DefaultData := 0);
			CommaLoc_1 : DINT (RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			Dot : STRING (ExternalAccess := Read/Write,
			              DefaultData := "[1,'.$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Ptr_Path_Element : DINT (RADIX := Decimal,
			                           ExternalAccess := Read/Write,
			                           DefaultData := 0);
			Valid_No_Dots : DINT (RADIX := Decimal,
			                        ExternalAccess := Read/Write,
			                        DefaultData := 0);
			Temp : DINT (Description := "Temporary variable",
			               RADIX := Decimal,
			               ExternalAccess := Read/Write,
			               DefaultData := 0);
			Valid_No_Commas : DINT (RADIX := Decimal,
			                          ExternalAccess := Read/Write,
			                          DefaultData := 0);
			Valid_Port : BOOL (RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			IP_Octet : STRING (ExternalAccess := Read/Write,
			                   DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Empty_String : STRING (ExternalAccess := Read/Write,
			                       DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
		END_LOCAL_TAGS

		ST_ROUTINE Logic 
			'(* Pointer to Hex Path as string is created *)
			'Ptr_Path_Hex:=0;
			'(* Copy Comma-Separated Path to a Temporary string to parse the information *)
			'COP(Path_CS_Value,Path_Comma_Temp,1);
			'
			'(* Comma- Separated Path Validation variables *)
			'	Valid_No_Commas:=0;		(* Number of commas in Path must be odd *)
			'	Valid_No_Dots:=0;		(* Number of dots in IP address must be 3 *)
			'	ERR:=0;					(* Clear error bit *)
			'	ErrorCode:=0;
			'	Valid_Port:=1;			(* Boolean Variable to determine if Path element processed is "Port" or is "Next_Address" *)
			'							(* Comma-Separated Path format is: port,next_address,port,next_address,port,... *)
			'							(* Variable set to 1 when the Port element is being evaluated on the Port/Address pair. *)
			'							(* if the code is validating Address, this value is 0 *)
			'							(* if the code is validating Port, this value is 1 *)
			'
			'	FIND(Path_Comma_Temp,Comma,1,CommaLoc);
			'//valid path includes at least one comma.  If no comma found then Error and Exit.
			'	If CommaLoc=0 Then
			'		ERR:=1;
			'		ErrorCode:=1;
			'	End_if;
			'
			'(* Repeat until the end of the Path converted *)
			'While Not(Path_Comma_Temp.LEN <= 0) AND Not ERR Do
			'
			'	FIND(Path_Comma_Temp,Comma,1,CommaLoc);
			'	
			'	(* Applies for when there is still Path Elements after a Comma *)
			'	If CommaLoc>0 Then
			'		CommaLoc_1:=CommaLoc-1;
			'		Valid_No_Commas:=Valid_No_Commas +1;
			'		(* Verify that there is a character between commas always *)
			'		If CommaLoc = 1 Then
			'			ERR:=1;
			'			ErrorCode:=4;
			'		End_If;
			'	(* Applies for when the Path Element is the last one of the string *)
			'	Else
			'		CommaLoc:=Path_Comma_Temp.LEN;
			'		CommaLoc_1:=Path_Comma_Temp.LEN;
			'	End_If;
			'
			'	(* Select the Path_Element on the left of the String *)
			'	MID(Path_Comma_Temp,CommaLoc_1,1,Path_Element);
			'	(* Remove the Path_Element that will be processed from the String being fragmented *)
			'	DELETE(Path_Comma_Temp,CommaLoc,1,Path_Comma_Temp);
			'	
			'	(* Find if Path_Element is an IP address - with Dots *)
			'	FIND(Path_Element,Dot,1,DotLoc);
			'
			'	If DotLoc>0 Then (*An IP address element was found *)
			'		
			'		//First element of the IP address has to be a character not a dot. If dot, report error.    
			'		If DotLoc=1 Then
			'			ERR:=1;
			'			ErrorCode:=6;
			'			Exit; 
			'		End_If;
			'		
			'		// If path entered has format issues error.  
			'		If Ptr_Path_Hex = 0 Then
			'			ERR := 1;
			'			ErrorCode:= 8;
			'			Exit;
			'		End_If;
			'
			'		
			'		(* Value equals to 16#10 + Port Number *)
			'		Path_Hex_Value.DATA[Ptr_Path_Hex-1]:=Path_Hex_Value.DATA[Ptr_Path_Hex-1]+16#10; 
			'		
			'		(* Next value is Number of characters of IP Address *)
			'		Path_Hex_Value.DATA[Ptr_Path_Hex]:=Path_Element.LEN;
			'
			'		Ptr_Path_Hex:=Ptr_Path_Hex+1;
			'		Ptr_Path_Element:=0;
			'
			'		(* Initialize number of dots in IP address to 0 *)
			'		Valid_No_Dots:=0;
			'		// Initialize IP_Octet for validation
			'		COP(Empty_String,IP_Octet,1);
			'		(* Browse all digits of the IP address and copy them into Hex string *)
			'		(* While Not(Path_Element.DATA[Ptr_Path_Element] = 0) Do*)
			'		While (Ptr_Path_Element < Path_Element.LEN) Do
			'			(* Add to validate IP address has three dots *)
			'			If Path_Element.DATA[Ptr_Path_Element]=16#2e Then
			'
			'				// Check that next element is not also a dot. There needs to be a character between dots.
			'				If Path_Element.DATA[Ptr_Path_Element+1]=16#2e Then
			'					ERR:=1;
			'					ErrorCode:=6;
			'				End_If;
			'
			'				Valid_No_Dots:=Valid_No_Dots+1;
			'
			'				(* Convert IP_Octet to DINT and check if in range of 0 to 255 *)
			'				STOD(IP_Octet,Temp);
			'				If Temp<0 or Temp>255 Then
			'					ERR:=1;
			'					ErrorCode:=5;
			'				End_If;
			'
			'				(* Initialize IP Octet for validation *)
			'				(*IP_Octet.LEN:=0;*)
			'				COP(Empty_String,IP_Octet,1);
			'			Else
			'				IP_Octet.DATA[IP_Octet.LEN]:=Path_Element.DATA[Ptr_Path_Element];
			'				IP_Octet.LEN:=IP_Octet.LEN+1;
			'			End_If;
			'
			'			Path_Hex_Value.DATA[Ptr_Path_Hex]:=Path_Element.DATA[Ptr_Path_Element];
			'			Ptr_Path_Hex:=Ptr_Path_Hex+1;
			'			Ptr_Path_Element:=Ptr_Path_Element+1;
			'		
			'		End_While;
			'
			'		(* Convert last IP_Octet of IP address to DINT and check if in range of 0 to 255 *)
			'		STOD(IP_Octet,Temp);
			'		If Temp<0 or Temp>255 Then
			'			ERR:=1;
			'			ErrorCode:=5;
			'		End_If;
			'
			'		(* If Number of dots of IP is not 3, then set ERR bit *)
			'		If Valid_No_Dots<>3 Then
			'			ErrorCode:=2;
			'			ERR:=1;
			'		End_If;
			'
			'		(* If the number of characters of the IP address is Odd, append additional $$00 *)
			'		Temp:= Path_Element.LEN MOD 2;
			'		If Temp>0 Then
			'			Path_Hex_Value.DATA[Ptr_Path_Hex]:=0;
			'			Ptr_Path_Hex:=Ptr_Path_Hex+1;
			'		End_If;
			'
			'	// Entry is not an IP address
			'	Else (* Path entry converted directly to Hex *)
			'		STOD(Path_Element,Path_Hex_Value.DATA[Ptr_Path_Hex]);
			'		
			'		(* Validation of Port *)
			'		If Valid_Port Then
			'			If Path_Hex_Value.DATA[Ptr_Path_Hex] <1 or Path_Hex_Value.DATA[Ptr_Path_Hex] >3 Then
			'				ErrorCode:=3;
			'				ERR:=1;
			'			End_If;
			'		//Not a Port but an Address of a target (different from IP address)
			'		(* Validation of next_address *)
			'		Else
			'			If Path_Hex_Value.DATA[Ptr_Path_Hex] <0 or Path_Hex_Value.DATA[Ptr_Path_Hex] >99 Then
			'				ErrorCode:=7;
			'				ERR:=1;
			'			End_If;
			'		End_If;
			'
			'		Ptr_Path_Hex:=Ptr_Path_Hex+1;
			'	End_If;
			'	
			'	(* Set length of created Hex string to current array size *)
			'	Path_Hex_Value.LEN:=Ptr_Path_Hex;
			'
			'	(* Toggle Valid_Port so if current element was Port, next element is Address *)
			'	Valid_Port:= Not Valid_Port;
			'
			'End_While;
			'
			'(* If # of commas found is Even, report error in Path *)
			'Temp:= Valid_No_Commas MOD 2;
			'If Temp=0 and Not ERR Then
			'	ErrorCode:=1;
			'	ERR:=1;
			'End_If;
			'
			'If ERR Then
			'	COP(Empty_String,Path_Hex_Value,1);
			'End_If;
			'
			'
		END_ST_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION DLR_AOI (Revision := "3.2",
	                                       RevisionNote := "Expanded Device Icon library and corrected rev 3.001 anomalies",
	                                       Vendor := "Rockwell Automation",
	                                       ExecutePrescan := No,
	                                       ExecutePostscan := No,
	                                       ExecuteEnableInFalse := No,
	                                       CreatedDate := "2009-09-16T14:00:02.124Z",
	                                       CreatedBy := "Not Available",
	                                       EditedDate := "2016-07-08T19:02:50.939Z",
	                                       EditedBy := "Not Available",
	                                       SoftwareRevision := "v20.04",
	                                       AdditionalHelpText := "DLR Add-On Instruction collects DLR Network information used in combination with Factory View SE and ME  diagnostics displays. $NSee PDF manual for detailed implementation and use information.$N")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			EN : BOOL (Usage := Output,
			              RADIX := Decimal,
			              Required := No,
			              Visible := Yes,
			              ExternalAccess := Read Only,
			              DefaultData := 0);
			ER : BOOL (Usage := Output,
			              RADIX := Decimal,
			              Required := No,
			              Visible := Yes,
			              ExternalAccess := Read Only,
			              DefaultData := 0);
			Enable : BOOL (Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  DefaultData := 0);
			Parameters : DLR_HMI (Usage := InOut,
			                      Required := Yes,
			                      Visible := Yes);
			Path_to_DLR : STRING (Usage := InOut,
			                       Required := Yes,
			                       Visible := Yes);
			Msg_Get_All : MESSAGE (Usage := InOut,
			                       Required := Yes,
			                       Visible := Yes);
			Msg_Get_Sgl : MESSAGE (Usage := InOut,
			                       Required := Yes,
			                       Visible := Yes);
			Msg_Clear_Flt_Count : MESSAGE (Usage := InOut,
			                               Required := Yes,
			                               Visible := Yes);
			Msg_Rst_SignOn : MESSAGE (Usage := InOut,
			                          Required := Yes,
			                          Visible := Yes);
			Msg_Clr_Rapid_Faults : MESSAGE (Usage := InOut,
			                                Required := Yes,
			                                Visible := Yes);
		END_PARAMETERS

		LOCAL_TAGS
			Step : DINT (Description := "Identifies active step number",
			               RADIX := Decimal,
			               ExternalAccess := Read/Write,
			               DefaultData := 0);
			ons : DINT (Description := "Bits for use with ONS",
			              RADIX := Decimal,
			              ExternalAccess := Read/Write,
			              DefaultData := 0);
			Timer : TIMER (ExternalAccess := Read/Write,
			                DefaultData := "[0,100,0]");
			Final_Step : DINT (RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 50);
			Message_Triggers : DINT (RADIX := Decimal,
			                           ExternalAccess := Read/Write,
			                           DefaultData := 0);
			Path : STRING (ExternalAccess := Read/Write,
			               DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Comma : STRING2 (ExternalAccess := Read/Write,
			                DefaultData := "[1,',$00']");
			pointer : DINT (RADIX := Decimal,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0);
			Default_Path : STRING (ExternalAccess := Read/Write,
			                       DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			range : DINT (RADIX := Decimal,
			                ExternalAccess := Read/Write,
			                DefaultData := 0);
			OldAnimation : DINT (RADIX := Decimal,
			                       ExternalAccess := Read/Write,
			                       DefaultData := 0);
			First_Msg_Error : BOOL (RADIX := Decimal,
			                          ExternalAccess := Read/Write,
			                          DefaultData := 0);
			Find_start : DINT (RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			Find_result : DINT (RADIX := Decimal,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			Find_Last_result : DINT (RADIX := Decimal,
			                           ExternalAccess := Read/Write,
			                           DefaultData := 0);
			Del_QTY : DINT (RADIX := Decimal,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0);
			Default_Path_No_IP : STRING (ExternalAccess := Read/Write,
			                             DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Do_Once : BOOL (RADIX := Decimal,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0);
			Temp : DINT (RADIX := Decimal,
			               ExternalAccess := Read/Write,
			               DefaultData := 0);
			node_index : DINT (RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			valid_tmp : BOOL (RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			Rebuild_List_Timer : TIMER (ExternalAccess := None,
			                             DefaultData := "[0,30000,0]");
			Supervisor_Path : STRING (ExternalAccess := None,
			                          DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			RebuildState : DINT (RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			Zero_Node : BOOL (RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			Trigger_Rebuild : BOOL (RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			RebuildCount : DINT (RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			Icon : DLR_Icon (ExternalAccess := None,
			               DefaultData := "[1,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],1,[0,'$00$00']]");
			zero_node_index : DINT (RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			Zero_Node_Found : BOOL (RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			link_index : DINT (RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			Entry_Path : STRING (ExternalAccess := None,
			                     DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			CLR_node : DLR_Clear_Node_Info (ExternalAccess := None,
			                   DefaultData := [1]);
			NDTH : DLR_Dec_to_Hex (ExternalAccess := None,
			               DefaultData := "[1,0,0,[0,0,0,0,0,0,0,0,0],0,0]");
			PathToHex : DLR_PathToHex (ExternalAccess := None,
			                    DefaultData
			PreviousStep : DINT (RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			SteplockTimer : TIMER (ExternalAccess := None,
			                        DefaultData := "[0,20000,0]");
			MAC_C1 : DLR_MAC_Compare (ExternalAccess := None,
			                 DefaultData := "[1,[0,0,0,0,0,0],[0,0,0,0,0,0]]");
			Error : DLR_Capture_Error (ExternalAccess := None,
			                DefaultData := "[0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']]");
			Temp_node : DINT (RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			IP_MAC : DLR_IP_MAC_Addr_to_String (ExternalAccess := None,
			                 DefaultData := "[1,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,[0,0],0,[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],0,0]");
			Temp_Node_Call : DINT[2] (RADIX := Decimal,
			                         ExternalAccess := None,
			                         DefaultData := "[0,0]");
			Faulted_State_Timer : TIMER (ExternalAccess := None,
			                              DefaultData := "[0,10000,0]");
			Old_Participant_Count : DINT (RADIX := Decimal,
			                                ExternalAccess := None,
			                                DefaultData := 0);
			SortIndex : DINT (RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			SortNode : DLR_Takeover_Order[51] (ExternalAccess := None,
			                   DefaultData := "[[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]]]");
			SortIndex2 : DINT (RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			TempNode : DLR_Takeover_Order (ExternalAccess := None,
			                   DefaultData := "[0,0,[[0,0,0,0,0,0]]]");
			Need_Identity_Update : BOOL (RADIX := Decimal,
			                               ExternalAccess := None,
			                               DefaultData := 0);
			temp_masked : DINT (RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			Need_DLR_Update : BOOL (RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			Old_Supervisor_Address : DINT (RADIX := Decimal,
			                                 ExternalAccess := None,
			                                 DefaultData := 0);
			ons_en : BOOL (RADIX := Decimal,
			                 ExternalAccess := None,
			                 DefaultData := 0);
			Found1715 : BOOL (RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "On first scan, latch on the Do_Once bit";
				N: [XIC(S:FS) ,XIC(Enable) ONS(ons_en) ]OTL(Do_Once);
				RC: "Initialisation rung: called on first scan or if is_setup is not true$N"
				    "The init bit is used to detect whether initialisation has been complgted by the following rung$N"
				    "$N"
				    "initialise sequence by setting Step =1$N"
				    "Define strings used for constructing path to active supervisor$N"
				    "Set timer preset to 0.5 second - this is the interval for polling individual objects$N"
				    "Final step defines the number of steps in the AOI. To add steps, increase this value$N"
				    "Set path defined in configuration as the default path so that AOI has recovery mechanism";
				N: XIC(Do_Once)[MOV(1,Step) MOV(1,Comma.LEN) MOV(44,Comma.DATA[0]) ,CLR(pointer) CLR(ons) MOV(50,Final_Step) ,MOV(1,Find_start) MOV(20,Timer.PRE) COP(Path_to_DLR,Default_Path,1) ,MOV(10,Parameters.Set_FaceplateAnimation) CLR(node_index) CLR(SortIndex) ,DLR_PathToHex(PathToHex,Path_to_DLR,Supervisor_Path) COP(Supervisor_Path,Entry_Path,1) OTU(First_Msg_Error) ,OTL(Need_Identity_Update) OTL(Need_DLR_Update) CLR(RebuildState) CLR(Parameters.Val_Selected_Node) MOV(1,Parameters.Val_Selected_NodePlus) ,MOV(5000000,Msg_Get_All.UnconnectedTimeout) MOV(5000000,Msg_Get_Sgl.UnconnectedTimeout) ];
				RC: "Rung to analyse default path and strip the IP address$N"
				    "This is used to construct the path to the active supervisor later in the program";
				N: LBL(Loop1)XIC(Do_Once)[FIND(Path_to_DLR,Comma,Find_start,Find_result) ,NEQ(Find_result,0) MOV(Find_result,Find_Last_result) ADD(Find_result,1,Find_start) JMP(Loop1) ,EQU(Find_result,0) SUB(Path_to_DLR.LEN,Find_Last_result,Del_QTY) ADD(Find_Last_result,1,Find_Last_result) DELETE(Path_to_DLR,Del_QTY,Find_Last_result,Default_Path_No_IP) OTU(Do_Once) ];
				RC: "Lock State machine if AOI is not enabled";
				N: XIO(Enable)CLR(Step);
				RC: "Free-running step timer";
				N: XIC(Enable)TON(Timer,?,?);
				RC: "Step 1 - Poll a node for a supervisor address$N"
				    "If IP address of supervisor is 0 then go to error step";
				N: EQU(Step,1)COP(Entry_Path,Msg_Get_All.Path,1)[ONS(ons.1) RES(SteplockTimer) MOV(71,Msg_Get_All.Class) MOV(1,Msg_Get_All.Instance) CLR(Msg_Get_All.Attribute) OTL(Message_Triggers.1) ,XIC(Msg_Get_All.DN) XIO(Message_Triggers.1) [EQU(Msg_Get_All.DN_LEN,16) COP(Parameters.Storage[2],Parameters.Storage[39],10) ,COP(Parameters.Storage[39],Parameters.Val_Active_Supervisor.Node_Addr_Raw.Device_IP_Address,1) COP(Parameters.Storage[43],Parameters.Val_Active_Supervisor.Node_Addr_Raw.Device_Mac_Address,1) ,DLR_IP_MAC_Addr_to_String(IP_MAC,Parameters.Val_Active_Supervisor.Node_Addr_Raw.Device_IP_Address,Parameters.Val_Active_Supervisor.Node_Addr_Raw.Device_Mac_Address,Parameters.Val_Active_Supervisor.Device_IP,Parameters.Val_Active_Supervisor.Device_MAC) ,NEQ(Parameters.Val_Active_Supervisor.Node_Addr_Raw.Device_IP_Address,0) MOV(2,Step) RES(Timer) ,EQU(Parameters.Val_Active_Supervisor.Node_Addr_Raw.Device_IP_Address,0) MOV(101,Step) ,COP(Parameters.Storage[0],Parameters.Val_Network_Topology,1) EQU(Parameters.Val_Network_Topology,0) MOV(110,Step) ] ];
				RC: "Step 3$N"
				    "Construct path out to the ethernet network and propogate to all message instructions used in code$N"
				    "";
				N: EQU(Step,3)[FLL(0,Path,1) ,COP(Default_Path_No_IP,Path,1) CONCAT(Path,Parameters.Val_Active_Supervisor.Device_IP,Path) ,DLR_PathToHex(PathToHex,Path,Msg_Get_All.Path) COP(Msg_Get_All.Path,Msg_Get_Sgl.Path,1) COP(Msg_Get_All.Path,Msg_Clear_Flt_Count.Path,1) ,COP(Msg_Get_All.Path,Msg_Rst_SignOn.Path,1) COP(Msg_Get_All.Path,Msg_Clr_Rapid_Faults.Path,1) COP(Msg_Get_All.Path,Supervisor_Path,1) ,RES(Timer) MOV(4,Step) ];
				RC: "Step 4$N"
				    "Read Supervisor Information abot DLR$N"
				    "If IP address of supervisor is 0 then go to error step";
				N: EQU(Step,4)COP(Supervisor_Path,Msg_Get_All.Path,1)[ONS(ons.2) RES(SteplockTimer) MOV(71,Msg_Get_All.Class) MOV(1,Msg_Get_All.Instance) CLR(Msg_Get_All.Attribute) OTL(Message_Triggers.1) ,XIC(Msg_Get_All.DN) XIO(Message_Triggers.1) [COP(Parameters.Storage[0],Parameters.Val_Network_Topology,1) COP(Parameters.Storage[1],Parameters.Val_Network_Status,1) ,COP(Parameters.Storage[2],Parameters.Val_Active_Supervisor.Supervisor_Mode,1) COP(Parameters.Storage[3],Parameters.Val_Active_Supervisor.Supervisor_Enable,1) ,BTD(Parameters.Storage[4],0,Parameters.Val_Active_Supervisor.Supervisor_Presedence,0,8) COP(Parameters.Storage[5],Parameters.Val_Active_Supervisor.Beacon_Interval,2) ,COP(Parameters.Storage[50],Parameters.Val_Active_Supervisor.Capabilities,1) ,COP(Parameters.Storage[13],Parameters.Val_Active_Supervisor.DLR_VLAN,2) COP(Parameters.Storage[15],Parameters.Val_Active_Supervisor.Ring_Faults,1) ,COP(Parameters.Storage[17],Parameters.Val_Last_Node_Port1.Last_Node_Raw.Device_IP_Address,1) COP(Parameters.Storage[21],Parameters.Val_Last_Node_Port1.Last_Node_Raw.Device_Mac_Address,1) ,DLR_IP_MAC_Addr_to_String(IP_MAC,Parameters.Val_Last_Node_Port1.Last_Node_Raw.Device_IP_Address,Parameters.Val_Last_Node_Port1.Last_Node_Raw.Device_Mac_Address,Parameters.Val_Last_Node_Port1.Last_Node_IP_String,Parameters.Val_Last_Node_Port1.Last_Node_MAC_String) ,COP(Parameters.Storage[27],Parameters.Val_Last_Node_Port2.Last_Node_Raw.Device_IP_Address,1) COP(Parameters.Storage[31],Parameters.Val_Last_Node_Port2.Last_Node_Raw.Device_Mac_Address,1) ,DLR_IP_MAC_Addr_to_String(IP_MAC,Parameters.Val_Last_Node_Port2.Last_Node_Raw.Device_IP_Address,Parameters.Val_Last_Node_Port2.Last_Node_Raw.Device_Mac_Address,Parameters.Val_Last_Node_Port2.Last_Node_IP_String,Parameters.Val_Last_Node_Port2.Last_Node_MAC_String) ,EQU(Parameters.Val_Network_Status,0) COP(Parameters.Storage[37],Parameters.Val_Ring_Participant_Count,1) ,COP(Parameters.Storage[39],Parameters.Val_Active_Supervisor.Node_Addr_Raw.Device_IP_Address,1) COP(Parameters.Storage[43],Parameters.Val_Active_Supervisor.Node_Addr_Raw.Device_Mac_Address,1) ,DLR_IP_MAC_Addr_to_String(IP_MAC,Parameters.Val_Active_Supervisor.Node_Addr_Raw.Device_IP_Address,Parameters.Val_Active_Supervisor.Node_Addr_Raw.Device_Mac_Address,Parameters.Val_Active_Supervisor.Device_IP,Parameters.Val_Active_Supervisor.Device_MAC) ,NEQ(Parameters.Val_Active_Supervisor.Node_Addr_Raw.Device_IP_Address,0) MOV(5,Step) RES(Timer) ,EQU(Parameters.Val_Active_Supervisor.Node_Addr_Raw.Device_IP_Address,0) MOV(101,Step) ,EQU(Parameters.Val_Network_Topology,0) MOV(110,Step) ,GRT(Parameters.Val_Ring_Participant_Count,46) MOV(110,Step) ] ];
				N: [[NEQ(Parameters.Val_Ring_Participant_Count,Old_Participant_Count) ,NEQ(Parameters.Val_Active_Supervisor.Node_Addr_Raw.Device_IP_Address,Old_Supervisor_Address) ] FLL(0,Parameters.Val_Participants[1],49) CLR(Parameters.Val_Selected_Node) ,EQU(Parameters.Val_Network_Topology,1) EQU(Parameters.Val_Network_Status,0) ONS(ons.6) ]MOV(0,node_index)OTL(Need_Identity_Update)OTL(Need_DLR_Update);
				N: LBL(fill_icon)[NEQ(Parameters.Val_Ring_Participant_Count,Old_Participant_Count) ,NEQ(Parameters.Val_Active_Supervisor.Node_Addr_Raw.Device_IP_Address,Old_Supervisor_Address) ]MOV(99,Parameters.Val_Participants[node_index].HMI_Icon)ADD(node_index,1,node_index)[LES(node_index,50) JMP(fill_icon) ,MOV(0,node_index) MOV(Parameters.Val_Ring_Participant_Count,Old_Participant_Count) ,MOV(Parameters.Val_Active_Supervisor.Node_Addr_Raw.Device_IP_Address,Old_Supervisor_Address) ];
				RC: "Step 6$N"
				    "$N"
				    "Read ring participants list from active supervisor$N"
				    "(Class 71, Instance 1, Attribute 9)$N"
				    "Copy result array and convert to user-readable strings";
				N: EQU(Step,6)[ONS(ons.3) RES(SteplockTimer) [MOV(71,Msg_Get_Sgl.Class) MOV(1,Msg_Get_Sgl.Instance) MOV(9,Msg_Get_Sgl.Attribute) ,OTL(Message_Triggers.2) ] ,XIO(Message_Triggers.2) XIC(Msg_Get_Sgl.DN) MOV(7,Step) ];
				RC: "New Step 7$N"
				    "Verify that network had no fault then we got a participant list.";
				N: EQU(Step,8)[ONS(ons.9) RES(SteplockTimer) [MOV(71,Msg_Get_Sgl.Class) MOV(1,Msg_Get_Sgl.Instance) MOV(2,Msg_Get_Sgl.Attribute) ,OTL(Message_Triggers.2) ] ,XIO(Message_Triggers.2) XIC(Msg_Get_Sgl.DN) CLR(pointer) COP(Parameters.Storage[0],Parameters.Val_Network_Status,1) MOV(9,Step) ];
				RC: "Update Participants list$N"
				    "For Node 0 we will be using supervisor addresses";
				N: EQU(Step,9)[LIM(0,Parameters.Val_Ring_Participant_Count,50) LIM(0,pointer,Parameters.Val_Ring_Participant_Count) [EQU(Parameters.Val_Network_Status,0) COP(Parameters.Storage[pointer*10],Parameters.Val_Participants[pointer].Node_Addr_Raw,1) ,EQU(pointer,0) COP(Parameters.Val_Active_Supervisor.Node_Addr_Raw.Device_IP_Address,Parameters.Val_Participants[0].Node_Addr_Raw.Device_IP_Address,1) ,DLR_IP_MAC_Addr_to_String(IP_MAC,Parameters.Val_Participants[pointer].Node_Addr_Raw.Device_IP_Address,Parameters.Val_Participants[pointer].Node_Addr_Raw.Device_Mac_Address,Parameters.Val_Participants[pointer].Device_IP,Parameters.Val_Participants[pointer].Device_MAC) ] ,ADD(1,pointer,pointer) GEQ(pointer,Parameters.Val_Ring_Participant_Count) CLR(pointer) MOV(10,Step) ];
				RC: "Fill the empry nodes with Zeros";
				N: EQU(Step,10)LIM(0,Parameters.Val_Ring_Participant_Count,50)SUB(50,Parameters.Val_Ring_Participant_Count,range)FLL(0,Parameters.Val_Participants[Parameters.Val_Ring_Participant_Count],range)MOV(11,Step)RES(Timer);
				RC: "Prepare to scan individual nodes";
				N: EQU(Step,12)[EQU(Parameters.Val_Ring_Participant_Count,0) MOV(Final_Step,Step) ,GRT(Parameters.Val_Ring_Participant_Count,0) MOV(13,Step) ];
				RC: "Verify if DLR node has IP address - IP address for some devices is optional";
				N: EQU(Step,13)[NEQ(Parameters.Val_Participants[node_index].Node_Addr_Raw.Device_IP_Address,0) MOV(15,Step) ,EQU(Parameters.Val_Participants[node_index].Node_Addr_Raw.Device_IP_Address,0) DLR_Clear_Node_Info(CLR_node,Parameters.Val_Participants[node_index],1) MOV(17,Step) ];
				RC: "Read Device identity";
				N: EQU(Step,15)[ONS(ons.4) [RES(SteplockTimer) MOV(1,Msg_Get_All.Class) MOV(1,Msg_Get_All.Instance) CLR(Msg_Get_All.Attribute) ,COP(Default_Path_No_IP,Path,1) CONCAT(Path,Parameters.Val_Participants[node_index].Device_IP,Path) DLR_PathToHex(PathToHex,Path,Msg_Get_All.Path) ] OTL(Message_Triggers.10) ,XIC(Msg_Get_All.DN) XIO(Message_Triggers.10) [BTD(Parameters.Storage[0],0,Parameters.Val_Participants[node_index].Vendor_Code,0,8) BTD(Parameters.Storage[1],0,Parameters.Val_Participants[node_index].Vendor_Code,8,8) ,BTD(Parameters.Storage[2],0,Parameters.Val_Participants[node_index].Product_Type,0,8) BTD(Parameters.Storage[3],0,Parameters.Val_Participants[node_index].Product_Type,8,8) ,BTD(Parameters.Storage[4],0,Parameters.Val_Participants[node_index].Device_Code,0,8) BTD(Parameters.Storage[5],0,Parameters.Val_Participants[node_index].Device_Code,8,8) ,COP(Parameters.Storage[10],Temp,1) DLR_Dec_to_Hex(NDTH,Temp,Parameters.Val_Participants[node_index].Serial_Number) ,BTD(Parameters.Storage[6],0,Parameters.Val_Participants[node_index].Revision_Major,0,8) BTD(Parameters.Storage[7],0,Parameters.Val_Participants[node_index].Revision_Minor,0,8) ,MOV(Parameters.Storage[14],Parameters.Val_Participants[node_index].Cat_Number.LEN) ,LIM(1,Parameters.Val_Participants[node_index].Cat_Number.LEN,32) COP(Parameters.Storage[15],Parameters.Val_Participants[node_index].Cat_Number.DATA[0],Parameters.Val_Participants[node_index].Cat_Number.LEN) OTE(valid_tmp) ,DLR_Icon(Icon,Parameters.Val_Participants[node_index].Vendor_Code,Parameters.Val_Participants[node_index].Product_Type,Parameters.Val_Participants[node_index].Device_Code,Parameters.Val_Participants[node_index].Cat_Number,Parameters.Val_Participants[node_index].HMI_Icon) ,XIO(valid_tmp) [FLL(0,Parameters.Val_Participants[node_index].Cat_Number,1) ,MOV(99,Parameters.Val_Participants[node_index].HMI_Icon) ] ,CLR(Parameters.Val_Participants[node_index].Not_Responding) MOV(16,Step) RES(Timer) ] ,XIC(Msg_Get_All.ER) XIO(Message_Triggers.10) [OTU(Found1715) EQU(Parameters.Val_Participants[node_index].Node_Addr_Raw.Device_Mac_Address.Addr[0],0) EQU(Parameters.Val_Participants[node_index].Node_Addr_Raw.Device_Mac_Address.Addr[1],-96) EQU(Parameters.Val_Participants[node_index].Node_Addr_Raw.Device_Mac_Address.Addr[2],-20) OTL(Found1715) ,DLR_Clear_Node_Info(CLR_node,Parameters.Val_Participants[node_index],0) MOV(16,Step) ,XIC(Found1715) MOV(21,Parameters.Val_Participants[node_index].HMI_Icon) ,XIO(Found1715) MOV(1,Parameters.Val_Participants[node_index].Not_Responding) ] RES(Timer) ];
				RC: "Repeat for other nodes";
				N: EQU(Step,17)[XIC(Need_Identity_Update) MOV(11,Step) ADD(node_index,1,node_index) GEQ(node_index,Parameters.Val_Ring_Participant_Count) OTU(Need_Identity_Update) CLR(node_index) MOV(20,Step) ,XIO(Need_Identity_Update) MOV(20,Step) ];
				RC: "Starting polling all nodes for DLR information";
				N: EQU(Step,21)[EQU(Parameters.Val_Ring_Participant_Count,0) OTU(Need_DLR_Update) MOV(Final_Step,Step) ,GRT(Parameters.Val_Ring_Participant_Count,0) MOV(22,Step) ];
				RC: "Poll a node if IP address is not 0";
				N: EQU(Step,22)[NEQ(Parameters.Val_Participants[node_index].Node_Addr_Raw.Device_IP_Address,0) MOV(25,Step) ,EQU(Parameters.Val_Participants[node_index].Node_Addr_Raw.Device_IP_Address,0) DLR_Clear_Node_Info(CLR_node,Parameters.Val_Participants[node_index],1) MOV(27,Step) ];
				RC: "Poll DLR object";
				N: EQU(Step,25)[ONS(ons.5) [RES(SteplockTimer) MOV(71,Msg_Get_All.Class) MOV(1,Msg_Get_All.Instance) CLR(Msg_Get_All.Attribute) ,COP(Default_Path_No_IP,Path,1) CONCAT(Path,Parameters.Val_Participants[node_index].Device_IP,Path) DLR_PathToHex(PathToHex,Path,Msg_Get_All.Path) ] OTL(Message_Triggers.20) ,XIC(Msg_Get_All.DN) XIO(Message_Triggers.20) [GEQ(Msg_Get_All.DN_LEN,54) [MOV(Parameters.Storage[2],Parameters.Val_Participants[node_index].Supervisor_Mode) MOV(Parameters.Storage[3],Parameters.Val_Participants[node_index].Supervisor_Enable) ,NEQ(Parameters.Storage[4],Parameters.Val_Participants[node_index].Supervisor_Presedence) MOV(-1,Parameters.Val_Participants[node_index].Takeover_Order) ,MOV(Parameters.Storage[4],Parameters.Val_Participants[node_index].Supervisor_Presedence) COP(Parameters.Storage[13],Parameters.Val_Participants[node_index].DLR_VLAN,1) ,COP(Parameters.Storage[5],Parameters.Val_Participants[node_index].Beacon_Interval,1) COP(Parameters.Storage[9],Parameters.Val_Participants[node_index].Beacon_Timeout,1) ,COP(Parameters.Storage[15],Parameters.Val_Participants[node_index].Ring_Faults,1) COP(Parameters.Storage[50],Parameters.Val_Participants[node_index].Capabilities,1) ] ,EQU(Msg_Get_All.DN_LEN,16) [DLR_Clear_Node_Info(CLR_node,Parameters.Val_Participants[node_index],0) ,MOV(2,Parameters.Val_Participants[node_index].Supervisor_Mode) COP(Parameters.Storage[12],Parameters.Val_Participants[node_index].Capabilities,1) ] ,NEQ(Msg_Get_All.DN_LEN,16) LES(Msg_Get_All.DN_LEN,54) DLR_Clear_Node_Info(CLR_node,Parameters.Val_Participants[node_index],1) ,CLR(Parameters.Val_Participants[node_index].Not_Responding) MOV(26,Step) RES(Timer) ] ,XIC(Msg_Get_All.ER) XIO(Message_Triggers.20) [DLR_Clear_Node_Info(CLR_node,Parameters.Val_Participants[node_index],0) MOV(26,Step) ,OTU(Found1715) EQU(Parameters.Val_Participants[node_index].Node_Addr_Raw.Device_Mac_Address.Addr[0],0) EQU(Parameters.Val_Participants[node_index].Node_Addr_Raw.Device_Mac_Address.Addr[1],-96) EQU(Parameters.Val_Participants[node_index].Node_Addr_Raw.Device_Mac_Address.Addr[2],-20) OTL(Found1715) ,XIO(Found1715) MOV(1,Parameters.Val_Participants[node_index].Not_Responding) ] RES(Timer) ];
				RC: "Repeat for other nodes";
				N: EQU(Step,27)[ADD(node_index,1,node_index) GEQ(node_index,Parameters.Val_Ring_Participant_Count) CLR(node_index) OTU(Need_DLR_Update) ,XIO(Need_DLR_Update) MOV(30,Step) ,XIC(Need_DLR_Update) MOV(20,Step) ];
				RC: "Takeover order soring";
				N: EQU(Step,30)CLR(SortIndex)MOV(32,Step)[LES(Parameters.Val_Ring_Participant_Count,2) ,AND(node_index,7,temp_masked) NEQ(temp_masked,0) ]MOV(Final_Step,Step);
				N: EQU(Step,32)[MOV(SortIndex,SortNode[SortIndex].Index) ,EQU(Parameters.Val_Participants[SortIndex].Supervisor_Enable,1) MOV(Parameters.Val_Participants[SortIndex].Supervisor_Presedence,SortNode[SortIndex].Presedence) ,NEQ(Parameters.Val_Participants[SortIndex].Supervisor_Enable,1) MOV(-1,SortNode[SortIndex].Presedence) ,COP(Parameters.Val_Participants[SortIndex].Node_Addr_Raw.Device_Mac_Address,SortNode[SortIndex].MAC,1) ]ADD(SortIndex,1,SortIndex)[GEQ(SortIndex,Parameters.Val_Ring_Participant_Count) ,GEQ(SortIndex,50) ]MOV(34,Step);
				N: EQU(Step,34)MOV(2,SortIndex2)MOV(2,SortIndex)MOV(35,Step);
				N: LBL(Inner_loop)EQU(Step,36)[[GRT(SortNode[SortIndex].Presedence,SortNode[SortIndex2-1].Presedence) ,EQU(SortNode[SortIndex].Presedence,SortNode[SortIndex2-1].Presedence) DLR_MAC_Compare(MAC_C1,SortNode[SortIndex].MAC,SortNode[SortIndex2-1].MAC) XIC(MAC_C1.GRT) ] COP(SortNode[SortIndex],TempNode,1) COP(SortNode[SortIndex2-1],SortNode[SortIndex],1) COP(TempNode,SortNode[SortIndex2-1],1) ,ADD(SortIndex,1,SortIndex) LES(SortIndex,Parameters.Val_Ring_Participant_Count) LES(SortIndex,50) JMP(Inner_loop) ,MOV(37,Step) ];
				N: EQU(Step,38)MOV(39,Step)ADD(SortIndex2,1,SortIndex2)LES(SortIndex2,Parameters.Val_Ring_Participant_Count)LES(SortIndex2,50)MOV(36,Step)MOV(SortIndex2,SortIndex)JMP(Inner_loop);
				N: EQU(Step,40)CLR(SortIndex)MOV(41,Step);
				N: LBL(result_loop)EQU(Step,41)[MOV(SortNode[SortIndex].Index,SortIndex2) LES(SortIndex2,50) MOV(SortIndex,Parameters.Val_Participants[SortIndex2].Takeover_Order) ,ADD(SortIndex,1,SortIndex) LES(SortIndex,Parameters.Val_Ring_Participant_Count) LES(SortIndex,50) JMP(result_loop) ]MOV(Final_Step,Step);
				N: [EQU(Step,35) ,EQU(Step,37) ,EQU(Step,39) ]ADD(Step,1,Step);
				RC: "Intermediate step to slow down messaging";
				N: [EQU(Step,2) ,EQU(Step,5) ,EQU(Step,7) ,EQU(Step,11) ,EQU(Step,16) ,EQU(Step,20) ,EQU(Step,26) ]XIC(Timer.DN)ADD(Step,1,Step);
				N: EQU(Step,PreviousStep)TON(SteplockTimer,?,?);
				N: XIO(SteplockTimer.EN)MOV(Step,PreviousStep);
				N: XIC(SteplockTimer.DN)ONS(ons.30)RES(Timer)MOV(Final_Step,Step);
				RC: "Final step$N"
				    "Introduce a delay before re-starting sequencer: return to initial step if sequence is complete and timer is done";
				N: EQU(Step,Final_Step)XIC(Timer.DN)MOV(1,Step);
				RC: "Get All Message$N"
				    "Triggered by Message_Triggers$N"
				    "If Done, unset message triggers bit to allow step to continue with copy$N"
				    "If an error is detected, on first error, reset the sequencer$N"
				    "If the error still exists then go to error step";
				N: [XIC(Message_Triggers.1) ,XIC(Message_Triggers.10) ,XIC(Message_Triggers.20) ]XIO(Msg_Get_Sgl.EN)XIO(Msg_Clear_Flt_Count.EN)XIO(Msg_Clr_Rapid_Faults.EN)[MSG(Msg_Get_All) ,[XIC(Msg_Get_All.DN) OTU(First_Msg_Error) OTU(Message_Triggers.1) ,XIC(Msg_Get_All.ER) LIM(10,Step,29) ] OTU(Message_Triggers.10) OTU(Message_Triggers.20) ,XIC(Msg_Get_All.ER) LES(Step,10) [XIC(First_Msg_Error) MOV(100,Step) ,XIO(First_Msg_Error) [MOV(Step,Error.Step) COP(Msg_Get_All.Path,Error.Path,1) ,MOV(Msg_Get_All.Class,Error.Class) MOV(Msg_Get_All.Instance,Error.Instance) MOV(Msg_Get_All.Attribute,Error.Attribute) ,[EQU(Step,1) MOV(30,Temp) ,NEQ(Step,1) MOV(1,Temp) ] ,MOV(Temp,Step) OTL(First_Msg_Error) OTU(Message_Triggers.1) OTU(Message_Triggers.10) OTU(Message_Triggers.20) ] ] ];
				RC: "Get Single Message$N"
				    "Triggered by Message_Triggers bits$N"
				    "If Done, unset message triggers bit to allow step to continue with copy$N"
				    "If an error is detected, on the first error restart the sequencer$N"
				    "If the error still exists then go to error step";
				N: XIC(Message_Triggers.2)XIO(Msg_Get_All.EN)XIO(Msg_Clear_Flt_Count.EN)XIO(Msg_Clr_Rapid_Faults.EN)[MSG(Msg_Get_Sgl) ,XIC(Msg_Get_Sgl.DN) OTU(Message_Triggers.2) ,XIC(First_Msg_Error) XIC(Msg_Get_Sgl.ER) MOV(100,Step) ,XIO(First_Msg_Error) XIC(Msg_Get_Sgl.ER) MOV(Step,Error.Step) MOV(1,Step) OTL(First_Msg_Error) OTU(Message_Triggers.2) ];
				RC: "Set Single Message$N"
				    "Configured to reset Ring Fault Counter:$N"
				    "Sets Class = 71, Instance = 1, Attribute = 5";
				N: XIC(Parameters.Set_ClearFaultCount)XIO(Msg_Get_All.EN)XIO(Msg_Get_Sgl.EN)XIO(Msg_Clr_Rapid_Faults.EN)[MOV(71,Msg_Clear_Flt_Count.Class) MOV(1,Msg_Clear_Flt_Count.Instance) MOV(5,Msg_Clear_Flt_Count.Attribute) ,FLL(0,Parameters.Storage[0],2) MSG(Msg_Clear_Flt_Count) OTU(Parameters.Set_ClearFaultCount) ];
				N: XIC(Msg_Clear_Flt_Count.DN)ONS(ons.7)CLR(Parameters.Val_Participants[0].Ring_Faults);
				RC: "Clear Rapid Faults.  $N"
				    "Configured for Get and Clear Service (4C)$N"
				    "Class 71, Instance 1, Attribute 0";
				N: XIC(Parameters.Set_ClearRapidFaults)XIO(Msg_Clear_Flt_Count.EN)XIO(Msg_Get_All.EN)XIO(Msg_Get_Sgl.EN)[MOV(71,Msg_Clr_Rapid_Faults.Class) MOV(1,Msg_Clr_Rapid_Faults.Instance) CLR(Msg_Clr_Rapid_Faults.Attribute) ,MSG(Msg_Clr_Rapid_Faults) OTU(Parameters.Set_ClearRapidFaults) ];
				N: XIC(Msg_Clr_Rapid_Faults.DN)ONS(ons.8)MOV(1,Step)CLR(node_index);
				RC: "Step 100 and 101$N"
				    "Both triggered by messaging errors$N"
				    "Indicate to HMI by setting correct bit$N"
				    "On operator input, clear error, reset path to default and restart sequencer";
				N: LIM(100,Step,101)[CLR(Message_Triggers) ,TON(Faulted_State_Timer,?,?) ,XIC(Faulted_State_Timer.DN) [MOV(1,Step) ,OTU(First_Msg_Error) ,OTL(Do_Once) ] ];
				RC: "Step 110$N"
				    "Too many nodes";
				N: EQU(Step,110)MOV(1,Step);
				RC: "Set error bit if any one of the messages goes to error mode$N"
				    "";
				N: XIC(Enable)OTE(EN)OTE(Parameters.Val_AOI_Enabled)XIC(Faulted_State_Timer.EN)OTE(ER)OTE(Parameters.Val_AOI_Error);
				RC: "Capture Animation and Instance selections in order to check for change at start of scan";
				N: MOV(Parameters.Set_FaceplateAnimation,OldAnimation);
				N: CLR(zero_node_index)OTU(Zero_Node_Found);
				N: LBL(Zero_node_loop)EQU(Parameters.Val_Participants[zero_node_index].Node_Addr_Raw.Device_IP_Address,0)OTL(Zero_Node_Found);
				N: ADD(zero_node_index,1,zero_node_index)LES(zero_node_index,Parameters.Val_Ring_Participant_Count)XIO(Zero_Node_Found)JMP(Zero_node_loop);
				N: XIC(Zero_Node_Found)OTE(Zero_Node);
				RC: "The following rung provide automated way to rebuild participants list after ring recovered from the break $N"
				    "$N"
				    "State 0 - wait until ring is $QNormal$Q";
				N: EQU(RebuildState,0)EQU(Parameters.Val_Network_Topology,1)EQU(Parameters.Val_Network_Status,0)MOV(1,RebuildState);
				RC: "State 1  - wait for Ring fault or supervisor has no IP address listed";
				N: EQU(RebuildState,1)EQU(Parameters.Val_Network_Topology,1)[EQU(Parameters.Val_Network_Status,1) ,EQU(Parameters.Val_Participants[0].Node_Addr_Raw.Device_IP_Address,0) ]CLR(RebuildCount)MOV(2,RebuildState);
				RC: "Sate 2 -  wait for network to become $QNormal$Q again$N"
				    "$N"
				    "Then start Rebuild timer";
				N: EQU(RebuildState,2)EQU(Parameters.Val_Network_Topology,1)EQU(Parameters.Val_Network_Status,0)RES(Rebuild_List_Timer)MOV(3,RebuildState);
				RC: "State 3 - Once timer is gonee verify:$N"
				    "If no nodes without IP address then we done$N"
				    "If node without IP found, then try to rebuld list to see if node comes with IP address: $N"
				    "- message tigger is set$N"
				    "- Timer restarted$N"
				    "After 5 attempts we stopped attemts to get Ip address until next network failure - assumes that node does not have IP address  (like ETAP) ";
				N: EQU(RebuildState,3)XIC(Rebuild_List_Timer.DN)[XIO(Zero_Node) MOV(1,RebuildState) ,XIC(Zero_Node) [OTL(Trigger_Rebuild) MOV(2,RebuildState) ,ADD(RebuildCount,1,RebuildCount) GEQ(RebuildCount,5) MOV(1,RebuildState) ] ];
				RC: "Timer between rebuild attempts";
				N: TON(Rebuild_List_Timer,?,?);
				RC: "Rebuild message triggeter from sequience above or request from HMI Faceplate";
				N: XIC(Trigger_Rebuild)OTU(Trigger_Rebuild)MSG(Msg_Rst_SignOn);
				N: CLR(link_index)[NEQ(Parameters.Val_Network_Topology,1) ,EQU(Parameters.Val_Network_Status,0) ,EQU(Parameters.Val_Ring_Participant_Count,0) ]JMP(find_Node2_Done);
				N: LBL(find_Node1)DLR_MAC_Compare(MAC_C1,Parameters.Val_Last_Node_Port1.Last_Node_Raw.Device_Mac_Address,Parameters.Val_Participants[link_index].Node_Addr_Raw.Device_Mac_Address)XIC(MAC_C1.NEQ)OTL(Parameters.Val_LinkState[link_index])ADD(link_index,1,link_index)LES(link_index,50)JMP(find_Node1);
				N: OTU(Parameters.Val_LinkState[link_index])MOV(link_index,Parameters.Val_Last_Node_Port1.Last_Node_Number)ADD(link_index,1,link_index)GRT(link_index,50)MOV(50,link_index);
				N: LBL(find_Node2)DLR_MAC_Compare(MAC_C1,Parameters.Val_Last_Node_Port2.Last_Node_Raw.Device_Mac_Address,Parameters.Val_Participants[link_index].Node_Addr_Raw.Device_Mac_Address)XIC(MAC_C1.NEQ)OTU(Parameters.Val_LinkState[link_index])ADD(link_index,1,link_index)LES(link_index,50)JMP(find_Node2);
				N: OTL(Parameters.Val_LinkState[link_index])MOV(link_index,Parameters.Val_Last_Node_Port2.Last_Node_Number)ADD(link_index,1,link_index)GRT(link_index,50)MOV(50,link_index);
				N: LBL(find_Node2_Done)OTL(Parameters.Val_LinkState[link_index])ADD(link_index,1,link_index)LES(link_index,50)JMP(find_Node2_Done);
				N: GRT(Parameters.Val_Last_Node_Port1.Last_Node_Number,45)CLR(Parameters.Val_Last_Node_Port1.Last_Node_Number);
				N: GRT(Parameters.Val_Last_Node_Port2.Last_Node_Number,45)CLR(Parameters.Val_Last_Node_Port2.Last_Node_Number);
				N: COP(Parameters.Val_Participants[Parameters.Val_Last_Node_Port1.Last_Node_Number].Cat_Number,Parameters.Val_Last_Node_Port1.Last_Node_Cat_Number,1)COP(Parameters.Val_Participants[Parameters.Val_Last_Node_Port2.Last_Node_Number].Cat_Number,Parameters.Val_Last_Node_Port2.Last_Node_Cat_Number,1);
				N: COP(Parameters.Val_Participants[Parameters.Val_Last_Node_Port1.Last_Node_Number].Serial_Number,Parameters.Val_Last_Node_Port1.Last_Node_Serial_Number,1)COP(Parameters.Val_Participants[Parameters.Val_Last_Node_Port2.Last_Node_Number].Serial_Number,Parameters.Val_Last_Node_Port2.Last_Node_Serial_Number,1);
				N: XIC(Parameters.Set_Node_Up)OTU(Parameters.Set_Node_Up)ADD(Parameters.Val_Selected_Node,1,Temp_node)[GEQ(Temp_node,Parameters.Val_Ring_Participant_Count) CLR(Parameters.Val_Selected_Node) ,LES(Temp_node,Parameters.Val_Ring_Participant_Count) MOV(Temp_node,Parameters.Val_Selected_Node) ];
				N: XIC(Parameters.Set_Node_Dn)OTU(Parameters.Set_Node_Dn)[LEQ(Parameters.Val_Selected_Node,0) SUB(Parameters.Val_Ring_Participant_Count,1,Temp_node) ,GRT(Parameters.Val_Selected_Node,0) SUB(Parameters.Val_Selected_Node,1,Temp_node) ]MOV(Temp_node,Parameters.Val_Selected_Node);
				N: COP(Parameters.Set_Node_Direct,Temp_Node_Call[0],2)[NEQ(Temp_Node_Call[0],0) CPT(Temp_node,LOG(Temp_Node_Call[0])/ LOG (2)) ,NEQ(Temp_Node_Call[1],0) CPT(Temp_node,LOG(Temp_Node_Call[1])/ LOG (2) +32) ][LES(Temp_node,Parameters.Val_Ring_Participant_Count) MOV(Temp_node,Parameters.Val_Selected_Node) MOV(30,Parameters.Set_FaceplateAnimation) ,FLL(0,Parameters.Set_Node_Direct,1) ];
				N: ADD(Parameters.Val_Selected_Node,1,Parameters.Val_Selected_NodePlus);
				N: [EQU(Parameters.Set_FaceplateAnimation,20) ,EQU(Parameters.Set_FaceplateAnimation,40) ]COP(Parameters.Val_Participants[0],Parameters.Val_Display_Node,1);
				N: EQU(Parameters.Set_FaceplateAnimation,30)COP(Parameters.Val_Participants[Parameters.Val_Selected_Node],Parameters.Val_Display_Node,1);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION NET_Dec_to_Hex (Revision := "1.0",
	                                              ExecutePrescan := No,
	                                              ExecutePostscan := No,
	                                              ExecuteEnableInFalse := No,
	                                              CreatedDate := "2015-06-16T17:18:11.516Z",
	                                              CreatedBy := "Not Available",
	                                              EditedDate := "2015-07-17T12:25:21.681Z",
	                                              EditedBy := "Not Available",
	                                              SoftwareRevision := "v20.01")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Source_Dec : DINT (Usage := Input,
			                      RADIX := Decimal,
			                      Required := Yes,
			                      Visible := Yes,
			                      DefaultData := 0);
			Dest_String : STRING16 (Usage := InOut,
			                       Required := Yes,
			                       Visible := Yes);
		END_PARAMETERS

		LOCAL_TAGS
			J : DINT (RADIX := Decimal,
			            ExternalAccess := Read/Write,
			            DefaultData := 0);
			Nibble_SINT : SINT[9] (RADIX := Decimal,
			                      ExternalAccess := Read/Write,
			                      DefaultData := "[0,0,0,0,0,0,0,0,0]");
			temp : DINT (RADIX := Decimal,
			               ExternalAccess := Read/Write,
			               DefaultData := 0);
			temp_DINT : DINT (RADIX := Decimal,
			                    ExternalAccess := Read/Write,
			                    DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				N: MOV(7,J)CLR(temp_DINT)MOV(Source_Dec,temp_DINT);
				N: LBL(ONE)AND(temp_DINT,15,temp)[LIM(0,temp,9) ADD(temp,48,Nibble_SINT[J]) ,LIM(10,temp,15) ADD(temp,55,Nibble_SINT[J]) ,NEQ(J,0) SUB(J,1,J) BTD(temp_DINT,4,temp_DINT,0,28) JMP(ONE) ];
				N: COP(Nibble_SINT[0],Dest_String.DATA[0],8)MOV(8,Dest_String.LEN);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION NET_Fault_Logging (Description := "Log faults from MSG instructions for troubleshooting",
	                                                 Revision := "1.1",
	                                                 ExecutePrescan := No,
	                                                 ExecutePostscan := No,
	                                                 ExecuteEnableInFalse := No,
	                                                 CreatedDate := "2017-06-28T12:39:01.775Z",
	                                                 CreatedBy := "Not Available",
	                                                 EditedDate := "2017-07-19T17:06:52.539Z",
	                                                 EditedBy := "Not Available",
	                                                 SoftwareRevision := "v20.04")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Enable : BOOL (Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  DefaultData := 0);
			Clear_Log : BOOL (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     DefaultData := 0);
			ActiveStep : DINT (Usage := Input,
			                      RADIX := Decimal,
			                      Required := Yes,
			                      Visible := Yes,
			                      DefaultData := 0);
			Get_All : MESSAGE (Usage := InOut,
			                   Required := Yes,
			                   Visible := Yes);
			Get_Single : MESSAGE (Usage := InOut,
			                      Required := Yes,
			                      Visible := Yes);
			Set_Single : MESSAGE (Usage := InOut,
			                      Required := Yes,
			                      Visible := Yes);
			Set_Custom : MESSAGE (Usage := InOut,
			                      Required := Yes,
			                      Visible := Yes);
			ER_Log : Stratix_Message_Log_Record[20] (Usage := InOut,
			                  Required := Yes,
			                  Visible := Yes);
			Total_Faults : DINT (Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			OnsBits : DINT (RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
			LogSize : DINT (RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
			LastElement : DINT (RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				N: XIC(Enable)SIZE(ER_Log,0,LogSize)SUB(LogSize,1,LastElement);
				N: XIC(Clear_Log)ONS(OnsBits.0)FLL(0,ER_Log[0],LogSize)CLR(Total_Faults);
				N: XIC(Enable)XIC(Get_All.ER)ONS(OnsBits.1)[COP(ER_Log[1],ER_Log[0],LastElement) GSV(WallClockTime,,LocalDateTime,ER_Log[LastElement].Time_Stamp[0]) MOV(1,ER_Log[LastElement].Message_Type) ,MOV(ActiveStep,ER_Log[LastElement].Step) MOV(Get_All.ERR,ER_Log[LastElement].Error_Code) MOV(Get_All.EXERR,ER_Log[LastElement].Ext_Error_Code) ADD(Total_Faults,1,Total_Faults) ];
				N: XIC(Enable)XIC(Get_Single.ER)ONS(OnsBits.2)[COP(ER_Log[1],ER_Log[0],LastElement) GSV(WallClockTime,,LocalDateTime,ER_Log[LastElement].Time_Stamp[0]) MOV(2,ER_Log[LastElement].Message_Type) ,MOV(ActiveStep,ER_Log[LastElement].Step) MOV(Get_Single.ERR,ER_Log[LastElement].Error_Code) MOV(Get_Single.EXERR,ER_Log[LastElement].Ext_Error_Code) ADD(Total_Faults,1,Total_Faults) ];
				N: XIC(Enable)XIC(Set_Single.ER)ONS(OnsBits.3)[COP(ER_Log[1],ER_Log[0],LastElement) GSV(WallClockTime,,LocalDateTime,ER_Log[LastElement].Time_Stamp[0]) MOV(3,ER_Log[LastElement].Message_Type) ,MOV(ActiveStep,ER_Log[LastElement].Step) MOV(Set_Single.ERR,ER_Log[LastElement].Error_Code) MOV(Set_Single.EXERR,ER_Log[LastElement].Ext_Error_Code) ADD(Total_Faults,1,Total_Faults) ];
				N: XIC(Enable)XIC(Set_Custom.ER)ONS(OnsBits.4)[COP(ER_Log[1],ER_Log[0],LastElement) GSV(WallClockTime,,LocalDateTime,ER_Log[LastElement].Time_Stamp[0]) MOV(4,ER_Log[LastElement].Message_Type) ,MOV(ActiveStep,ER_Log[LastElement].Step) MOV(Set_Custom.ERR,ER_Log[LastElement].Error_Code) MOV(Set_Custom.EXERR,ER_Log[LastElement].Ext_Error_Code) ADD(Total_Faults,1,Total_Faults) ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION NET_Inc_with_Gap (Revision := "1.0",
	                                                ExecutePrescan := No,
	                                                ExecutePostscan := No,
	                                                ExecuteEnableInFalse := No,
	                                                CreatedDate := "2016-08-10T19:15:20.079Z",
	                                                CreatedBy := "Not Available",
	                                                EditedDate := "2017-07-12T11:24:29.929Z",
	                                                EditedBy := "Not Available",
	                                                SoftwareRevision := "v20.04")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Index : DINT (Usage := InOut,
			                 RADIX := Decimal,
			                 Required := Yes,
			                 Visible := Yes);
			Gap1 : SINT (Usage := Input,
			                RADIX := Decimal,
			                Required := Yes,
			                Visible := Yes,
			                DefaultData := 0);
			Gap2 : SINT (Usage := Input,
			                RADIX := Decimal,
			                Required := Yes,
			                Visible := Yes,
			                DefaultData := 0);
			Dec : BOOL (Usage := Input,
			               RADIX := Decimal,
			               Required := Yes,
			               Visible := Yes,
			               DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
		END_LOCAL_TAGS

		ROUTINE Logic 
				N: XIO(Dec)[EQU(Index,6) EQU(Gap1,1) MOV(10,Index) ,EQU(Index,14) EQU(Gap2,1) MOV(18,Index) ,ADD(Index,1,Index) ];
				N: XIC(Dec)[EQU(Index,11) EQU(Gap1,1) MOV(7,Index) ,EQU(Index,19) EQU(Gap2,1) MOV(15,Index) ,SUB(Index,1,Index) ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION NET_IP_Addr_to_String (Description := "Converts numerical IP address into user-readable string",
	                                                     Revision := "1.0",
	                                                     ExecutePrescan := No,
	                                                     ExecutePostscan := No,
	                                                     ExecuteEnableInFalse := No,
	                                                     CreatedDate := "2013-01-10T08:42:07.668Z",
	                                                     CreatedBy := "Not Available",
	                                                     EditedDate := "2015-08-06T01:03:59.391Z",
	                                                     EditedBy := "Not Available",
	                                                     SoftwareRevision := "v20.01",
	                                                     AdditionalHelpText := "AOI to convert a numerical IP address into a string in dotted decimal format$N$NEnter input DINT containing IP address in Numerical IP address field.$N$NEnter STRING variable to contain output in Readable IP address field")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Numerical_IP_Address : DINT (Usage := InOut,
			                                RADIX := Decimal,
			                                Required := Yes,
			                                Visible := Yes);
			Readable_IP_Address : STRING16 (Usage := InOut,
			                               Required := Yes,
			                               Visible := Yes);
		END_PARAMETERS

		LOCAL_TAGS
			StrOctet : STRING32[4] (ExternalAccess := Read/Write,
			                   DefaultData := "[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']]");
			Octet : DINT[4] (RADIX := Decimal,
			                ExternalAccess := Read/Write,
			                DefaultData := "[0,0,0,0]");
			Dot : STRING (ExternalAccess := Read/Write,
			              DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "Set:$QDot$Q variable to ASCII 46$N"
				    "Only a single variable so done every scan";
				N: MOV(1,Dot.LEN)MOV(46,Dot.DATA[0]);
				RC: "Clear existing output";
				N: [CLR(Readable_IP_Address.LEN) ,FLL(0,Readable_IP_Address.DATA[0],16) ];
				RC: " Transfer input to elements of a DINT array$N"
				    "Transfers octets from one DINT to four DINTs$N"
				    "Convert each DINT to a STRING";
				N: [BTD(Numerical_IP_Address,0,Octet[0],0,8) DTOS(Octet[0],StrOctet[0]) ,BTD(Numerical_IP_Address,8,Octet[1],0,8) DTOS(Octet[1],StrOctet[1]) ,BTD(Numerical_IP_Address,16,Octet[2],0,8) DTOS(Octet[2],StrOctet[2]) ,BTD(Numerical_IP_Address,24,Octet[3],0,8) DTOS(Octet[3],StrOctet[3]) ];
				RC: "Assemble octets into the form of a readable IP address in dotted decimal form";
				N: [CONCAT(StrOctet[0],Readable_IP_Address,Readable_IP_Address) CONCAT(Dot,Readable_IP_Address,Readable_IP_Address) ,CONCAT(StrOctet[1],Readable_IP_Address,Readable_IP_Address) CONCAT(Dot,Readable_IP_Address,Readable_IP_Address) ,CONCAT(StrOctet[2],Readable_IP_Address,Readable_IP_Address) CONCAT(Dot,Readable_IP_Address,Readable_IP_Address) ,CONCAT(StrOctet[3],Readable_IP_Address,Readable_IP_Address) ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION NET_NodeMSGPathCreate (Description := "Converts a Comma separated String (as typed in $QPath$Q of MSG) to Hex Path string as used in MSG.Path element.",
	                                                     Revision := "2.2",
	                                                     RevisionNote := "February 2017: added support for Dual IP mode with CompactLogix 5380 (port 3 and 4)$N",
	                                                     Vendor := "Rockwell Automation",
	                                                     ExecutePrescan := No,
	                                                     ExecutePostscan := No,
	                                                     ExecuteEnableInFalse := No,
	                                                     CreatedDate := "2007-03-16T20:58:31.648Z",
	                                                     CreatedBy := "Not Available",
	                                                     EditedDate := "2017-07-07T14:27:22.080Z",
	                                                     EditedBy := "Not Available",
	                                                     SoftwareRevision := "v20.04",
	                                                     AdditionalHelpText := "Converts a Comma separated String (as typed in $QPath$Q$Nof a MSG Instruction) to a Hex Path string$Nas used in MSG.Path STRING element of the Structure.$N$NThe AOI is useful for when the Path of a Message$Ninstruction cannot be entered directly in the $QPath$Q entry$Nof the $QCommunication$Q Tab of the $QMessage Configuration$Q$Nscreen. It will also allow using the same MSG instruction to$Ntarget different destinations.$N$NIt will allow a user to save a Path into a separate STRING tag,$Nindependent to the Message Configuration Screen, but using$Nthe same Comma separated format.$N$NWARNING: Verify that the Comma Separated Path is correctly created.$NThe AOI instruction doesn$'t validate a particular path and this may cause$Na message instruction to be directed to the wrong device.$N$NWARNING: Make sure you understand the implication of sending$Na particular message to a device. If you send the wrong message to$Nthe wrong device, unexpected behavior may occur leading to personal$Ninjury or death, property damage, or economic loss.$N$NExamples of conversion:$N$NComma separated Path$THex Path string in MSG.Path$N1,4$T$T$T$$01$$04$N1,2,2,10.88.76.91,1,3$T$$01$$02$$12$$0B10.88.76.91$$00$$01$$03$N1,1,2,4,1,3$T$T$$01$$01$$02$$04$$01$$03$N$NFor more information on Path entry format, refer to RSLogix 5000 Online Help$Nin the section: $QSpecify the Communication Details$Q$N$NValidation of Input Path:$NThe AIO checks for certain errors on the syntax of the Comma-Separated Input path. The  errors checked and their respective errors generated are:$N   ErrorCode:$N   =0: No error found$N   =1: The number of commas in the path is not and odd number.$N          The Port/Address pair must always lead to an even number of entries in the path.$N   =2: The number of dots in the IP address is not 3 (x.x.x.x)$N   =3: The Port component of the path is not 1,2 or 3. These are the only valid numbers.$N   =4: There cannot be two consecutive commas (needs character between them)$N   =5: IP address octet needs to be between 0 and 255$N   =6: There needs to be an IP octet between two dots$N   =7: The next_address component of the path needs to be between 0 and 99 (when not an IP address)$N   =8: General Path format issue$N$N$N-----------------------------------$NRevision History$N-----------------------------------$N$Nv2 (3/26/08):$N- Added code to validate Comma Separated Path and included ERR bit and ErrorCode$N$Nv1 (3/16/2007):$N- Initial version")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Path_CS_Value : STRING (Usage := InOut,
			                         Required := Yes,
			                         Visible := Yes);
			Path_Hex_Value : STRING (Usage := InOut,
			                          Required := Yes,
			                          Visible := Yes);
			ERR : BOOL (Usage := Output,
			               RADIX := Decimal,
			               Required := No,
			               Visible := Yes,
			               ExternalAccess := Read Only,
			               DefaultData := 0);
			ErrorCode : DINT (Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			CommaLoc : INT (RADIX := Decimal,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0);
			DotLoc : DINT (RADIX := Decimal,
			                 ExternalAccess := Read/Write,
			                 DefaultData := 0);
			Comma : STRING (ExternalAccess := Read/Write,
			                DefaultData := "[1,',$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Path_Comma_Temp : STRING (ExternalAccess := Read/Write,
			                          DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Path_Element : STRING (ExternalAccess := Read/Write,
			                       DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Ptr_Path_Hex : DINT (RADIX := Decimal,
			                       ExternalAccess := Read/Write,
			                       DefaultData := 0);
			CommaLoc_1 : DINT (RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			Dot : STRING (ExternalAccess := Read/Write,
			              DefaultData := "[1,'.$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Ptr_Path_Element : DINT (RADIX := Decimal,
			                           ExternalAccess := Read/Write,
			                           DefaultData := 0);
			Valid_No_Dots : DINT (RADIX := Decimal,
			                        ExternalAccess := Read/Write,
			                        DefaultData := 0);
			Temp : DINT (Description := "Temporary variable",
			               RADIX := Decimal,
			               ExternalAccess := Read/Write,
			               DefaultData := 0);
			Valid_No_Commas : DINT (RADIX := Decimal,
			                          ExternalAccess := Read/Write,
			                          DefaultData := 0);
			Valid_Port : BOOL (RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			IP_Octet : STRING (ExternalAccess := Read/Write,
			                   DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Empty_String : STRING (ExternalAccess := Read/Write,
			                       DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
		END_LOCAL_TAGS

		ST_ROUTINE Logic 
			'(* Pointer to Hex Path as string is created *)
			'Ptr_Path_Hex:=0;
			'(* Copy Comma-Separated Path to a Temporary string to parse the information *)
			'COP(Path_CS_Value,Path_Comma_Temp,1);
			'
			'(* Comma- Separated Path Validation variables *)
			'	Valid_No_Commas:=0;		(* Number of commas in Path must be odd *)
			'	Valid_No_Dots:=0;		(* Number of dots in IP address must be 3 *)
			'	ERR:=0;					(* Clear error bit *)
			'	ErrorCode:=0;
			'	Valid_Port:=1;			(* Boolean Variable to determine if Path element processed is "Port" or is "Next_Address" *)
			'							(* Comma-Separated Path format is: port,next_address,port,next_address,port,... *)
			'							(* Variable set to 1 when the Port element is being evaluated on the Port/Address pair. *)
			'							(* if the code is validating Address, this value is 0 *)
			'							(* if the code is validating Port, this value is 1 *)
			'
			'	FIND(Path_Comma_Temp,Comma,1,CommaLoc);
			'//valid path includes at least one comma.  If no comma found then Error and Exit.
			'	If CommaLoc=0 Then
			'		ERR:=1;
			'		ErrorCode:=1;
			'	End_if;
			'
			'(* Repeat until the end of the Path converted *)
			'While Not(Path_Comma_Temp.LEN <= 0) AND Not ERR Do
			'
			'	FIND(Path_Comma_Temp,Comma,1,CommaLoc);
			'	
			'	(* Applies for when there is still Path Elements after a Comma *)
			'	If CommaLoc>0 Then
			'		CommaLoc_1:=CommaLoc-1;
			'		Valid_No_Commas:=Valid_No_Commas +1;
			'		(* Verify that there is a character between commas always *)
			'		If CommaLoc = 1 Then
			'			ERR:=1;
			'			ErrorCode:=4;
			'		End_If;
			'	(* Applies for when the Path Element is the last one of the string *)
			'	Else
			'		CommaLoc:=Path_Comma_Temp.LEN;
			'		CommaLoc_1:=Path_Comma_Temp.LEN;
			'	End_If;
			'
			'	(* Select the Path_Element on the left of the String *)
			'	MID(Path_Comma_Temp,CommaLoc_1,1,Path_Element);
			'	(* Remove the Path_Element that will be processed from the String being fragmented *)
			'	DELETE(Path_Comma_Temp,CommaLoc,1,Path_Comma_Temp);
			'	
			'	(* Find if Path_Element is an IP address - with Dots *)
			'	FIND(Path_Element,Dot,1,DotLoc);
			'
			'	If DotLoc>0 Then (*An IP address element was found *)
			'		
			'		//First element of the IP address has to be a character not a dot. If dot, report error.    
			'		If DotLoc=1 Then
			'			ERR:=1;
			'			ErrorCode:=6;
			'			Exit; 
			'		End_If;
			'		
			'		// If path entered has format issues error.  
			'		If Ptr_Path_Hex = 0 Then
			'			ERR := 1;
			'			ErrorCode:= 8;
			'			Exit;
			'		End_If;
			'
			'		
			'		(* Value equals to 16#10 + Port Number *)
			'		Path_Hex_Value.DATA[Ptr_Path_Hex-1]:=Path_Hex_Value.DATA[Ptr_Path_Hex-1]+16#10; 
			'		
			'		(* Next value is Number of characters of IP Address *)
			'		Path_Hex_Value.DATA[Ptr_Path_Hex]:=Path_Element.LEN;
			'
			'		Ptr_Path_Hex:=Ptr_Path_Hex+1;
			'		Ptr_Path_Element:=0;
			'
			'		(* Initialize number of dots in IP address to 0 *)
			'		Valid_No_Dots:=0;
			'		// Initialize IP_Octet for validation
			'		COP(Empty_String,IP_Octet,1);
			'		(* Browse all digits of the IP address and copy them into Hex string *)
			'		(* While Not(Path_Element.DATA[Ptr_Path_Element] = 0) Do*)
			'		While (Ptr_Path_Element < Path_Element.LEN) Do
			'			(* Add to validate IP address has three dots *)
			'			If Path_Element.DATA[Ptr_Path_Element]=16#2e Then
			'
			'				// Check that next element is not also a dot. There needs to be a character between dots.
			'				If Path_Element.DATA[Ptr_Path_Element+1]=16#2e Then
			'					ERR:=1;
			'					ErrorCode:=6;
			'				End_If;
			'
			'				Valid_No_Dots:=Valid_No_Dots+1;
			'
			'				(* Convert IP_Octet to DINT and check if in range of 0 to 255 *)
			'				STOD(IP_Octet,Temp);
			'				If Temp<0 or Temp>255 Then
			'					ERR:=1;
			'					ErrorCode:=5;
			'				End_If;
			'
			'				(* Initialize IP Octet for validation *)
			'				(*IP_Octet.LEN:=0;*)
			'				COP(Empty_String,IP_Octet,1);
			'			Else
			'				IP_Octet.DATA[IP_Octet.LEN]:=Path_Element.DATA[Ptr_Path_Element];
			'				IP_Octet.LEN:=IP_Octet.LEN+1;
			'			End_If;
			'
			'			Path_Hex_Value.DATA[Ptr_Path_Hex]:=Path_Element.DATA[Ptr_Path_Element];
			'			Ptr_Path_Hex:=Ptr_Path_Hex+1;
			'			Ptr_Path_Element:=Ptr_Path_Element+1;
			'		
			'		End_While;
			'
			'		(* Convert last IP_Octet of IP address to DINT and check if in range of 0 to 255 *)
			'		STOD(IP_Octet,Temp);
			'		If Temp<0 or Temp>255 Then
			'			ERR:=1;
			'			ErrorCode:=5;
			'		End_If;
			'
			'		(* If Number of dots of IP is not 3, then set ERR bit *)
			'		If Valid_No_Dots<>3 Then
			'			ErrorCode:=2;
			'			ERR:=1;
			'		End_If;
			'
			'		(* If the number of characters of the IP address is Odd, append additional $$00 *)
			'		Temp:= Path_Element.LEN MOD 2;
			'		If Temp>0 Then
			'			Path_Hex_Value.DATA[Ptr_Path_Hex]:=0;
			'			Ptr_Path_Hex:=Ptr_Path_Hex+1;
			'		End_If;
			'
			'	// Entry is not an IP address
			'	Else (* Path entry converted directly to Hex *)
			'		STOD(Path_Element,Path_Hex_Value.DATA[Ptr_Path_Hex]);
			'		
			'		(* Validation of Port *)
			'		If Valid_Port Then
			'			If Path_Hex_Value.DATA[Ptr_Path_Hex] <1 or Path_Hex_Value.DATA[Ptr_Path_Hex] >3 Then
			'				ErrorCode:=3;
			'				ERR:=1;
			'			End_If;
			'		//Not a Port but an Address of a target (different from IP address)
			'		(* Validation of next_address *)
			'		Else
			'			If Path_Hex_Value.DATA[Ptr_Path_Hex] <0 or Path_Hex_Value.DATA[Ptr_Path_Hex] >99 Then
			'				ErrorCode:=7;
			'				ERR:=1;
			'			End_If;
			'		End_If;
			'
			'		Ptr_Path_Hex:=Ptr_Path_Hex+1;
			'	End_If;
			'	
			'	(* Set length of created Hex string to current array size *)
			'	Path_Hex_Value.LEN:=Ptr_Path_Hex;
			'
			'	(* Toggle Valid_Port so if current element was Port, next element is Address *)
			'	Valid_Port:= Not Valid_Port;
			'
			'End_While;
			'
			'(* If # of commas found is Even, report error in Path *)
			'Temp:= Valid_No_Commas MOD 2;
			'If Temp=0 and Not ERR Then
			'	ErrorCode:=1;
			'	ERR:=1;
			'End_If;
			'
			'If ERR Then
			'	COP(Empty_String,Path_Hex_Value,1);
			'End_If;
			'
			'
		END_ST_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION NET_Switch_PortName (Revision := "1.0",
	                                                   ExecutePrescan := No,
	                                                   ExecutePostscan := No,
	                                                   ExecuteEnableInFalse := No,
	                                                   CreatedDate := "2015-05-21T12:36:20.387Z",
	                                                   CreatedBy := "Not Available",
	                                                   EditedDate := "2017-07-10T14:21:35.147Z",
	                                                   EditedBy := "Not Available",
	                                                   SoftwareRevision := "v20.04")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Port_Name : STRING16 (Usage := InOut,
			                     Required := Yes,
			                     Visible := Yes);
			Model : DINT (Usage := Input,
			                 RADIX := Decimal,
			                 Required := Yes,
			                 Visible := Yes,
			                 DefaultData := 0);
			Port_Instance : DINT (Usage := Input,
			                         RADIX := Decimal,
			                         Required := Yes,
			                         Visible := Yes,
			                         DefaultData := 0);
			Gig_Ports : DINT (Usage := Input,
			                     RADIX := Decimal,
			                     Required := Yes,
			                     Visible := Yes,
			                     DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			DefaultName : STRING32[5] (ExternalAccess := None,
			                      DefaultData := "[[4,'Gi1/$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[4,'Fa1/$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[4,'Fa2/$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[4,'Fa3/$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[4,'Te1/$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']]");
			TempString : STRING32 (ExternalAccess := None,
			                     DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			temp_instance : DINT (RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			done : BOOL (RADIX := Decimal,
			               ExternalAccess := None,
			               DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				N: EQU(Model,5400)DTOS(Port_Instance,TempString)[LEQ(Port_Instance,Gig_Ports) CONCAT(DefaultName[0],TempString,Port_Name) ,GRT(Port_Instance,Gig_Ports) CONCAT(DefaultName[1],TempString,Port_Name) ];
				N: EQU(Model,5410)DTOS(Port_Instance,TempString)[LEQ(Port_Instance,Gig_Ports) CONCAT(DefaultName[0],TempString,Port_Name) ,GRT(Port_Instance,Gig_Ports) CONCAT(DefaultName[4],TempString,Port_Name) ];
				N: EQU(Model,5700)[OTU(done) GRT(Gig_Ports,0) GEQ(Port_Instance,Gig_Ports) CPT(temp_instance,Port_Instance-Gig_Ports+1) DTOS(temp_instance,TempString) CONCAT(DefaultName[0],TempString,Port_Name) OTL(done) ,XIO(done) DTOS(Port_Instance,TempString) CONCAT(DefaultName[1],TempString,Port_Name) ];
				N: EQU(Model,8000)[LIM(1,Port_Instance,2) DTOS(Port_Instance,TempString) CONCAT(DefaultName[0],TempString,Port_Name) ,LIM(3,Port_Instance,10) SUB(Port_Instance,2,Port_Instance) DTOS(Port_Instance,TempString) CONCAT(DefaultName[1],TempString,Port_Name) ,LIM(11,Port_Instance,18) SUB(Port_Instance,10,Port_Instance) DTOS(Port_Instance,TempString) CONCAT(DefaultName[2],TempString,Port_Name) ,LIM(19,Port_Instance,26) SUB(Port_Instance,18,Port_Instance) DTOS(Port_Instance,TempString) CONCAT(DefaultName[3],TempString,Port_Name) ];
				N: EQU(Model,2500)DTOS(Port_Instance,TempString)CONCAT(DefaultName[1],TempString,Port_Name);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION NET_UDINT_Display (Description := "Routine to convert Unsigned DINT into two tags to display correctly on HMI",
	                                                 Revision := "1.0",
	                                                 ExecutePrescan := No,
	                                                 ExecutePostscan := No,
	                                                 ExecuteEnableInFalse := No,
	                                                 CreatedDate := "2016-07-15T11:25:02.357Z",
	                                                 CreatedBy := "Not Available",
	                                                 EditedDate := "2016-07-18T17:48:03.036Z",
	                                                 EditedBy := "Not Available",
	                                                 SoftwareRevision := "v20.04")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Source : DINT (Description := "Unsigned DINT",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := Yes,
			                  Visible := Yes,
			                  DefaultData := 0);
			Destination : DINT[2] (Description := "Result Array",
			                       COMMENT[0] := "Last Digit",
			                       COMMENT[1] := "Source/10",
			                       Usage := InOut,
			                       RADIX := Decimal,
			                       Required := Yes,
			                       Visible := Yes);
		END_PARAMETERS

		LOCAL_TAGS
			temp1 : DINT (RADIX := Decimal,
			                ExternalAccess := None,
			                DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "BTD -> Shifts by one bit to preserve bit 31 this is efectively $QDivide by 2$Q$N"
				    "DIV by 5 will make it total  Divide by 10 and make the upper portion of the result$N"
				    "$N"
				    "MOD - extract division remainder that it number divided by 2.$N"
				    "Result will be between 0 and 4$N"
				    "ADD used instead of x2$N"
				    "XIC brings the bit 0 from the source to the lower portion of the result.";
				N: BTD(Source,1,temp1,0,31)DIV(temp1,5,Destination[1])[MOD(temp1,5,temp1) ADD(temp1,temp1,temp1) ,XIC(Source.0) ADD(temp1,1,temp1) ]MOV(temp1,Destination[0]);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION NET_AB_Stratix_All (Description := "Faceplate Interface for Stratix Switches",
	                                                  Revision := "10.0",
	                                                  RevisionNote := "Combined for all switches$N",
	                                                  Vendor := "Rockwell Automation",
	                                                  ExecutePrescan := Yes,
	                                                  ExecutePostscan := No,
	                                                  ExecuteEnableInFalse := No,
	                                                  CreatedDate := "2013-01-14T08:15:24.225Z",
	                                                  CreatedBy := "Not Available",
	                                                  EditedDate := "2017-07-20T17:56:11.093Z",
	                                                  EditedBy := "Not Available",
	                                                  SoftwareRevision := "v20.04",
	                                                  AdditionalHelpText := "This AOI provides an interface to the Stratix switches.$NIt supports Stratix 2500, 5400, 5410, 5700, 8000, Armor Stratix 5700  families of switches.$N$NThe AOI provides code to support the operation of its corresponding FactoryTalk View Faceplates. $NThe AOI obtains information by explicit messaging and format it for display.$NAOI must be unconditionally ON for proper operation. $NAdding any rung conditions or conditional JSR will cause unexpected operation.$N$NThe first parameter is the backing tag name for instance of the switch AOI. A meaningful name should be entered here.$N$NEnable bit activates AOI sequence$N$NAn instance of the UDT type Stratix_HMI should be provided in the Parameters field. $N$NThe Path_to_Switch field should be populated with a path of the form 1, <ethernet card slot number>, 2, <switch IP address>. This is migrated to the communication paths of the message instructions. See Knowledgebase article 22562 for additional information on paths.$N$NThe Get_All_Message, Get_Single_Message, Set_Single_Message and Set_Custom_Message fields require instances of tag of type Message, which must have controller scope.")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Enable : BOOL (Usage := Input,
			                  RADIX := Decimal,
			                  Required := Yes,
			                  Visible := Yes,
			                  DefaultData := 0);
			EN : BOOL (Usage := Output,
			              RADIX := Decimal,
			              Required := No,
			              Visible := Yes,
			              ExternalAccess := Read Only,
			              DefaultData := 0);
			ER : BOOL (Description := "Error bit",
			              Usage := Output,
			              RADIX := Decimal,
			              Required := No,
			              Visible := Yes,
			              ExternalAccess := Read Only,
			              DefaultData := 0);
			Parameters : Stratix_HMI (Usage := InOut,
			                      Required := Yes,
			                      Visible := Yes);
			Path_to_Switch : STRING (Usage := InOut,
			                          Required := Yes,
			                          Visible := Yes);
			Get_All_Message : MESSAGE (Description := "Message used to read complete CIP objects",
			                           Usage := InOut,
			                           Required := Yes,
			                           Visible := Yes);
			Get_Single_Message : MESSAGE (Description := "Message used to read vendor specific attributes",
			                              Usage := InOut,
			                              Required := Yes,
			                              Visible := Yes);
			Set_Single_Message : MESSAGE (Usage := InOut,
			                              Required := Yes,
			                              Visible := Yes);
			Set_Custom_Message : MESSAGE (Usage := InOut,
			                              Required := Yes,
			                              Visible := Yes);
			SimulatedProductCode : DINT (Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No,
			                                DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			IP1 : NET_IP_Addr_to_String (ExternalAccess := Read/Write,
			              DefaultData := "[1,[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[0,0,0,0],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']]");
			Smart_Port_Names : STRING32[10] (ExternalAccess := Read/Write,
			                           DefaultData := "[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[14,'ab-ethernetip$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[20,'ab-multiport-device$00$00$00$00$00$00$00$00$00$00$00$00$00'],[19,'desktop-automation$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[22,'vm-desktop-automation$00$00$00$00$00$00$00$00$00$00$00'],[18,'switch-automation$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[18,'router-automation$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[17,'phone-automation$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[20,'wireless-automation$00$00$00$00$00$00$00$00$00$00$00$00$00'],[14,'cisco-sniffer$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']]");
			UDINT1 : NET_UDINT_Display (ExternalAccess := None,
			                 DefaultData := "[1,0,0]");
			PortName : NET_Switch_PortName (ExternalAccess := None,
			                   DefaultData := "[1,0,0,0,[[4,'Gi1/$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[4,'Fa1/$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[4,'Fa2/$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[4,'Fa3/$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[4,'Te1/$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0]");
			Type12_Codes : DINT[140] (RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := "[0,33,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,35,42,39,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,54,49,56,53,60,0,0,0,0,0,0,0,0,0,0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,20,21,22,23,24,25,0,0,0,0,0,27,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,41,36,37,38,43,44,45,48,55,50,51,52,57,58,59,17,18,19,0,0,1,2,0,0,0,26,29,32,0,0,28,31,0,0]");
			Type44 : Stratix_Info[30] (ExternalAccess := None,
			                 DefaultData := "[[0,0,0,0,0,0,0,0,0,0,0,0,0],[5400,1,8,14,0,0,0,0,0,8,0,0,4],[5400,2,12,14,0,0,0,0,0,4,0,0,4],[5400,3,12,14,0,0,0,0,0,4,0,8,4],[5400,2,12,14,0,0,0,0,0,4,4,0,4],[5400,4,20,14,0,0,0,0,0,4,0,0,4],[5400,5,16,14,0,0,0,0,0,4,8,4,4],[5400,2,12,14,0,0,0,0,0,4,0,0,12],[5400,3,12,14,0,0,0,0,0,4,0,8,4],[5400,6,12,14,0,0,0,0,0,8,4,0,4],[5400,4,20,14,0,0,0,0,0,4,0,0,20],[5400,4,20,14,0,0,0,0,0,4,8,0,12],[5400,5,16,14,0,0,0,0,0,4,8,4,4],[5400,2,12,15,0,0,0,0,0,4,0,0,12],[5400,3,12,15,0,0,0,0,0,4,0,8,4],[5400,6,12,15,0,0,0,0,0,8,4,0,8],[5400,4,20,15,0,0,0,0,0,4,0,0,20],[5400,4,20,15,0,0,0,0,0,4,8,0,12],[5400,5,16,15,0,0,0,0,0,4,8,4,4],[5410,10,28,6,0,0,0,0,0,0,0,12,24],[5410,10,28,7,0,0,0,0,0,0,0,12,24],[5410,10,28,6,0,0,0,0,0,0,0,12,28],[5410,10,28,7,0,0,0,0,0,0,0,12,28],[2500,1,5,0,0,0,0,0,0,0,0,0,0],[2500,2,8,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0]]");
			Type12 : Stratix_Info[61] (ExternalAccess := None,
			                 DefaultData := "[[0,0,0,0,0,0,0,0,0,0,0,0,0],[5700,10,6,0,0,0,0,0,0,0,0,0,5],[5700,10,6,1,0,0,0,0,0,0,0,0,5],[5700,2,6,0,0,0,0,0,0,0,4,0,0],[5700,2,6,1,0,0,0,0,0,0,4,0,0],[5700,1,6,0,0,0,0,0,0,0,6,0,0],[5700,1,6,1,0,0,0,0,0,0,6,0,0],[5700,4,6,0,0,0,0,0,0,0,4,0,5],[5700,4,6,1,0,0,0,0,0,0,4,0,5],[5700,3,6,0,0,0,0,0,0,0,6,0,5],[5700,3,6,1,0,0,0,0,0,0,6,0,5],[5700,5,10,0,0,0,0,0,0,9,8,0,0],[5700,5,10,1,0,0,0,0,0,9,8,0,9],[5700,6,10,0,0,0,0,0,0,9,8,0,9],[5700,6,10,1,0,0,0,0,0,9,8,0,9],[5700,6,10,11,0,0,0,0,0,9,8,0,9],[5700,6,10,15,0,0,0,0,0,9,8,0,9],[5700,7,18,8,0,0,0,0,0,17,16,0,17],[5700,7,18,11,0,0,0,0,0,17,16,0,17],[5700,7,18,15,0,0,0,0,0,17,16,0,17],[5700,8,20,8,0,0,0,0,0,19,16,0,0],[5700,8,20,9,0,0,0,0,0,19,16,0,0],[5700,9,20,8,0,0,0,0,0,19,16,0,19],[5700,9,20,11,0,0,0,0,0,19,16,0,19],[5700,9,20,15,0,0,0,0,0,19,16,0,19],[5700,9,20,11,0,0,0,0,0,19,16,0,19],[5700,11,8,1,0,0,0,0,0,0,8,0,0],[5700,12,10,11,0,0,0,0,0,0,10,0,9],[5700,12,10,15,0,0,0,0,0,0,10,0,9],[5700,13,16,1,0,0,0,0,0,0,16,0,0],[5700,14,18,11,0,0,0,0,0,0,18,0,17],[5700,14,18,15,0,0,0,0,0,0,18,0,17],[5700,15,24,1,0,0,0,0,0,0,24,0,0],[8000,1,6,2,6,0,0,0,0,2,0,0,0],[8000,2,14,2,6,4,0,1,0,2,0,0,0],[8000,2,18,2,6,8,0,1,0,2,0,0,0],[8000,3,22,2,6,4,4,1,1,2,0,0,0],[8000,3,26,2,6,4,8,1,1,2,0,0,0],[8000,3,22,2,6,8,4,1,0,2,0,0,0],[8000,3,26,2,6,8,8,1,0,2,0,0,0],[8000,1,10,2,10,0,0,0,0,2,0,0,0],[8000,2,14,2,10,4,0,0,0,2,0,0,0],[8000,2,18,2,10,8,0,0,0,2,0,0,0],[8000,3,22,2,10,4,4,0,1,2,0,0,0],[8000,3,26,2,10,4,8,0,1,2,0,0,0],[8000,3,22,2,10,8,4,0,0,2,0,0,0],[8000,3,26,2,10,8,8,0,0,2,0,0,0],[8000,1,6,3,6,0,0,1,0,2,0,0,0],[8000,2,14,3,6,4,0,1,0,2,0,0,0],[8000,2,18,3,6,8,0,1,0,2,0,0,0],[8000,3,22,3,6,4,4,1,1,2,0,0,0],[8000,3,26,3,6,4,8,1,1,2,0,0,0],[8000,3,22,3,6,8,4,1,0,2,0,0,0],[8000,3,26,3,6,8,8,1,0,2,0,0,0],[8000,1,10,3,10,0,0,0,0,2,0,0,0],[8000,2,14,3,10,4,0,0,0,2,0,0,0],[8000,2,18,3,10,8,0,0,0,2,0,0,0],[8000,3,22,3,10,4,4,0,1,2,0,0,0],[8000,3,26,3,10,4,8,0,1,2,0,0,0],[8000,3,22,3,10,8,4,0,0,2,0,0,0],[8000,3,26,3,10,8,8,0,0,2,0,0,0]]");
			FL : NET_Fault_Logging (ExternalAccess := None,
			             DefaultData := "[5,0,0,0,0,0]");
			ErrorLog : Stratix_Message_Log_Record[20] (ExternalAccess := None,
			                   DefaultData := "[[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]]]");
			Local : Stratix_Local_Data (ExternalAccess := None,
			                DefaultData := "[0,0,[0,30,0],[0,30,0],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,[1,0,0,[0,0,0,0,0,0,0,0,0],0,0],0,0,[0,0,0,0,0],[0,5000,0],0,0,[1,0,0],0,0,0,0,0,0,0,[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,[[0,0,0,0,0,0,0,0,0,0],0,[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]],0],0,[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],0,0,0,0,0,[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],0,0,0,0,[0,0,0],0,0,0,0,0,0,0,0,[0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']]");
			MSGPathtoHEX : NET_NodeMSGPathCreate (ExternalAccess := None,
			                       DefaultData
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "Code to interface to Stratix 5400, 5410, 5700, 8000, 2500$N"
				    "";
				N: NOP();
				RC: "On first scan define the global parameters to be used by the AOI.$N"
				    "Timer presets define the interval between messages - default is 50 ms.$N"
				    "Show port enable / disable by default$N"
				    "Set initial animation = 10 (home screen)$N"
				    "Set initial port = 1$N"
				    "Clear Local.Step - ensures correct initialisation$N"
				    "Clear message triggers ";
				N: [XIC(s:fs) ,XIC(Enable) ONS(Local.ONS_bits.0) ,XIC(Local.init) ][MOV(50,Local.Msg_Timer.PRE) MOV(5000,Local.Msg_Timer_Long.PRE) MOV(100,Local.RestartDelay.PRE) MOV(500,Local.Fault_Reset_timer.PRE) ,MOV(10,Parameters.Animation_Active) MOV(1,Local.Selected_Port_Req) MOV(1,Local.Old_Select_Port_Req) MOV(1,Local.PortInstanceDisplay) ,CLR(Local.OffsetCode12) CLR(Local.OffsetCode44) CLR(Local.Active_Port_Alarms) CLR(Local.Active_Port_Fault) ,NET_NodeMSGPathCreate(MSGPathtoHEX,Path_to_Switch,Get_All_Message.Path) COP(Get_All_Message.Path,Get_Single_Message.Path,1) COP(Get_All_Message.Path,Set_Single_Message.Path,1) COP(Get_All_Message.Path,Set_Custom_Message.Path,1) ,OTU(Local.Detect_SFPs) OTU(Local.PortAlarmDetectLoop) OTU(Local.PortFaultDetectLoop) OTL(Local.Sub_Step.0) OTU(Local.init) CLR(Local.Step) ];
				RC: "Clear TDR results if Port or animation changed$N"
				    "";
				N: [NEQ(Local.OldInstance,Local.PortInstanceDisplay) MOV(Local.PortInstanceDisplay,Local.OldInstance) ,NEQ(Parameters.Animation_Active,30) ]CLR(Parameters.TDR.TDR_Error)FLL(0,Local.Port_Link.TDR_Diag_Output,1);
				RC: "Local.Steps$N"
				    "When each Local.Step is selected, set Class, Instance and Attribute values, followed by message trigger bit$N"
				    "When the message is complete (message trigger low and after delay) copy result to UDT$N"
				    "Clear storage array before moving to next Local.Step";
				N: XIO(Enable)CLR(Local.Step);
				RC: "At the end of the messaging cycle, wait for period specified in delay before restart";
				N: EQU(Local.Step,0)XIC(Enable)[TON(Local.RestartDelay,?,?) ,XIC(Local.RestartDelay.DN) MOV(100,Local.Step) ];
				RC: "This timer prevents messages to be executed too fast.$N"
				    "MSG will not be fater than timer preset";
				N: XIO(Local.Msg_Timer.DN)TON(Local.Msg_Timer,?,?);
				RC: "Local.Step 100:$N"
				    "Poll identity object (Get Attribute All) to retrieve the product code from a stratix switch, features$N"
				    "and port count";
				N: EQU(Local.Step,100)[XIC(Local.Sub_Step.0) [MOV(1,Get_All_Message.Class) MOV(1,Get_All_Message.Instance) CLR(Get_All_Message.Attribute) ,OTL(Local.Trigger_MSG_All) OTL(Local.Sub_Step.1) OTU(Local.Sub_Step.0) ] ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_All) XIC(Get_All_Message.DN) [MVM(Parameters.Storage[0],16#000000FF,Local.Vendor_ID) MVM(Parameters.Storage[2],16#000000FF,Local.Device_Type) ,[EQU(SimulatedProductCode,0) COP(Parameters.Storage[4],Local.Product_code_INT,1) ,NEQ(SimulatedProductCode,0) MOV(SimulatedProductCode,Local.Product_code_INT) ] [MOV(Local.Product_code_INT,Local.Product_code) COP(Parameters.Storage[6],Parameters.Home.Page_2.CIP_Major_Rev,2) ,COP(Parameters.Storage[10],Local.Temp4,1) NET_Dec_to_Hex(Local.D2H,Local.Temp4,Parameters.Home.Page_2.Serial_Number) ] ,EQU(Local.Device_Type,44) [MOV(Local.Product_code,Local.OffsetCode44) ,GEQ(Local.OffsetCode44,30) CLR(Local.OffsetCode44) ] [MOV(Type44[Local.OffsetCode44].Platform,Parameters.Platform) MOV(Type44[Local.OffsetCode44].Layout,Parameters.Home.Page_1.Port_Layout) MOV(Type44[Local.OffsetCode44].Max_Instances,Local.Max_Instances) ,MOV(Type44[Local.OffsetCode44].Combo_Ports,Local.Combo_Ports) MOV(Type44[Local.OffsetCode44].RJ_PoE_Ports,Parameters.Home.Page_1.POE_Ports) MOV(Type44[Local.OffsetCode44].SFP_Ports,Local.SFP_Ports) MOV(Type44[Local.OffsetCode44].GiG_Ports,Local.Gig_Ports) ,XIC(Type44[Local.OffsetCode44].SwType) OTL(Parameters.Home.Page_2.FW_Type) ,XIO(Type44[Local.OffsetCode44].SwType) OTU(Parameters.Home.Page_2.FW_Type) ,XIC(Type44[Local.OffsetCode44].PTP) OTL(Parameters.Home.Page_2.PTP) ,XIO(Type44[Local.OffsetCode44].PTP) OTU(Parameters.Home.Page_2.PTP) ,XIC(Type44[Local.OffsetCode44].NAT) OTL(Parameters.Home.Page_2.NAT) ,XIO(Type44[Local.OffsetCode44].NAT) OTU(Parameters.Home.Page_2.NAT) ,XIC(Type44[Local.OffsetCode44].DLR) OTL(Parameters.Home.Page_2.DLR) ,XIO(Type44[Local.OffsetCode44].DLR) OTU(Parameters.Home.Page_2.DLR) ] ,EQU(Local.Device_Type,12) [LIM(175,Local.Product_code,311) MOV(Type12_Codes[Local.Product_code-174],Local.OffsetCode12) ,[LIM(312,Local.Product_code,174) ,GRT(Local.OffsetCode12,60) ] MOV(0,Local.OffsetCode12) ] [MOV(Type12[Local.OffsetCode12].Platform,Parameters.Platform) MOV(Type12[Local.OffsetCode12].Layout,Parameters.Home.Page_1.Port_Layout) MOV(Type12[Local.OffsetCode12].Max_Instances,Local.Max_Instances) ,MOV(Type12[Local.OffsetCode12].Combo_Ports,Local.Combo_Ports) MOV(Type12[Local.OffsetCode12].RJ_PoE_Ports,Parameters.Home.Page_1.POE_Ports) MOV(Type12[Local.OffsetCode12].SFP_Ports,Local.SFP_Ports) MOV(Type12[Local.OffsetCode12].GiG_Ports,Local.Gig_Ports) ,XIC(Type12[Local.OffsetCode12].SwType) OTL(Parameters.Home.Page_2.FW_Type) ,XIO(Type12[Local.OffsetCode12].SwType) OTU(Parameters.Home.Page_2.FW_Type) ,XIC(Type12[Local.OffsetCode12].PTP) OTL(Parameters.Home.Page_2.PTP) ,XIO(Type12[Local.OffsetCode12].PTP) OTU(Parameters.Home.Page_2.PTP) ,XIC(Type12[Local.OffsetCode12].NAT) OTL(Parameters.Home.Page_2.NAT) ,XIO(Type12[Local.OffsetCode12].NAT) OTU(Parameters.Home.Page_2.NAT) ,XIC(Type12[Local.OffsetCode12].DLR) OTL(Parameters.Home.Page_2.DLR) ,XIO(Type12[Local.OffsetCode12].DLR) OTU(Parameters.Home.Page_2.DLR) ,EQU(Parameters.Platform,8000) [MOV(Type12[Local.OffsetCode12].Base,Parameters.Home.Page_1.Base) MOV(Type12[Local.OffsetCode12].Mod1,Local.Mod1) MOV(Type12[Local.OffsetCode12].Mod2,Local.Mod2) ,MOV(Type12[Local.OffsetCode12].Gap1,Local.Gap1) MOV(Type12[Local.OffsetCode12].Gap2,Local.Gap2) ] ] ,NET_Switch_PortName(PortName,Parameters.Port.Port_Selector.Selected_Port_Name,Parameters.Platform,Local.PortInstanceDisplay,Local.Gig_Ports) ,NEQ(Parameters.Platform,8000) CLR(Local.Gap1) CLR(Local.Gap2) ,EQU(Parameters.Platform,5700) MOV(Parameters.Home.Page_1.POE_Ports,Local.Last_RJ_Port) ,[GRT(Parameters.Storage[14],32) MOV(32,Parameters.Storage[14]) ,MOV(Parameters.Storage[14],Local.TempString32.LEN) COP(Parameters.Storage[15],Local.TempString32.DATA[0],Local.TempString32.LEN) MOV(32,Local.Char.DATA[0]) MOV(1,Local.Char.LEN) CLR(Local.Char_found) ,FIND(Local.TempString32,Local.Char,1,Local.Char_found) LIM(1,Local.Char_found,31) SUB(Local.Char_found,1,Local.Char_found) MID(Local.TempString32,Local.Char_found,1,Local.TempString32) ,COP(Local.TempString32,Parameters.Home.Page_2.Model,1) ] ,FLL(0,Parameters.Storage[0],300) [EQU(Local.Vendor_ID,1) MOV(105,Local.Step) ,NEQ(Local.Vendor_ID,1) OTL(Local.Vendor_ID_Error) ] OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.1) ] ];
				RC: "Local.Step 105$N"
				    " Poll switch parameter object with a Get Attribute All";
				N: EQU(Local.Step,105)[XIC(Local.Sub_Step.0) [MOV(863,Get_All_Message.Class) MOV(1,Get_All_Message.Instance) CLR(Get_All_Message.Attribute) ,OTL(Local.Trigger_MSG_All) OTL(Local.Sub_Step.1) OTU(Local.Sub_Step.0) ] ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_All) XIC(Get_All_Message.DN) [COP(Parameters.Storage[0],Local.SwParam.Temperature,1) COP(Local.SwParam.Temperature,Parameters.Home.Page_3.Temperature,1) COP(Parameters.Storage[4],Local.SwParam.Hardware_Alarm_Status,1) ,COP(Parameters.Storage[8],Local.SwParam.Active_Alarms,1) COP(Parameters.Storage[12],Local.SwParam.Active_Faults,1) MOV(Parameters.Storage[16],Local.SwParam.Dual_Mode_Power_Alarm) ,MOV(Parameters.Storage[21],Local.SwParam.IOS_Release.LEN) COP(Parameters.Storage[22],Local.SwParam.IOS_Release.DATA[0],Local.SwParam.IOS_Release.LEN) ,COP(Local.SwParam.IOS_Release,Parameters.Home.Page_2.SW_Version,1) MOV(Local.SwParam.IOS_Release.LEN,Local.Temp1) COP(Parameters.Storage[22+Local.Temp1],Local.SwParam.Module_Present,1) ,EQU(Parameters.Platform,8000) [NEQ(Local.Mod1,0) [GRT(Local.SimulatedMod1,0) MOV(Local.SimulatedMod1,Parameters.Home.Page_1.Mod1) ,EQU(Local.SimulatedMod1,0) BTD(Local.SwParam.Module_Present,16,Parameters.Home.Page_1.Mod1,0,4) ] ,EQU(Local.Mod1,0) CLR(Parameters.Home.Page_1.Mod1) ,NEQ(Local.Mod2,0) [GRT(Local.SimulatedMod2,0) MOV(Local.SimulatedMod2,Parameters.Home.Page_1.Mod2) ,EQU(Local.SimulatedMod2,0) BTD(Local.SwParam.Module_Present,24,Parameters.Home.Page_1.Mod2,0,4) ] ,EQU(Local.Mod2,0) CLR(Parameters.Home.Page_1.Mod2) ] ,LIM(-26,Local.Temp1,176) MOV(Parameters.Storage[26+Local.Temp1],Local.SwParam.Switch_Uptime.LEN) ,LIM(-28,Local.Temp1,172) COP(Parameters.Storage[28+Local.Temp1],Local.SwParam.Switch_Uptime.DATA[0],Local.SwParam.Switch_Uptime.LEN) ,ADD(Local.SwParam.IOS_Release.LEN,Local.SwParam.Switch_Uptime.LEN,Local.Temp2) ,LIM(-28,Local.Temp2,172) COP(Parameters.Storage[28+Local.Temp2],Local.SwParam.Multicast_Groups_Active,1) ,LIM(-33,Local.Temp2,167) COP(Parameters.Storage[33+Local.Temp2],Local.SwParam.VLAN_Count,1) COP(Parameters.Storage[42+Local.Temp2+2*Local.SwParam.VLAN_Count],Local.SwParam.SD_Status,1) ,FLL(0,Parameters.Storage[0],300) MOV(110,Local.Step) OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.1) ] ];
				RC: "Local.Step 110$N"
				    "Poll Ethernet Link class object (get attibute single) to read value of diasbled ports";
				N: EQU(Local.Step,110)[XIC(Local.Sub_Step.0) [MOV(246,Get_Single_Message.Class) CLR(Get_Single_Message.Instance) MOV(105,Get_Single_Message.Attribute) ,EQU(Parameters.Platform,5410) MOV(154,Get_Single_Message.Attribute) ,OTL(Local.Trigger_MSG_Single) OTL(Local.Sub_Step.1) OTU(Local.Sub_Step.0) ] ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_Single) XIC(Get_Single_Message.DN) [COP(Parameters.Storage[0],Local.Ethernet_Class.Disabled_Ports,1) ,FLL(0,Parameters.Storage[0],300) MOV(120,Local.Step) OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.1) ] ];
				RC: "Local.Step 120$N"
				    "Poll Ethernet Link class object (get attribute single) to read value of link status";
				N: EQU(Local.Step,120)[XIC(Local.Sub_Step.0) [MOV(246,Get_Single_Message.Class) CLR(Get_Single_Message.Instance) MOV(101,Get_Single_Message.Attribute) ,EQU(Parameters.Platform,5410) MOV(151,Get_Single_Message.Attribute) ,OTL(Local.Trigger_MSG_Single) OTL(Local.Sub_Step.1) OTU(Local.Sub_Step.0) ] ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_Single) XIC(Get_Single_Message.DN) [COP(Parameters.Storage[0],Local.Ethernet_Class.GlobalLink_Status,1) ,FLL(0,Parameters.Storage[0],300) MOV(130,Local.Step) OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.1) ] ];
				RC: "Local.Step 130$N"
				    "Poll Ethernet Link class object (get attibute single) to read value of global unauthorised access status";
				N: EQU(Local.Step,130)[XIC(Local.Sub_Step.0) [MOV(246,Get_Single_Message.Class) CLR(Get_Single_Message.Instance) MOV(102,Get_Single_Message.Attribute) ,EQU(Parameters.Platform,5410) MOV(152,Get_Single_Message.Attribute) ,OTL(Local.Trigger_MSG_Single) OTL(Local.Sub_Step.1) OTU(Local.Sub_Step.0) ] ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_Single) XIC(Get_Single_Message.DN) [COP(Parameters.Storage[0],Local.Ethernet_Class.Global_Unauthorised_Device,1) ,FLL(0,Parameters.Storage[0],300) MOV(140,Local.Step) OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.1) ] ];
				RC: "Local.Step 140$N"
				    "Poll Ethernet Link class object (get attribute single) to read value of threshold exceeded";
				N: EQU(Local.Step,140)[XIC(Local.Sub_Step.0) [MOV(246,Get_Single_Message.Class) CLR(Get_Single_Message.Instance) MOV(103,Get_Single_Message.Attribute) ,EQU(Parameters.Platform,5410) MOV(153,Get_Single_Message.Attribute) ,OTL(Local.Trigger_MSG_Single) OTL(Local.Sub_Step.1) OTU(Local.Sub_Step.0) ] ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_Single) XIC(Get_Single_Message.DN) [COP(Parameters.Storage[0],Local.Ethernet_Class.Global_Threshold_Exceeded,1) ,FLL(0,Parameters.Storage[0],300) MOV(150,Local.Step) OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.1) EQU(Parameters.Platform,2500) MOV(180,Local.Step) ] ];
				RC: "Local.Step 150$N"
				    "Poll Time Sync object for Clock type";
				N: EQU(Local.Step,150)[XIO(Parameters.Home.Page_2.PTP) MOV(160,Local.Step) ,XIC(Parameters.Home.Page_2.PTP) XIC(Local.Sub_Step.0) [MOV(67,Get_Single_Message.Class) MOV(1,Get_Single_Message.Instance) MOV(19,Get_Single_Message.Attribute) ,OTL(Local.Trigger_MSG_Single) OTL(Local.Sub_Step.1) OTU(Local.Sub_Step.0) ] ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_Single) XIC(Get_Single_Message.DN) [MOV(Parameters.Storage[0],Parameters.PTP.ClockType) ,FLL(0,Parameters.Storage[0],300) MOV(160,Local.Step) OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.1) LIM(40,Parameters.Animation_Active,49) MOV(151,Local.Step) ] ];
				RC: "Local.Step 151$N"
				    "Grandmaster Clock Info";
				N: EQU(Local.Step,151)[XIC(Local.Sub_Step.0) [MOV(67,Get_Single_Message.Class) MOV(1,Get_Single_Message.Instance) MOV(8,Get_Single_Message.Attribute) ,OTL(Local.Trigger_MSG_Single) OTL(Local.Sub_Step.1) OTU(Local.Sub_Step.0) ] ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_Single) XIC(Get_Single_Message.DN) [COP(Parameters.Storage[0],Parameters.PTP.Page_1.GM_Identity[0],2) COP(Parameters.Storage[8],Parameters.PTP.Page_1.GM_Class,3) BTD(Parameters.PTP.Page_1.GM_Variance,0,Parameters.PTP.Page_1.GM_Variance_DINT,0,16) COP(Parameters.Storage[18],Parameters.PTP.Page_1.GM_Source,3) ,CLR(Parameters.PTP.Page_1.GM_Identity_String.LEN) SWPB(Parameters.PTP.Page_1.GM_Identity[0],REVERSE,Parameters.PTP.Page_1.GM_Identity[0]) NET_Dec_to_Hex(Local.D2H,Parameters.PTP.Page_1.GM_Identity[0],Local.TempString16) CONCAT(Parameters.PTP.Page_1.GM_Identity_String,Local.TempString16,Parameters.PTP.Page_1.GM_Identity_String) ,SWPB(Parameters.PTP.Page_1.GM_Identity[1],REVERSE,Parameters.PTP.Page_1.GM_Identity[1]) NET_Dec_to_Hex(Local.D2H,Parameters.PTP.Page_1.GM_Identity[1],Local.TempString16) CONCAT(Parameters.PTP.Page_1.GM_Identity_String,Local.TempString16,Parameters.PTP.Page_1.GM_Identity_String) ,FLL(0,Parameters.Storage[0],300) MOV(152,Local.Step) OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.1) ] ];
				RC: "Local.Step 152$N"
				    "Local Clock Info";
				N: EQU(Local.Step,152)[XIC(Local.Sub_Step.0) [MOV(67,Get_Single_Message.Class) MOV(1,Get_Single_Message.Instance) MOV(10,Get_Single_Message.Attribute) ,OTL(Local.Trigger_MSG_Single) OTL(Local.Sub_Step.1) OTU(Local.Sub_Step.0) ] ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_Single) XIC(Get_Single_Message.DN) [COP(Parameters.Storage[0],Parameters.PTP.Page_2.Local_Identity[0],2) COP(Parameters.Storage[8],Parameters.PTP.Page_2.Local_Class,3) BTD(Parameters.PTP.Page_2.Local_Variance,0,Parameters.PTP.Page_2.Local_Variance_DINT,0,16) COP(Parameters.Storage[18],Parameters.PTP.Page_2.Local_Source,1) ,CLR(Parameters.PTP.Page_2.Local_Identity_String.LEN) SWPB(Parameters.PTP.Page_2.Local_Identity[0],REVERSE,Parameters.PTP.Page_2.Local_Identity[0]) NET_Dec_to_Hex(Local.D2H,Parameters.PTP.Page_2.Local_Identity[0],Local.TempString16) CONCAT(Parameters.PTP.Page_2.Local_Identity_String,Local.TempString16,Parameters.PTP.Page_2.Local_Identity_String) ,SWPB(Parameters.PTP.Page_2.Local_Identity[1],REVERSE,Parameters.PTP.Page_2.Local_Identity[1]) NET_Dec_to_Hex(Local.D2H,Parameters.PTP.Page_2.Local_Identity[1],Local.TempString16) CONCAT(Parameters.PTP.Page_2.Local_Identity_String,Local.TempString16,Parameters.PTP.Page_2.Local_Identity_String) ,FLL(0,Parameters.Storage[0],300) MOV(153,Local.Step) OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.1) ] ];
				RC: "Local.Step 153$N"
				    "Sync Status";
				N: EQU(Local.Step,153)[XIC(Local.Sub_Step.0) [MOV(67,Get_Single_Message.Class) MOV(1,Get_Single_Message.Instance) MOV(2,Get_Single_Message.Attribute) ,OTL(Local.Trigger_MSG_Single) OTL(Local.Sub_Step.1) OTU(Local.Sub_Step.0) ] ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_Single) XIC(Get_Single_Message.DN) [XIC(Parameters.Storage[0].0) OTL(Parameters.PTP.Page_2.SyncStatus) ,XIO(Parameters.Storage[0].0) OTU(Parameters.PTP.Page_2.SyncStatus) ,FLL(0,Parameters.Storage[0],300) MOV(154,Local.Step) OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.1) ] ];
				RC: "Local.Step 154$N"
				    "PTP Enable";
				N: EQU(Local.Step,154)[XIC(Local.Sub_Step.0) [MOV(67,Get_Single_Message.Class) MOV(1,Get_Single_Message.Instance) MOV(1,Get_Single_Message.Attribute) ,OTL(Local.Trigger_MSG_Single) OTL(Local.Sub_Step.1) OTU(Local.Sub_Step.0) ] ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_Single) XIC(Get_Single_Message.DN) [XIC(Parameters.Storage[0].0) OTL(Parameters.PTP.PTP_Enable) ,XIO(Parameters.Storage[0].0) OTU(Parameters.PTP.PTP_Enable) ,FLL(0,Parameters.Storage[0],300) MOV(155,Local.Step) OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.1) ] ];
				RC: "Local.Step 155$N"
				    "PTP Satus";
				N: EQU(Local.Step,155)[XIC(Local.Sub_Step.0) [MOV(67,Get_Single_Message.Class) MOV(1,Get_Single_Message.Instance) MOV(13,Get_Single_Message.Attribute) ,MOV(2,Local.Time_Port_Index) OTL(Local.Trigger_MSG_Single) OTL(Local.Sub_Step.1) OTU(Local.Sub_Step.0) ] ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_Single) XIC(Get_Single_Message.DN) [GRT(Parameters.Storage[0],0) [LEQ(Parameters.Storage[Local.Time_Port_Index],Local.Max_Instances) MOV(Parameters.Storage[Local.Time_Port_Index],Local.Temp_index) MOV(Parameters.Storage[Local.Time_Port_Index+2],Local.PortPTP_Enable[Local.Temp_index]) ,ADD(Local.Time_Port_Index,4,Local.Time_Port_Index) ] CMP(Local.Time_Port_Index >= (Parameters.Storage[0]*4+1)) ,LEQ(Parameters.Storage[0],0) ] FLL(0,Parameters.Storage[0],300) MOV(156,Local.Step) OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.1) ];
				RC: "Local.Step 156$N"
				    "Port PTP";
				N: EQU(Local.Step,156)[XIC(Local.Sub_Step.0) [MOV(67,Get_Single_Message.Class) MOV(1,Get_Single_Message.Instance) MOV(12,Get_Single_Message.Attribute) ,MOV(2,Local.Time_Port_Index) OTL(Local.Trigger_MSG_Single) OTL(Local.Sub_Step.1) OTU(Local.Sub_Step.0) ] ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_Single) XIC(Get_Single_Message.DN) [GRT(Parameters.Storage[0],0) [LEQ(Parameters.Storage[Local.Time_Port_Index],Local.Max_Instances) MOV(Parameters.Storage[Local.Time_Port_Index],Local.Temp_index) MOV(Parameters.Storage[Local.Time_Port_Index+2],Local.PortPTP_State[Local.Temp_index]) ,ADD(Local.Time_Port_Index,4,Local.Time_Port_Index) ] CMP(Local.Time_Port_Index >= (Parameters.Storage[0]*4+1)) ,LEQ(Parameters.Storage[0],0) ] FLL(0,Parameters.Storage[0],300) MOV(160,Local.Step) OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.1) ];
				RC: "Checkk if additional info needed for 5410";
				N: EQU(Local.Step,160)MOV(170,Local.Step)EQU(Parameters.Platform,5410)MOV(161,Local.Step);
				RC: "Local.Step 161$N"
				    "Get Power Supply Status";
				N: EQU(Local.Step,161)[XIC(Local.Sub_Step.0) [MOV(863,Get_Single_Message.Class) MOV(1,Get_Single_Message.Instance) MOV(32,Get_Single_Message.Attribute) ,OTL(Local.Trigger_MSG_Single) OTL(Local.Sub_Step.1) OTU(Local.Sub_Step.0) ] ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_Single) XIC(Get_Single_Message.DN) COP(Parameters.Storage[2],Parameters.Home.Page_3.PS_Type[0],2) FLL(0,Parameters.Storage[0],300) MOV(170,Local.Step) OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.1) ];
				RC: "Local.Step 170$N"
				    "Poll Ethernet Link class object (get attribute single) to read value of port link status";
				N: EQU(Local.Step,170)[XIO(Local.SwParam.Active_Alarms.0) CLR(Local.Active_Port_Alarms) FAL(Local.C1,?,?,ALL,Local.Port_Status[Local.C1.POS].Port_Major_Alarm_Status,0) ,XIC(Local.SwParam.Active_Alarms.0) OTL(Local.PortAlarmDetectLoop) ,XIC(Local.PortAlarmDetectLoop) ONS(Local.ONS_bits.3) CLR(Local.PortAlarmInstance) ,XIO(Local.PortAlarmDetectLoop) XIC(Local.Sub_Step.0) MOV(180,Local.Step) ,XIC(Local.PortAlarmDetectLoop) XIC(Local.Sub_Step.0) [NET_Inc_with_Gap(Local.GapInc,Local.PortAlarmInstance,Local.Gap1,Local.Gap2,0) MOV(Local.PortAlarmInstance,Get_Single_Message.Instance) ,MOV(246,Get_Single_Message.Class) MOV(102,Get_Single_Message.Attribute) ,OTL(Local.Trigger_MSG_Single) OTL(Local.Sub_Step.1) OTU(Local.Sub_Step.0) ] ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_Single) XIC(Get_Single_Message.DN) [COP(Parameters.Storage[0],Local.Port_Status[Local.PortAlarmInstance].Port_Major_Alarm_Status,1) ,NEQ(Local.Port_Status[Local.PortAlarmInstance].Port_Major_Alarm_Status,0) OTL(Local.Active_Port_Alarms.[Local.PortAlarmInstance]) ,EQU(Local.Port_Status[Local.PortAlarmInstance].Port_Major_Alarm_Status,0) OTU(Local.Active_Port_Alarms.[Local.PortAlarmInstance]) ,FLL(0,Parameters.Storage[0],300) [OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.1) ,GEQ(Local.PortAlarmInstance,Local.Max_Instances) CLR(Local.PortAlarmInstance) MOV(180,Local.Step) OTU(Local.PortAlarmDetectLoop) ] ] ];
				RC: "Local.Step 180$N"
				    "Poll Ethernet Link class object (get attribute single) to read value of port fault status";
				N: EQU(Local.Step,180)[XIO(Local.SwParam.Active_Faults.0) CLR(Local.Active_Port_Fault) FAL(Local.C2,?,?,ALL,Local.Port_Status[Local.C2.POS].Port_Fault_Status,0) ,XIC(Local.SwParam.Active_Faults.0) OTL(Local.PortFaultDetectLoop) ,XIC(Local.PortFaultDetectLoop) ONS(Local.ONS_bits.4) CLR(Local.PortAlarmInstance) ,XIO(Local.PortFaultDetectLoop) XIC(Local.Sub_Step.0) MOV(190,Local.Step) ,XIC(Local.PortFaultDetectLoop) XIC(Local.Sub_Step.0) [NET_Inc_with_Gap(Local.GapInc,Local.PortAlarmInstance,Local.Gap1,Local.Gap2,0) MOV(Local.PortAlarmInstance,Get_Single_Message.Instance) ,MOV(246,Get_Single_Message.Class) MOV(103,Get_Single_Message.Attribute) ,OTL(Local.Trigger_MSG_Single) OTL(Local.Sub_Step.1) OTU(Local.Sub_Step.0) ] ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_Single) XIC(Get_Single_Message.DN) [COP(Parameters.Storage[0],Local.Port_Status[Local.PortAlarmInstance].Port_Fault_Status,1) ,NEQ(Local.Port_Status[Local.PortAlarmInstance].Port_Fault_Status,0) OTL(Local.Active_Port_Fault.[Local.PortAlarmInstance]) ,EQU(Local.Port_Status[Local.PortAlarmInstance].Port_Fault_Status,0) OTU(Local.Active_Port_Fault.[Local.PortAlarmInstance]) ,FLL(0,Parameters.Storage[0],300) [OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.1) ,GEQ(Local.PortAlarmInstance,Local.Max_Instances) CLR(Local.PortAlarmInstance) [MOV(190,Local.Step) ,EQU(Parameters.Platform,2500) MOV(210,Local.Step) ] OTU(Local.PortFaultDetectLoop) ] ] ];
				RC: "Local.Step 190$N"
				    "SFP Detection";
				N: EQU(Local.Step,190)ADD(Local.SFP_Ports,Local.Combo_Ports,Local.Total_SFP)[OTU(Local.Detect_SFPs) [[EQU(Parameters.Platform,5400) ,EQU(Parameters.Platform,5410) ,EQU(Parameters.Platform,8000) ] [NEQ(Local.SFP_Ports,0) ,NEQ(Local.Combo_Ports,0) ] ,EQU(Parameters.Platform,5700) LES(Local.Last_RJ_Port,Local.Max_Instances) ] OTL(Local.Detect_SFPs) ,XIC(Local.Detect_SFPs) ONS(Local.ONS_bits.5) MOV(0,Local.PortSFP_Instance) EQU(Parameters.Platform,5700) MOV(Local.Last_RJ_Port,Local.PortSFP_Instance) ,XIC(Local.Detect_SFPs) XIC(Local.Sub_Step.0) [ADD(Local.PortSFP_Instance,1,Local.PortSFP_Instance) MOV(Local.PortSFP_Instance,Get_Single_Message.Instance) ,MOV(246,Get_Single_Message.Class) MOV(105,Get_Single_Message.Attribute) ,OTL(Local.Trigger_MSG_Single) OTL(Local.Sub_Step.1) OTU(Local.Sub_Step.0) ] ,XIO(Local.Detect_SFPs) XIC(Local.Sub_Step.0) MOV(210,Local.Step) ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_Single) XIC(Get_Single_Message.DN) [COP(Parameters.Storage[0],Local.Port_Status[Local.PortSFP_Instance].SFP_Type,1) ,[FLL(0,Parameters.Storage[0],300) OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.1) ,[[EQU(Parameters.Platform,5400) ,EQU(Parameters.Platform,8000) ] GEQ(Local.PortSFP_Instance,Local.Total_SFP) ,[EQU(Parameters.Platform,5410) ,EQU(Parameters.Platform,5700) ] GEQ(Local.PortSFP_Instance,Local.Max_Instances) ] CLR(Local.PortSFP_Instance) MOV(191,Local.Step) OTU(Local.Detect_SFPs) ] ] ];
				RC: "Additional SFP infor from Stratix 8000 expansion modules";
				N: EQU(Local.Step,191)MOV(210,Local.Step)EQU(Parameters.Platform,8000)MOV(192,Local.Step);
				RC: "Local.Step 192 $N"
				    "Detect SFP on Exp 1$N"
				    "";
				N: EQU(Local.Step,192)[OTU(Local.Detect_SFPs) LIM(3,Parameters.Home.Page_1.Mod1,4) OTL(Local.Detect_SFPs) ,XIC(Local.Detect_SFPs) ONS(Local.ONS_bits.17) MOV(10,Local.PortSFP_Instance) ,XIC(Local.Detect_SFPs) XIC(Local.Sub_Step.0) [ADD(Local.PortSFP_Instance,1,Local.PortSFP_Instance) MOV(Local.PortSFP_Instance,Get_Single_Message.Instance) ,MOV(246,Get_Single_Message.Class) MOV(105,Get_Single_Message.Attribute) ,OTL(Local.Trigger_MSG_Single) OTL(Local.Sub_Step.1) OTU(Local.Sub_Step.0) ] ,XIO(Local.Detect_SFPs) XIC(Local.Sub_Step.0) MOV(194,Local.Step) ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_Single) XIC(Get_Single_Message.DN) [COP(Parameters.Storage[0],Local.Port_Status[Local.PortSFP_Instance].SFP_Type,1) ,FLL(0,Parameters.Storage[0],300) OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.1) ,[EQU(Parameters.Home.Page_1.Mod1,3) GEQ(Local.PortSFP_Instance,14) ,GEQ(Local.PortSFP_Instance,18) ] CLR(Local.PortSFP_Instance) MOV(194,Local.Step) OTU(Local.Detect_SFPs) ] ];
				RC: "Local.Step 194$N"
				    "Detect SFP on Exp 2";
				N: EQU(Local.Step,194)[OTU(Local.Detect_SFPs) LIM(3,Parameters.Home.Page_1.Mod2,4) OTL(Local.Detect_SFPs) ,XIC(Local.Detect_SFPs) ONS(Local.ONS_bits.18) MOV(18,Local.PortSFP_Instance) ,XIC(Local.Detect_SFPs) XIC(Local.Sub_Step.0) [ADD(Local.PortSFP_Instance,1,Local.PortSFP_Instance) MOV(Local.PortSFP_Instance,Get_Single_Message.Instance) ,MOV(246,Get_Single_Message.Class) MOV(105,Get_Single_Message.Attribute) ,OTL(Local.Trigger_MSG_Single) OTL(Local.Sub_Step.1) OTU(Local.Sub_Step.0) ] ,XIO(Local.Detect_SFPs) XIC(Local.Sub_Step.0) MOV(210,Local.Step) ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_Single) XIC(Get_Single_Message.DN) [COP(Parameters.Storage[0],Local.Port_Status[Local.PortSFP_Instance].SFP_Type,1) ,FLL(0,Parameters.Storage[0],300) OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.1) ,[EQU(Parameters.Home.Page_1.Mod2,3) GEQ(Local.PortSFP_Instance,22) ,GEQ(Local.PortSFP_Instance,26) ] CLR(Local.PortSFP_Instance) MOV(210,Local.Step) OTU(Local.Detect_SFPs) ] ];
				RC: "Local.Step 210$N"
				    "Poll TCP Object";
				N: EQU(Local.Step,210)[XIC(Local.Sub_Step.0) LIM(10,Parameters.Animation_Active,19) [MOV(245,Get_All_Message.Class) MOV(1,Get_All_Message.Instance) CLR(Get_All_Message.Attribute) ,OTL(Local.Trigger_MSG_All) OTL(Local.Sub_Step.1) OTU(Local.Sub_Step.0) ] ,XIC(Local.Sub_Step.0) MOV(220,Local.Step) ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_All) XIC(Get_All_Message.DN) [COP(Parameters.Storage[0],Local.TCPIP.Status,3) MUL(Parameters.Storage[12],2,Local.Temp3) ,ADD(14,Local.Temp3,Local.Temp3) LIM(0,Local.Temp3,199) COP(Parameters.Storage[Local.Temp3],Local.TCPIP.IP_Address,5) ,ADD(20,Local.Temp3,Local.Temp3) LIM(0,Local.Temp3,199) MOV(Parameters.Storage[Local.Temp3],Local.TCPIP.Domain_Name.LEN) ,ADD(2,Local.Temp3,Local.Temp3) LIM(0,Local.Temp3,199) LIM(0,Local.TCPIP.Domain_Name.LEN,82) COP(Parameters.Storage[Local.Temp3],Local.TCPIP.Domain_Name.DATA[0],Local.TCPIP.Domain_Name.LEN) ,ADD(Local.TCPIP.Domain_Name.LEN,Local.Temp3,Local.Temp3) XIC(Local.TCPIP.Domain_Name.LEN.0) ADD(1,Local.Temp3,Local.Temp3) ,LIM(0,Local.Temp3,199) MOV(Parameters.Storage[Local.Temp3],Local.TCPIP.Host_Name.LEN) ,ADD(2,Local.Temp3,Local.Temp3) LIM(0,Local.Temp3,199) COP(Parameters.Storage[Local.Temp3],Local.TCPIP.Host_Name.DATA[0],Local.TCPIP.Host_Name.LEN) ,NET_IP_Addr_to_String(IP1,Local.TCPIP.IP_Address,Parameters.Home.Page_3.IP_Address) NET_IP_Addr_to_String(IP1,Local.TCPIP.Netmask,Parameters.Home.Page_3.Subnet_Mask) ,NET_IP_Addr_to_String(IP1,Local.TCPIP.Gateway_Address,Parameters.Home.Page_3.Gateway_Address) ,NET_IP_Addr_to_String(IP1,Local.TCPIP.Name_Server_1,Parameters.Home.Page_3.Name_Server_1) NET_IP_Addr_to_String(IP1,Local.TCPIP.Name_Server_2,Parameters.Home.Page_3.Name_Server_2) ,FLL(0,Parameters.Storage[0],300) MOV(0,Local.Step) OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.1) ] ];
				RC: "Local.Step 220$N"
				    "Poll Ethernet Link object for selected port (Get Attribute All) ";
				N: EQU(Local.Step,220)[XIC(Local.Sub_Step.0) LIM(20,Parameters.Animation_Active,29) [MOV(Local.PortInstanceDisplay,Local.PortInstanceMsg) MOV(246,Get_All_Message.Class) MOV(Local.PortInstanceMsg,Get_All_Message.Instance) CLR(Get_All_Message.Attribute) ,OTL(Local.Trigger_MSG_All) OTL(Local.Sub_Step.1) OTU(Local.Sub_Step.0) ] ,XIC(Local.Sub_Step.0) MOV(230,Local.Step) ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_All) XIC(Get_All_Message.DN) [COP(Parameters.Storage[0],Parameters.Port.Page_1.Port_Speed,2) COP(Parameters.Storage[8],Local.Port_Link.MAC1,6) ,COP(Parameters.Storage[14],Local.Port_Link.InOctets,23) COP(Parameters.Storage[106],Local.Port_Link.Control_Bits,1) ,FLL(0,Parameters.Storage[0],300) MOV(230,Local.Step) OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.1) ] ];
				RC: "Local.Step 230$N"
				    "Poll Ethernet Link object for selected port (get attibute single) to read Smartport name";
				N: EQU(Local.Step,230)[XIC(Local.Sub_Step.0) LIM(20,Parameters.Animation_Active,29) [MOV(Local.PortInstanceDisplay,Local.PortInstanceMsg) MOV(246,Get_Single_Message.Class) MOV(Local.PortInstanceMsg,Get_Single_Message.Instance) MOV(108,Get_Single_Message.Attribute) ,OTL(Local.Trigger_MSG_Single) OTL(Local.Sub_Step.1) OTU(Local.Sub_Step.0) ] ,XIC(Local.Sub_Step.0) MOV(300,Local.Step) ,XIC(Local.Sub_Step.0) LIM(140,Parameters.Animation_Active,149) MOV(280,Local.Step) ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_Single) XIC(Get_Single_Message.DN) [MOV(Parameters.Storage[0],Local.Port_Link.Applied_Smartport_Macro.LEN) ,LIM(0,Local.Port_Link.Applied_Smartport_Macro.LEN,64) COP(Parameters.Storage[1],Local.Port_Link.Applied_Smartport_Macro.DATA[0],Local.Port_Link.Applied_Smartport_Macro.LEN) ,FLL(0,Parameters.Storage[0],300) MOV(240,Local.Step) OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.1) ] ];
				RC: "Local.Step 240$N"
				    "Poll Ethernet Link object for selected port (get attribute single) to read port mode";
				N: EQU(Local.Step,240)[XIC(Local.Sub_Step.0) [MOV(Local.PortInstanceDisplay,Local.PortInstanceMsg) MOV(246,Get_Single_Message.Class) MOV(Local.PortInstanceMsg,Get_Single_Message.Instance) MOV(109,Get_Single_Message.Attribute) ,OTL(Local.Trigger_MSG_Single) OTL(Local.Sub_Step.1) OTU(Local.Sub_Step.0) ] ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_Single) XIC(Get_Single_Message.DN) COP(Parameters.Storage[0],Local.Port_Link.Port_Mode,4) FLL(0,Parameters.Storage[0],300) [MOV(250,Local.Step) ,EQU(Parameters.Platform,2500) MOV(280,Local.Step) ] OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.1) ];
				RC: "Local.Step 250$N"
				    "Poll Ethernet Link object for selected port (get attribute single) to read Broadcast Threshold information";
				N: EQU(Local.Step,250)[XIC(Local.Sub_Step.0) [MOV(Local.PortInstanceDisplay,Local.PortInstanceMsg) MOV(246,Get_Single_Message.Class) MOV(Local.PortInstanceMsg,Get_Single_Message.Instance) MOV(110,Get_Single_Message.Attribute) ,OTL(Local.Trigger_MSG_Single) OTL(Local.Sub_Step.1) OTU(Local.Sub_Step.0) ] ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_Single) XIC(Get_Single_Message.DN) [COP(Parameters.Storage[0],Parameters.Port.Page_1.Threshold_Broadcast_Unit,2) FLL(0,Parameters.Storage[0],300) OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.1) ,EQU(Parameters.Port.Page_1.Threshold_Broadcast_Unit,2) DIV(Parameters.Port.Page_1.Threshold_Broadcast_Val,100,Parameters.Port.Page_1.Threshold_Broadcast_Val) ] MOV(260,Local.Step) ];
				RC: "Local.Step 260$N"
				    "Poll Ethernet Link object for selected port (get attibute single) to read Unicast Threshold information";
				N: EQU(Local.Step,260)[XIC(Local.Sub_Step.0) [MOV(Local.PortInstanceDisplay,Local.PortInstanceMsg) MOV(246,Get_Single_Message.Class) MOV(Local.PortInstanceMsg,Get_Single_Message.Instance) MOV(111,Get_Single_Message.Attribute) ,OTL(Local.Trigger_MSG_Single) OTL(Local.Sub_Step.1) OTU(Local.Sub_Step.0) ] ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_Single) XIC(Get_Single_Message.DN) [COP(Parameters.Storage[0],Parameters.Port.Page_1.Threshold_Unicast_Unit,2) FLL(0,Parameters.Storage[0],300) OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.1) ,EQU(Parameters.Port.Page_1.Threshold_Unicast_Unit,2) DIV(Parameters.Port.Page_1.Threshold_Unicast_Val,100,Parameters.Port.Page_1.Threshold_Unicast_Val) ] MOV(270,Local.Step) ];
				RC: "Local.Step 270$N"
				    "Poll Ethernet Link object for selected port (get attibute single) to read Multicast Threshold information";
				N: EQU(Local.Step,270)[XIC(Local.Sub_Step.0) [MOV(Local.PortInstanceDisplay,Local.PortInstanceMsg) MOV(246,Get_Single_Message.Class) MOV(Local.PortInstanceMsg,Get_Single_Message.Instance) MOV(112,Get_Single_Message.Attribute) ,OTL(Local.Trigger_MSG_Single) OTL(Local.Sub_Step.1) OTU(Local.Sub_Step.0) ] ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_Single) XIC(Get_Single_Message.DN) [COP(Parameters.Storage[0],Parameters.Port.Page_1.Threshold_Multicast_Unit,2) FLL(0,Parameters.Storage[0],300) OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.1) ,EQU(Parameters.Port.Page_1.Threshold_Multicast_Unit,2) DIV(Parameters.Port.Page_1.Threshold_MultiCast_Val,100,Parameters.Port.Page_1.Threshold_MultiCast_Val) ] MOV(280,Local.Step) ];
				RC: "Local.Step280$N"
				    "Poll Ethernet Link object for selected port (get attibute single) to read bandwidth utilisation";
				N: EQU(Local.Step,280)[XIC(Local.Sub_Step.0) [MOV(Local.PortInstanceDisplay,Local.PortInstanceMsg) MOV(246,Get_Single_Message.Class) MOV(Local.PortInstanceMsg,Get_Single_Message.Instance) MOV(100,Get_Single_Message.Attribute) ,OTL(Local.Trigger_MSG_Single) OTL(Local.Sub_Step.1) OTU(Local.Sub_Step.0) ] ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_Single) XIC(Get_Single_Message.DN) COP(Parameters.Storage[0],Parameters.Port.Page_1.Utilization,1) FLL(0,Parameters.Storage[0],300) [MOV(300,Local.Step) ,EQU(Parameters.Platform,2500) MOV(0,Local.Step) ] OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.1) ];
				RC: "Local.Step300: login in to the switch to do broken wire test";
				N: EQU(Local.Step,300)[XIO(Parameters.TDR.Set_Initiate_Login) MOV(310,Local.Step) ,XIC(Parameters.TDR.Set_Initiate_Login) XIC(Local.Sub_Step.0) [MOV(863,Set_Single_Message.Class) MOV(1,Set_Single_Message.Instance) MOV(11,Set_Single_Message.Attribute) ,MOV(Parameters.TDR.Set_Password.LEN,Parameters.Storage[0]) COP(Parameters.TDR.Set_Password.DATA[0],Parameters.Storage[1],Parameters.TDR.Set_Password.LEN) ,ADD(Parameters.TDR.Set_Password.LEN,1,Set_Single_Message.REQ_LEN) ,OTL(Local.Trigger_MSG_SetSingle) OTL(Local.Sub_Step.1) OTU(Local.Sub_Step.0) OTU(Local.SwParam.Password_OK) OTU(Local.SwParam.Password_Wrong) ] ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_SetSingle) [XIC(Set_Single_Message.DN) GRT(Set_Single_Message.REQ_LEN,1) ,XIC(Set_Single_Message.ER) EQU(Set_Single_Message.ERR,11) ] [FLL(0,Parameters.Storage[0],300) ,MOV(310,Local.Step) ,OTU(Local.Sub_Step.1) OTL(Local.Sub_Step.0) ,OTL(Local.SwParam.Password_OK) ,OTU(Parameters.TDR.Set_Initiate_Login) ,FLL(0,Parameters.TDR.Set_Password.DATA[0],32) MOV(0,Parameters.TDR.Set_Password.LEN) ] ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_SetSingle) [XIC(Set_Single_Message.DN) LEQ(Set_Single_Message.REQ_LEN,1) ,XIC(Set_Single_Message.ER) NEQ(Set_Single_Message.ERR,11) ] [FLL(0,Parameters.Storage[0],300) ,MOV(0,Local.Step) ,OTU(Local.Sub_Step.1) OTL(Local.Sub_Step.0) ,OTL(Local.SwParam.Password_Wrong) ,OTU(Parameters.TDR.Set_Initiate_Login) ] ];
				RC: "Local.Step310:initiate broken wire test";
				N: EQU(Local.Step,310)[XIO(Parameters.TDR.Set_Initiate_TDR) MOV(0,Local.Step) ,XIC(Parameters.TDR.Set_Initiate_TDR) XIC(Local.Sub_Step.0) [MOV(Local.PortInstanceDisplay,Local.PortInstanceMsg) MOV(246,Set_Custom_Message.Class) MOV(Local.PortInstanceMsg,Set_Custom_Message.Instance) CLR(Set_Custom_Message.Attribute) ,OTL(Local.Trigger_MSG_SetCustom) OTL(Local.Sub_Step.1) OTU(Local.Sub_Step.0) RES(Local.Msg_Timer_Long) ] ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_SetCustom) [XIC(Set_Custom_Message.DN) MOV(0,Parameters.TDR.TDR_Error) OTL(Local.Sub_Step.2) OTU(Local.Sub_Step.1) ,XIC(Set_Custom_Message.ER) OTU(Local.TDR_Fault_Captured) [EQU(Set_Custom_Message.ERR,1) EQU(Set_Custom_Message.EXERR,516) MOV(0,Parameters.TDR.TDR_Error) OTL(Local.TDR_Fault_Captured) OTL(Local.Sub_Step.2) OTU(Local.Sub_Step.1) ,XIO(Local.TDR_Fault_Captured) [EQU(Set_Custom_Message.ERR,15) EQU(Set_Custom_Message.EXERR,0) OTU(Parameters.TDR.Set_Initiate_Login) ,EQU(Set_Custom_Message.ERR,31) LIM(2,Set_Custom_Message.EXERR,6) MOV(Set_Custom_Message.EXERR,Parameters.TDR.TDR_Error) ,MOV(0,Local.Step) OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.1) OTU(Parameters.TDR.Set_Initiate_TDR) ] ] ] ,XIC(Local.Sub_Step.2) XIC(Local.Msg_Timer_Long.DN) MOV(320,Local.Step) OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.2) ];
				N: XIC(Parameters.TDR.Set_Initiate_TDR)ONS(Local.ONS_bits.6)MOV(10,Parameters.TDR.TDR_Error);
				RC: "Local.Step320: read results from broken wire test";
				N: EQU(Local.Step,320)[XIC(Local.Sub_Step.0) LIM(0,Local.PortInstanceDisplay,Local.Max_Instances) [MOV(Local.PortInstanceDisplay,Local.PortInstanceMsg) MOV(246,Get_Single_Message.Class) MOV(Local.PortInstanceMsg,Get_Single_Message.Instance) MOV(113,Get_Single_Message.Attribute) ,OTL(Local.Trigger_MSG_Single) OTL(Local.Sub_Step.1) OTU(Local.Sub_Step.0) ] ,XIC(Local.Sub_Step.1) XIO(Local.Trigger_MSG_Single) [XIC(Get_Single_Message.DN) COP(Parameters.Storage[0],Local.Port_Link.TDR_Diag_Output.TDR_Last_Run.Year,27) ,XIC(Get_Single_Message.ER) MOV(4,Parameters.TDR.TDR_Error) ] FLL(0,Parameters.Storage[0],300) OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.1) MOV(0,Local.Step) OTU(Parameters.TDR.Set_Initiate_TDR) ];
				RC: "Wait until current MSGs are finished and then move to Local.Step 220 for port detection";
				N: EQU(Local.Step,900)XIO(Get_All_Message.EN)XIO(Get_Single_Message.EN)XIO(Set_Single_Message.EN)XIO(Set_Custom_Message.EN)OTL(Local.Sub_Step.0)OTU(Local.Sub_Step.1)OTU(Local.Sub_Step.2)MOV(220,Local.Step);
				RC: "Message instructions below";
				N: NOP();
				RC: "Get Attribute All Message$N"
				    "$N"
				    "Trigger bit reset when message is done$N"
				    "If Message error then set indicator and restart sequence after user reset";
				N: XIC(Local.Trigger_MSG_All)XIO(Get_All_Message.EN)XIO(Get_Single_Message.EN)XIO(Set_Single_Message.EN)XIO(Set_Custom_Message.EN)XIC(Local.Msg_Timer.DN)[MSG(Get_All_Message) ,OTU(Local.Trigger_MSG_All) ];
				RC: "Get Attribute Single Message$N"
				    "$N"
				    "Trigger bit reset when message is done$N"
				    "If Message error then set indicator and restart sequence after user reset";
				N: XIC(Local.Trigger_MSG_Single)XIO(Get_All_Message.EN)XIO(Get_Single_Message.EN)XIO(Set_Single_Message.EN)XIO(Set_Custom_Message.EN)XIC(Local.Msg_Timer.DN)[MSG(Get_Single_Message) ,OTU(Local.Trigger_MSG_Single) ];
				RC: "Get Attribute Single Message$N"
				    "$N"
				    "Trigger bit reset when message is done$N"
				    "If Message error then set indicator and restart sequence after user reset";
				N: XIC(Local.Trigger_MSG_SetSingle)XIO(Get_All_Message.EN)XIO(Get_Single_Message.EN)XIO(Set_Single_Message.EN)XIO(Set_Custom_Message.EN)XIC(Local.Msg_Timer.DN)[MSG(Set_Single_Message) ,OTU(Local.Trigger_MSG_SetSingle) ];
				RC: "Get Attribute Single Message$N"
				    "$N"
				    "Trigger bit reset when message is done$N"
				    "If Message error then set indicator and restart sequence after user reset";
				N: XIC(Local.Trigger_MSG_SetCustom)XIO(Get_All_Message.EN)XIO(Get_Single_Message.EN)XIO(Set_Single_Message.EN)XIO(Set_Custom_Message.EN)XIC(Local.Msg_Timer.DN)[MSG(Set_Custom_Message) ,OTU(Local.Trigger_MSG_SetCustom) ];
				N: NET_Fault_Logging(FL,Local.Step,Get_All_Message,Get_Single_Message,Set_Single_Message,Set_Custom_Message,ErrorLog);
				RC: "Will reset polling sequence if MSG error stay for longer than 5 sec";
				N: [XIC(Get_All_Message.ER) ,XIC(Get_Single_Message.ER) ,XIC(Local.Vendor_ID_Error) ]XIO(Local.Fault_Reset_timer.DN)[ONS(Local.ONS_bits.7) OTL(Local.Reset_Steps_Messaging) ,TON(Local.Fault_Reset_timer,?,?) ];
				RC: "Error restarts the step sequence";
				N: XIC(Local.Reset_Steps_Messaging)[CLR(Local.Step) ,OTL(Local.Sub_Step.0) OTU(Local.Sub_Step.1) OTU(Local.Sub_Step.2) ,OTU(Local.Reset_Steps_Messaging) ,OTU(Local.Vendor_ID_Error) ];
				RC: "When message is done, set timer running - introduces delay between sending messages$N"
				    "Done bit of timers logged through one-shot and used to complete Local.Steps";
				N: NOP();
				N: TON(Local.Msg_Timer_Long,?,?);
				RC: "Creating Port Alarm Word";
				N: OR(Local.Active_Port_Alarms,Local.Active_Port_Fault,Parameters.Alarm.Port.Port_Alarm)OR(Parameters.Alarm.Port.Port_Alarm,Local.Ethernet_Class.Global_Unauthorised_Device,Parameters.Alarm.Port.Port_Alarm)OR(Parameters.Alarm.Port.Port_Alarm,Local.Ethernet_Class.Global_Threshold_Exceeded,Parameters.Alarm.Port.Port_Alarm);
				RC: "Defining Global (Switch) and Port Alarm bits";
				N: [[XIC(Local.SwParam.Active_Alarms.1) OTE(Parameters.Alarm.Global.Power_Supply) ,XIC(Local.SwParam.Active_Alarms.2) OTE(Parameters.Alarm.Global.Primary_Temperature) ,XIC(Local.SwParam.Active_Alarms.3) OTE(Parameters.Alarm.Global.Secondary_Temperature) ,XIC(Local.SwParam.Active_Alarms.4) OTE(Parameters.Alarm.Global.SD_Card) ,XIC(Local.SwParam.Active_Alarms.5) OTE(Parameters.Alarm.Global.License_File) ,XIC(Local.SwParam.Hardware_Alarm_Status.0) OTE(Parameters.Alarm.Global.Major_Output) ,XIC(Local.SwParam.Hardware_Alarm_Status.2) OTE(Parameters.Alarm.Global.Input_1) ,XIC(Local.SwParam.Hardware_Alarm_Status.3) OTE(Parameters.Alarm.Global.Input_2) ,XIC(Local.SwParam.Hardware_Alarm_Status.4) OTE(Parameters.Alarm.Global.Input_3) ,XIC(Local.SwParam.Hardware_Alarm_Status.5) OTE(Parameters.Alarm.Global.Input_4) ] OTE(Parameters.Alarm.Global_Alarm) ,NEQ(Parameters.Alarm.Port.Port_Alarm,0) OTE(Parameters.Alarm.Port_Alarm) ]OTE(Parameters.Alarm_Active);
				RC: "Map port alarm and fauilt details.";
				N: [XIC(Local.Port_Status[Local.PortInstanceDisplay].Port_Major_Alarm_Status.0) OTE(Parameters.Alarm.Port.Link_Fault) ,XIC(Local.Port_Status[Local.PortInstanceDisplay].Port_Major_Alarm_Status.1) OTE(Parameters.Alarm.Port.Not_Forwarding) ,XIC(Local.Port_Status[Local.PortInstanceDisplay].Port_Major_Alarm_Status.2) OTE(Parameters.Alarm.Port.Not_Operating) ,XIC(Local.Port_Status[Local.PortInstanceDisplay].Port_Major_Alarm_Status.3) OTE(Parameters.Alarm.Port.FCS_Error) ,XIC(Local.Ethernet_Class.Global_Unauthorised_Device.[Local.PortInstanceDisplay]) OTE(Parameters.Alarm.Port.Unauthorized_Device) ,XIC(Local.Port_Status[Local.PortInstanceDisplay].Port_Fault_Status.0) OTE(Parameters.Alarm.Port.Port_Error_Disable) ,XIC(Local.Port_Status[Local.PortInstanceDisplay].Port_Fault_Status.1) OTE(Parameters.Alarm.Port.SFP_Security) ,XIC(Local.Port_Status[Local.PortInstanceDisplay].Port_Fault_Status.2) OTE(Parameters.Alarm.Port.Native_VLan_Mismatch) ,XIC(Local.Port_Status[Local.PortInstanceDisplay].Port_Fault_Status.3) OTE(Parameters.Alarm.Port.MAC_Address_Flap) ,XIC(Local.Port_Status[Local.PortInstanceDisplay].Port_Fault_Status.4) OTE(Parameters.Alarm.Port.Port_Security_Violation) ,XIC(Local.Ethernet_Class.Global_Threshold_Exceeded.[Local.PortInstanceDisplay]) OTE(Parameters.Alarm.Port.Threshold_Exceeded) ];
				N: [XIC(Local.SwParam.Password_OK) OTE(Parameters.TDR.Logged_in) ,XIC(Local.SwParam.Password_Wrong) OTE(Parameters.TDR.Wrong_Password) ];
				N: [XIC(Local.SwParam.Module_Present.0) OTE(Parameters.Home.Page_1.Power_1) ,XIC(Local.SwParam.Module_Present.1) OTE(Parameters.Home.Page_1.Power_2) ];
				RC: "Creating Host Name for HMI$N"
				    "";
				N: CMP(Local.TCPIP.Host_Name <> Parameters.Home.DeviceName)[CLR(Parameters.Home.DeviceName.LEN) ,FLL(0,Parameters.Home.DeviceName.DATA[0],64) ,MOV(Local.TCPIP.Host_Name.LEN,Parameters.Home.DeviceName.LEN) ]LIM(0,Parameters.Home.DeviceName.LEN,64)COP(Local.TCPIP.Host_Name.DATA[0],Parameters.Home.DeviceName.DATA[0],Parameters.Home.DeviceName.LEN);
				RC: "Creating Domain Name for HMI";
				N: CMP(Local.TCPIP.Domain_Name <> Parameters.Home.Page_3.Domain_Name)[CLR(Parameters.Home.Page_3.Domain_Name.LEN) ,FLL(0,Parameters.Home.Page_3.Domain_Name.DATA[0],64) ,MOV(Local.TCPIP.Domain_Name.LEN,Parameters.Home.Page_3.Domain_Name.LEN) ]LIM(0,Parameters.Home.Page_3.Domain_Name.LEN,64)COP(Local.TCPIP.Domain_Name.DATA[0],Parameters.Home.Page_3.Domain_Name.DATA[0],Parameters.Home.Page_3.Domain_Name.LEN);
				RC: "Creating Up Time field for HMI";
				N: CMP(Local.SwParam.Switch_Uptime <> Parameters.Home.Page_3.UpTime)COP(Local.SwParam.Switch_Uptime,Parameters.Home.Page_3.UpTime,1);
				N: MVM(Local.SwParam.SD_Status,16#0f,Parameters.Home.Page_1.SD_Card)XIC(Local.Vendor_ID_Error)OTE(Parameters.AOI_Vendor_Error);
				RC: "Copy counter, bandwidth utilization, smartport name and threshold values from Ethernet Link object to HMI display variables";
				N: LIM(20,Parameters.Animation_Active,29)[COP(Local.Port_Link.InDiscards,Parameters.Port.Page_2.InDiscards,3) COP(Local.Port_Link.OutDiscards,Parameters.Port.Page_2.OutDiscards,2) COP(Local.Port_Link.Alignment_Errors,Parameters.Port.Page_3.Alignment_Errors,12) ,NET_UDINT_Display(UDINT1,Local.Port_Link.InOctets,Parameters.Port.Page_2.InOctets_UDINT) NET_UDINT_Display(UDINT1,Local.Port_Link.OutOctets,Parameters.Port.Page_2.OutOctets_UDINT) ,NET_UDINT_Display(UDINT1,Local.Port_Link.InUcastPackets,Parameters.Port.Page_2.InUCast_UDINT) NET_UDINT_Display(UDINT1,Local.Port_Link.OutUcastPackets,Parameters.Port.Page_2.OutUCast_UDINT) ,NET_UDINT_Display(UDINT1,Local.Port_Link.InNUcastPackets,Parameters.Port.Page_2.InNUCast_UDINT) NET_UDINT_Display(UDINT1,Local.Port_Link.OutNUcastPackets,Parameters.Port.Page_2.OutNUCast_UDINT) ,MOV(Local.Port_Link.Applied_Smartport_Macro.LEN,Local.SmartPortName.LEN) ,LIM(1,Local.Port_Link.Applied_Smartport_Macro.LEN,64) COP(Local.Port_Link.Applied_Smartport_Macro.DATA[0],Local.SmartPortName.DATA[0],Local.Port_Link.Applied_Smartport_Macro.LEN) ,EQU(Local.Port_Link.Applied_Smartport_Macro.LEN,0) FLL(0,Local.SmartPortName.DATA[0],32) ,MOV(Local.Port_Link.Access_VLAN,Parameters.Port.Page_1.VLAN) ];
				RC: "depending on the smartport selected pass a number to the HMI to show the correct smartport";
				N: LIM(20,Parameters.Animation_Active,29)[EQU(Parameters.Platform,2500) GRT(Local.SmartPortName.LEN,0) CLR(Local.TempString32.DATA[0]) MOV(1,Local.TempString32.LEN) CONCAT(Local.SmartPortName,Local.TempString32,Local.SmartPortName) ,MOV(10,Local.Temp4) ,EQU(Local.SmartPortName,Smart_Port_Names[0]) MOV(0,Local.Temp4) ,EQU(Local.SmartPortName,Smart_Port_Names[1]) MOV(1,Local.Temp4) ,EQU(Local.SmartPortName,Smart_Port_Names[2]) MOV(2,Local.Temp4) ,EQU(Local.SmartPortName,Smart_Port_Names[3]) MOV(3,Local.Temp4) ,EQU(Local.SmartPortName,Smart_Port_Names[4]) MOV(4,Local.Temp4) ,EQU(Local.SmartPortName,Smart_Port_Names[5]) MOV(5,Local.Temp4) ,EQU(Local.SmartPortName,Smart_Port_Names[6]) MOV(6,Local.Temp4) ,EQU(Local.SmartPortName,Smart_Port_Names[7]) MOV(7,Local.Temp4) ,EQU(Local.SmartPortName,Smart_Port_Names[8]) MOV(8,Local.Temp4) ,EQU(Local.SmartPortName,Smart_Port_Names[9]) MOV(9,Local.Temp4) ,MOV(Local.Temp4,Parameters.Port.Page_1.SmartPort_Number) ];
				RC: "Link status display for a selected port only";
				N: [CLR(Local.Link_Status) ,XIC(Local.Ethernet_Class.GlobalLink_Status.[Local.PortInstanceDisplay]) MOV(1,Local.Link_Status) ,XIC(Parameters.Alarm.Port.Port_Alarm.[Local.PortInstanceDisplay]) MOV(3,Local.Link_Status) ,XIC(Local.Ethernet_Class.Disabled_Ports.[Local.PortInstanceDisplay]) MOV(2,Local.Link_Status) ,MOV(Local.Link_Status,Parameters.Port.Page_1.Link_Status) ];
				RC: "Copy data for Cable Test";
				N: EQU(30,Parameters.Animation_Active)[COP(Local.Port_Link.TDR_Diag_Output.TDR_Last_Run.Year,Parameters.TDR.Diag_Output.TDR_Last_Run.Year,7) COP(Local.Port_Link.TDR_Diag_Output.Speed,Parameters.TDR.Diag_Output.Speed,17) ,[EQU(Parameters.TDR.Set_Password.LEN,0) FLL(0,Parameters.TDR.Hidden_Password.DATA[0],32) ,GRT(Parameters.TDR.Set_Password.LEN,0) FLL(42,Parameters.TDR.Hidden_Password.DATA[0],Parameters.TDR.Set_Password.LEN) ] MOV(Parameters.TDR.Set_Password.LEN,Parameters.TDR.Hidden_Password.LEN) ];
				N: MOV(Local.PortPTP_State[Local.PortInstanceDisplay],Parameters.PTP.Page_3.PortPTP_State)MOV(Local.PortPTP_Enable[Local.PortInstanceDisplay],Parameters.PTP.Page_3.PortPTP_Enable);
				RC: "Maps Error bits from MSG instructions to ER bit for display";
				N: XIC(Enable)OTE(EN)OTE(Parameters.AOI_Enabled)[XIC(Get_All_Message.ER) ,XIC(Get_Single_Message.ER) ,XIC(ER) [XIO(Get_All_Message.DN) ,XIO(Get_Single_Message.DN) ] ]OTE(ER)OTE(Parameters.AOI_Error);
				N: EQU(Local.OldAnimation,30)NEQ(Parameters.Animation_Active,30)OTU(Local.SwParam.Password_Wrong)OTU(Parameters.TDR.Set_Initiate_TDR)OTU(Parameters.TDR.Set_Initiate_Login)OTU(Local.SwParam.Password_OK)CLR(Parameters.TDR.TDR_Error);
				N: [XIC(Parameters.Port.Port_Selector.Set_Port_Up) NET_Inc_with_Gap(Local.GapInc,Local.PortInstanceDisplay,Local.Gap1,Local.Gap2,0) ,XIC(Parameters.Port.Port_Selector.Set_Port_Down) NET_Inc_with_Gap(Local.GapInc,Local.PortInstanceDisplay,Local.Gap1,Local.Gap2,1) ][[GRT(Local.PortInstanceDisplay,Local.Max_Instances) ,EQU(Parameters.Platform,8000) LIM(40,Parameters.Animation_Active,49) GRT(Local.PortInstanceDisplay,10) ] MOV(1,Local.PortInstanceDisplay) ,LES(Local.PortInstanceDisplay,1) [[NEQ(Parameters.Platform,8000) ,EQU(Parameters.Platform,8000) NEQ(Parameters.Animation_Active,42) ] MOV(Local.Max_Instances,Local.PortInstanceDisplay) ,EQU(Parameters.Platform,8000) EQU(Parameters.Animation_Active,42) [LIM(6,Parameters.Home.Page_1.Base,7) MOV(6,Local.PortInstanceDisplay) ,LIM(10,Parameters.Home.Page_1.Base,11) MOV(10,Local.PortInstanceDisplay) ] ] ,NET_Switch_PortName(PortName,Parameters.Port.Port_Selector.Selected_Port_Name,Parameters.Platform,Local.PortInstanceDisplay,Local.Gig_Ports) ,[MOV(Local.PortInstanceDisplay,Local.Selected_Port_Req) MOV(Local.Selected_Port_Req,Local.Old_Select_Port_Req) ,LIM(20,Parameters.Animation_Active,29) MOV(900,Local.Step) ] OTU(Parameters.Port.Port_Selector.Set_Port_Up) OTU(Parameters.Port.Port_Selector.Set_Port_Down) ];
				N: COP(Parameters.Home.Set_Port,Local.Port_Req_Temp,1)NEQ(Local.Port_Req_Temp,0)CPT(Local.Selected_Port_Req,LOG(Local.Port_Req_Temp)/ LOG (2))MOV(20,Parameters.Animation_Active);
				N: NEQ(Local.Selected_Port_Req,Local.Old_Select_Port_Req)[MOV(Local.Selected_Port_Req,Local.PortInstanceDisplay) MOV(Local.Selected_Port_Req,Local.Old_Select_Port_Req) MOV(900,Local.Step) ,NET_Switch_PortName(PortName,Parameters.Port.Port_Selector.Selected_Port_Name,Parameters.Platform,Local.PortInstanceDisplay,Local.Gig_Ports) ];
				RC: "Capture Animation and Instance selections in order to check for change at start of scan";
				N: MOV(Parameters.Animation_Active,Local.OldAnimation);
				RC: "Code to check if selected port is not a copper port. Broken wire test can only be done on copper ports not on SFP";
				N: [EQU(Parameters.Platform,5400) [LIM(1,Local.PortInstanceDisplay,Local.Combo_Ports) GRT(Local.Port_Status[Local.PortInstanceDisplay].SFP_Type,1) ,GRT(Local.PortInstanceDisplay,Local.Combo_Ports) LEQ(Local.PortInstanceDisplay,Local.Total_SFP) ] ,EQU(Parameters.Platform,5410) GRT(Local.PortInstanceDisplay,12) ,EQU(Parameters.Platform,5700) GRT(Local.PortInstanceDisplay,Local.Last_RJ_Port) ]OTE(Local.SFP_Port);
				RC: "Define Copper Port";
				N: [NEQ(Parameters.Platform,8000) XIO(Local.SFP_Port) ,EQU(Parameters.Platform,8000) [LIM(1,Local.PortInstanceDisplay,2) EQU(Local.Port_Status[Local.PortInstanceDisplay].SFP_Type,0) ,LIM(3,Local.PortInstanceDisplay,10) ,LIM(11,Local.PortInstanceDisplay,18) [EQU(Parameters.Home.Page_1.Mod1,1) ,LIM(5,Parameters.Home.Page_1.Mod1,6) ] ,LIM(19,Local.PortInstanceDisplay,26) [EQU(Parameters.Home.Page_1.Mod2,1) ,LIM(5,Parameters.Home.Page_1.Mod2,6) ] ] ]OTE(Parameters.TDR.Copper_Port);
				N: MOV(1,Local.Port_Index);
				RC: "Port State for all ports";
				N: LBL(Port_Indicator)[CLR(Local.Port_Indicator_State) ,XIC(Local.Ethernet_Class.GlobalLink_Status.[Local.Port_Index]) MOV(3,Local.Port_Indicator_State) ,XIC(Parameters.Alarm.Port.Port_Alarm.[Local.Port_Index]) MOV(1,Local.Port_Indicator_State) ,XIC(Local.Ethernet_Class.Disabled_Ports.[Local.Port_Index]) MOV(2,Local.Port_Indicator_State) ]MOV(Local.Port_Indicator_State,Local.SFP_Indicator_State);
				RC: "SFP Type Indicator$N"
				    "0 or 1 - no SFP$N"
				    "2 - Copper$N"
				    "3 and up - fiber";
				N: [EQU(Parameters.Platform,5400) LEQ(Local.Port_Index,Local.Total_SFP) ,EQU(Parameters.Platform,5410) GRT(Local.Port_Index,12) ,EQU(Parameters.Platform,5700) GRT(Local.Port_Index,Local.Last_RJ_Port) ,EQU(Parameters.Platform,8000) LEQ(Local.Port_Index,2) ][GEQ(Local.Port_Status[Local.Port_Index].SFP_Type,2) MOV(2,Local.Port_Indicator_State) ,GEQ(Local.Port_Status[Local.Port_Index].SFP_Type,3) ADD(Local.SFP_Indicator_State,20,Local.SFP_Indicator_State) ,LES(Local.Port_Status[Local.Port_Index].SFP_Type,2) MOV(99,Local.SFP_Indicator_State) ];
				N: EQU(Parameters.Platform,8000)LIM(11,Local.Port_Index,18)[LIM(3,Parameters.Home.Page_1.Mod1,4) [GEQ(Local.Port_Status[Local.Port_Index].SFP_Type,3) ADD(Local.SFP_Indicator_State,20,Local.SFP_Indicator_State) ,LES(Local.Port_Status[Local.Port_Index].SFP_Type,2) MOV(99,Local.SFP_Indicator_State) ] ,EQU(Parameters.Home.Page_1.Mod1,2) ADD(Local.SFP_Indicator_State,20,Local.SFP_Indicator_State) ];
				N: EQU(Parameters.Platform,8000)LIM(19,Local.Port_Index,26)[LIM(3,Parameters.Home.Page_1.Mod2,4) [GEQ(Local.Port_Status[Local.Port_Index].SFP_Type,3) ADD(Local.SFP_Indicator_State,20,Local.SFP_Indicator_State) ,LES(Local.Port_Status[Local.Port_Index].SFP_Type,2) MOV(99,Local.SFP_Indicator_State) ] ,EQU(Parameters.Home.Page_1.Mod2,2) ADD(Local.SFP_Indicator_State,20,Local.SFP_Indicator_State) ];
				N: MOV(Local.Port_Indicator_State,Parameters.Home.Port_Indicator[Local.Port_Index])MOV(Local.SFP_Indicator_State,Parameters.Home.SFP_Indicator[Local.Port_Index])NET_Inc_with_Gap(Local.GapInc,Local.Port_Index,Local.Gap1,Local.Gap2,0)LEQ(Local.Port_Index,Local.Max_Instances)JMP(Port_Indicator);
		END_ROUTINE

		ROUTINE Prescan (Description := "Clear Parameters in Prescan")
				N: FLL(0,Parameters,1)FLL(0,Local,1);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	TAG
		CommsData_FSC : CONTROL  := [-1610612736,50,49];
		Comms_Delay : TIMER  := [1324637,500,0];
		DigitalWrites_AOI : AOI_DigitalWrites_GW  := [1,[0,500,0],[0,50,0],[0,50,49],0];
		Insert_Redundancy_Happened_SCADA_Address : BOOL (RADIX := Decimal) := 0;
		Insert_SCADA_DigComBuffer_Address : Comms_Data  := [[0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];
		Insert_SCADA_DigCom_Address : Comms_Data (COMMENT.TAG[0].0 := "SCADA Sub Network Comms Alarm $NAcknowledge",
		            COMMENT.TAG[3].0 := "Sub Network Comms Alarm Acknowledge") := [[0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];
		Insert_SCADA_DigData_Address : Comms_Data (COMMENT.TAG[0].0 := "SCADA Sub Network Comms Alarm",
		            COMMENT.TAG[1] := "SCADA Inremental Word",
		            COMMENT.TAG[3].0 := "Sub Network Comms Alarm",
		            COMMENT.TAG[4].0 := "Switchover Happened SCADA Alarm") := [[0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];
		OTN_LAN_A_AOI : NET_AB_Stratix_All  := [15,0,[0,[[1,'0$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[1,'0$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[1,'0$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[1,'0$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],[0,0,0,0],[1,'.$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[14,'ab-ethernetip$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[20,'ab-multiport-device$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[19,'desktop-automation$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[22,'vm-desktop-automation$00$00$00$00$00$00$00$00$00$00$00'
				],[18,'switch-automation$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[18,'router-automation$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[17,'phone-automation$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[20,'wireless-automation$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[14,'cisco-sniffer$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[0,0,0],[0,5410
				,1,28,[[4,'Gi1/$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[4,'Fa1/$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[4,'Fa2/$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[4,'Fa3/$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[4,'Te1/$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],[1,'1$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],1],[0,33,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,35,42,39,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,54,49,56,53,60,0,0,0,0,0,0,0,0,0,0,3,4,5,6,7,8,9,10,11,12
				,13,14,15,16,20,21,22,23,24,25,0,0,0,0,0,27,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,41,36,37,38,43,44,45,48,55,50,51,52,57,58
				,59,17,18,19,0,0,1,2,0,0,0,26,29,32,0,0,28,31,0,0],[[0,0,0,0,0,0,0,0,0,0,0,0,0],[5400,1,8,14,0,0,0,0,0,8,0,0,4],[5400,2,12,14,0,0,0,0,0,4,0,0,4],[5400
				,3,12,14,0,0,0,0,0,4,0,8,4],[5400,2,12,14,0,0,0,0,0,4,4,0,4],[5400,4,20,14,0,0,0,0,0,4,0,0,4],[5400,5,16,14,0,0,0,0,0,4,8,4,4],[5400,2,12,14,0,0,0,0
				,0,4,0,0,12],[5400,3,12,14,0,0,0,0,0,4,0,8,4],[5400,6,12,14,0,0,0,0,0,8,4,0,4],[5400,4,20,14,0,0,0,0,0,4,0,0,20],[5400,4,20,14,0,0,0,0,0,4,8,0,12],[5400
				,5,16,14,0,0,0,0,0,4,8,4,4],[5400,2,12,15,0,0,0,0,0,4,0,0,12],[5400,3,12,15,0,0,0,0,0,4,0,8,4],[5400,6,12,15,0,0,0,0,0,8,4,0,8],[5400,4,20,15,0,0,0
				,0,0,4,0,0,20],[5400,4,20,15,0,0,0,0,0,4,8,0,12],[5400,5,16,15,0,0,0,0,0,4,8,4,4],[5410,10,28,6,0,0,0,0,0,0,0,12,24],[5410,10,28,7,0,0,0,0,0,0,0,12
				,24],[5410,10,28,6,0,0,0,0,0,0,0,12,28],[5410,10,28,7,0,0,0,0,0,0,0,12,28],[2500,1,5,0,0,0,0,0,0,0,0,0,0],[2500,2,8,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0
				,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0,0,0,0,0],[5700,10,6,0,0,0
				,0,0,0,0,0,0,5],[5700,10,6,1,0,0,0,0,0,0,0,0,5],[5700,2,6,0,0,0,0,0,0,0,4,0,0],[5700,2,6,1,0,0,0,0,0,0,4,0,0],[5700,1,6,0,0,0,0,0,0,0,6,0,0],[5700,1,6,1,0,0
				,0,0,0,0,6,0,0],[5700,4,6,0,0,0,0,0,0,0,4,0,5],[5700,4,6,1,0,0,0,0,0,0,4,0,5],[5700,3,6,0,0,0,0,0,0,0,6,0,5],[5700,3,6,1,0,0,0,0,0,0,6,0,5],[5700,5,10,0,0,0
				,0,0,0,9,8,0,0],[5700,5,10,1,0,0,0,0,0,9,8,0,9],[5700,6,10,0,0,0,0,0,0,9,8,0,9],[5700,6,10,1,0,0,0,0,0,9,8,0,9],[5700,6,10,11,0,0,0,0,0,9,8,0,9],[5700,6
				,10,15,0,0,0,0,0,9,8,0,9],[5700,7,18,8,0,0,0,0,0,17,16,0,17],[5700,7,18,11,0,0,0,0,0,17,16,0,17],[5700,7,18,15,0,0,0,0,0,17,16,0,17],[5700,8,20
				,8,0,0,0,0,0,19,16,0,0],[5700,8,20,9,0,0,0,0,0,19,16,0,0],[5700,9,20,8,0,0,0,0,0,19,16,0,19],[5700,9,20,11,0,0,0,0,0,19,16,0,19],[5700,9,20,15
				,0,0,0,0,0,19,16,0,19],[5700,9,20,11,0,0,0,0,0,19,16,0,19],[5700,11,8,1,0,0,0,0,0,0,8,0,0],[5700,12,10,11,0,0,0,0,0,0,10,0,9],[5700,12,10,15,0
				,0,0,0,0,0,10,0,9],[5700,13,16,1,0,0,0,0,0,0,16,0,0],[5700,14,18,11,0,0,0,0,0,0,18,0,17],[5700,14,18,15,0,0,0,0,0,0,18,0,17],[5700,15,24,1,0,0
				,0,0,0,0,24,0,0],[8000,1,6,2,6,0,0,0,0,2,0,0,0],[8000,2,14,2,6,4,0,1,0,2,0,0,0],[8000,2,18,2,6,8,0,1,0,2,0,0,0],[8000,3,22,2,6,4,4,1,1,2,0,0,0],[8000,3,26
				,2,6,4,8,1,1,2,0,0,0],[8000,3,22,2,6,8,4,1,0,2,0,0,0],[8000,3,26,2,6,8,8,1,0,2,0,0,0],[8000,1,10,2,10,0,0,0,0,2,0,0,0],[8000,2,14,2,10,4,0,0,0,2,0,0,0],[8000
				,2,18,2,10,8,0,0,0,2,0,0,0],[8000,3,22,2,10,4,4,0,1,2,0,0,0],[8000,3,26,2,10,4,8,0,1,2,0,0,0],[8000,3,22,2,10,8,4,0,0,2,0,0,0],[8000,3,26,2,10,8,8,0
				,0,2,0,0,0],[8000,1,6,3,6,0,0,1,0,2,0,0,0],[8000,2,14,3,6,4,0,1,0,2,0,0,0],[8000,2,18,3,6,8,0,1,0,2,0,0,0],[8000,3,22,3,6,4,4,1,1,2,0,0,0],[8000,3,26,3,6
				,4,8,1,1,2,0,0,0],[8000,3,22,3,6,8,4,1,0,2,0,0,0],[8000,3,26,3,6,8,8,1,0,2,0,0,0],[8000,1,10,3,10,0,0,0,0,2,0,0,0],[8000,2,14,3,10,4,0,0,0,2,0,0,0],[8000
				,2,18,3,10,8,0,0,0,2,0,0,0],[8000,3,22,3,10,4,4,0,1,2,0,0,0],[8000,3,26,3,10,4,8,0,1,2,0,0,0],[8000,3,22,3,10,8,4,0,0,2,0,0,0],[8000,3,26,3,10,8,8,0
				,0,2,0,0,0]],[15,190,5,1,20,19],[[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0
				,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0
				,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[1,100,1,272,[2024,1,17,17,55,11,174732]],[1,100,1,272,[2024,1,17,17,55,11,925483]],[1,100,1,272
				,[2024,1,17,17,55,12,674669]],[1,100,1,272,[2024,1,17,17,55,13,425438]],[1,100,1,272,[2024,1,17,17,55,14,174670]]],[0,512,[0,0,0],[0
				,0,0],[1,' $00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],14,[0,-804302350,0,[68,48,48,70,53,49,70,50
				,0],13,-572662307],1,44,[1023,0,0,0,536869888],[0,500,0],0,0,[3,0,0],28,0,0,1,28,0,0,[-1072970660,50,0],[-1609841572,5000,5000
				],0,21,1,10,1,33,29,2,[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,[[0,0,0,0,0,0,0,0,0,0],0,[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]],0],0,[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,4],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0
				,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],0,0,0,1,0,[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],10,21,21,0,[737664,100,0],1,99,0,12,0,0,190,2,[62,0,0,1,0,[38,'S5410-UNIVERSALK9-M, Version 15.2(8)E2$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],1,[27,'5 weeks, 1 hour, 41 minutes59 minutes$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],17,8,97,0],[1,20,0,0,0,0,-1408236806,-256,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[12,'VU-COM-SWI-A$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],0,0,38,65,42,-804302350,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[14,'1783-IMS28GNAC Stratix 5410$00$00$00$00$00'
				],0,12,0,1,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],[8,0,12,4,[1,',$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'172.16.2.250505050$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[12,'172.16.2.250$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],16,12,[1,'.$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],12,3,1,3,[3,'250$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]]];
		OTN_LAN_A_En_AOI : BOOL (RADIX := Decimal) := 1;
		OTN_LAN_A_Parameters : Stratix_HMI  := [[[12,'VU-COM-SWI-A$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,3,3,3,3,3,3,3,3,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0],[0,3,3,3,3,3,3,3,3,1,2,2,2,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,0],[[2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0]],[10,1,1,0,0,0,0,0],[[14,'1783-IMS28GNAC Stratix 5410$00$00$00$00$00'],[8,'D00F51F2$00$00$00$00$00$00$00$00'
				],[38,'S5410-UNIVERSALK9-M, Version 15.2(8)E2$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],8,2,6],[[12,'172.16.2.250$00$00$00$00'],[13,'255.255.255.0$00$00$00'],[7,'0.0.0.0$00$00$00$00$00$00$00$00$00'
				],[7,'0.0.0.0$00$00$00$00$00$00$00$00$00'],[7,'0.0.0.0$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],62,[27,'5 weeks, 1 hour, 41 minutes59 minutes$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[1,0]]],[[[5,'Gi1/1$00$00$00$00$00$00$00$00$00$00$00'],0],[1,0,0,0,0,0,0,0,0,0,0,0],[[0,0],[0,0],[0,0],0,0,0,[0,0],[0,0],[0,0],0,0],[0,0,0,0,0,0,0,0
				,0,0,0,0]],[[[0,0,0,0,0,0,0,0,0,0],0,[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]],0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,4],[0,80,[[0,0],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0],[0,[0,0],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0],[0,0]],[[0,0],[512,0,0],0],5410,10,4,[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];
		OTN_LAN_A_Path : STRING  := [18,'1,2,2,172.16.2.250$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				];
		OTN_LAN_B_AOI : NET_AB_Stratix_All  := [15,0,[0,[[1,'0$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[1,'0$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[1,'0$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[1,'0$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],[0,0,0,0],[1,'.$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[14,'ab-ethernetip$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[20,'ab-multiport-device$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[19,'desktop-automation$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[22,'vm-desktop-automation$00$00$00$00$00$00$00$00$00$00$00'
				],[18,'switch-automation$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[18,'router-automation$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[17,'phone-automation$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[20,'wireless-automation$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[14,'cisco-sniffer$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[0,0,0],[0,5410
				,1,28,[[4,'Gi1/$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[4,'Fa1/$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[4,'Fa2/$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[4,'Fa3/$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[4,'Te1/$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],[1,'1$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],1],[0,33,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,35,42,39,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,54,49,56,53,60,0,0,0,0,0,0,0,0,0,0,3,4,5,6,7,8,9,10,11,12
				,13,14,15,16,20,21,22,23,24,25,0,0,0,0,0,27,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,41,36,37,38,43,44,45,48,55,50,51,52,57,58
				,59,17,18,19,0,0,1,2,0,0,0,26,29,32,0,0,28,31,0,0],[[0,0,0,0,0,0,0,0,0,0,0,0,0],[5400,1,8,14,0,0,0,0,0,8,0,0,4],[5400,2,12,14,0,0,0,0,0,4,0,0,4],[5400
				,3,12,14,0,0,0,0,0,4,0,8,4],[5400,2,12,14,0,0,0,0,0,4,4,0,4],[5400,4,20,14,0,0,0,0,0,4,0,0,4],[5400,5,16,14,0,0,0,0,0,4,8,4,4],[5400,2,12,14,0,0,0,0
				,0,4,0,0,12],[5400,3,12,14,0,0,0,0,0,4,0,8,4],[5400,6,12,14,0,0,0,0,0,8,4,0,4],[5400,4,20,14,0,0,0,0,0,4,0,0,20],[5400,4,20,14,0,0,0,0,0,4,8,0,12],[5400
				,5,16,14,0,0,0,0,0,4,8,4,4],[5400,2,12,15,0,0,0,0,0,4,0,0,12],[5400,3,12,15,0,0,0,0,0,4,0,8,4],[5400,6,12,15,0,0,0,0,0,8,4,0,8],[5400,4,20,15,0,0,0
				,0,0,4,0,0,20],[5400,4,20,15,0,0,0,0,0,4,8,0,12],[5400,5,16,15,0,0,0,0,0,4,8,4,4],[5410,10,28,6,0,0,0,0,0,0,0,12,24],[5410,10,28,7,0,0,0,0,0,0,0,12
				,24],[5410,10,28,6,0,0,0,0,0,0,0,12,28],[5410,10,28,7,0,0,0,0,0,0,0,12,28],[2500,1,5,0,0,0,0,0,0,0,0,0,0],[2500,2,8,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0
				,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0,0,0,0,0],[5700,10,6,0,0,0
				,0,0,0,0,0,0,5],[5700,10,6,1,0,0,0,0,0,0,0,0,5],[5700,2,6,0,0,0,0,0,0,0,4,0,0],[5700,2,6,1,0,0,0,0,0,0,4,0,0],[5700,1,6,0,0,0,0,0,0,0,6,0,0],[5700,1,6,1,0,0
				,0,0,0,0,6,0,0],[5700,4,6,0,0,0,0,0,0,0,4,0,5],[5700,4,6,1,0,0,0,0,0,0,4,0,5],[5700,3,6,0,0,0,0,0,0,0,6,0,5],[5700,3,6,1,0,0,0,0,0,0,6,0,5],[5700,5,10,0,0,0
				,0,0,0,9,8,0,0],[5700,5,10,1,0,0,0,0,0,9,8,0,9],[5700,6,10,0,0,0,0,0,0,9,8,0,9],[5700,6,10,1,0,0,0,0,0,9,8,0,9],[5700,6,10,11,0,0,0,0,0,9,8,0,9],[5700,6
				,10,15,0,0,0,0,0,9,8,0,9],[5700,7,18,8,0,0,0,0,0,17,16,0,17],[5700,7,18,11,0,0,0,0,0,17,16,0,17],[5700,7,18,15,0,0,0,0,0,17,16,0,17],[5700,8,20
				,8,0,0,0,0,0,19,16,0,0],[5700,8,20,9,0,0,0,0,0,19,16,0,0],[5700,9,20,8,0,0,0,0,0,19,16,0,19],[5700,9,20,11,0,0,0,0,0,19,16,0,19],[5700,9,20,15
				,0,0,0,0,0,19,16,0,19],[5700,9,20,11,0,0,0,0,0,19,16,0,19],[5700,11,8,1,0,0,0,0,0,0,8,0,0],[5700,12,10,11,0,0,0,0,0,0,10,0,9],[5700,12,10,15,0
				,0,0,0,0,0,10,0,9],[5700,13,16,1,0,0,0,0,0,0,16,0,0],[5700,14,18,11,0,0,0,0,0,0,18,0,17],[5700,14,18,15,0,0,0,0,0,0,18,0,17],[5700,15,24,1,0,0
				,0,0,0,0,24,0,0],[8000,1,6,2,6,0,0,0,0,2,0,0,0],[8000,2,14,2,6,4,0,1,0,2,0,0,0],[8000,2,18,2,6,8,0,1,0,2,0,0,0],[8000,3,22,2,6,4,4,1,1,2,0,0,0],[8000,3,26
				,2,6,4,8,1,1,2,0,0,0],[8000,3,22,2,6,8,4,1,0,2,0,0,0],[8000,3,26,2,6,8,8,1,0,2,0,0,0],[8000,1,10,2,10,0,0,0,0,2,0,0,0],[8000,2,14,2,10,4,0,0,0,2,0,0,0],[8000
				,2,18,2,10,8,0,0,0,2,0,0,0],[8000,3,22,2,10,4,4,0,1,2,0,0,0],[8000,3,26,2,10,4,8,0,1,2,0,0,0],[8000,3,22,2,10,8,4,0,0,2,0,0,0],[8000,3,26,2,10,8,8,0
				,0,2,0,0,0],[8000,1,6,3,6,0,0,1,0,2,0,0,0],[8000,2,14,3,6,4,0,1,0,2,0,0,0],[8000,2,18,3,6,8,0,1,0,2,0,0,0],[8000,3,22,3,6,4,4,1,1,2,0,0,0],[8000,3,26,3,6
				,4,8,1,1,2,0,0,0],[8000,3,22,3,6,8,4,1,0,2,0,0,0],[8000,3,26,3,6,8,8,1,0,2,0,0,0],[8000,1,10,3,10,0,0,0,0,2,0,0,0],[8000,2,14,3,10,4,0,0,0,2,0,0,0],[8000
				,2,18,3,10,8,0,0,0,2,0,0,0],[8000,3,22,3,10,4,4,0,1,2,0,0,0],[8000,3,26,3,10,4,8,0,1,2,0,0,0],[8000,3,22,3,10,8,4,0,0,2,0,0,0],[8000,3,26,3,10,8,8,0
				,0,2,0,0,0]],[15,190,5,1,20,19],[[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0
				,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[0,0,0
				,0,[0,0,0,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0]],[1,100,1,272,[2024,1,17,17,55,11,175596]],[1,100,1,272,[2024,1,17,17,55,11,926224]],[1,100,1,272
				,[2024,1,17,17,55,12,675386]],[1,100,1,272,[2024,1,17,17,55,13,426151]],[1,100,1,272,[2024,1,17,17,55,14,175411]]],[0,512,[0,0,0],[0
				,0,0],[1,' $00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],14,[0,1627538609,0,[54,49,48,50,52,52,66,49
				,0],6,1717986918],1,44,[9199,0,0,0,536861712],[0,500,0],0,0,[3,0,0],28,0,0,1,28,0,0,[768388,50,0],[-1609844095,5000,5000],0,21
				,1,10,1,33,29,2,[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,[[0,0,0,0,0,0,0,0,0,0],0,[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]],0],0,[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,4],[0,0,0],[0,0,0],[0,0,0],[11,0,0],[0
				,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],0,0,0,1,0,[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],6,21,21,0,[737665,100,0],1,99,0,12,0,0,190,1,[61,0,0,1,0,[38,'S5410-UNIVERSALK9-M, Version 15.2(8)E2$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],1,[19,'5 weeks, 55 minutes hours, 59 minutes$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],14,7,97,0],[1,20,0,0,0,0,-1408236805,-256,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[12,'VU-COM-SWI-B$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],0,0,38,57,42,1627538609,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[14,'1783-IMS28GNAC Stratix 5410$00$00$00$00$00'
				],0,12,0,1,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],[8,0,12,4,[1,',$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'172.16.2.251515151$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[12,'172.16.2.251$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],16,12,[1,'.$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],12,3,1,3,[3,'251$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]]];
		OTN_LAN_B_En_AOI : BOOL (RADIX := Decimal) := 1;
		OTN_LAN_B_Parameters : Stratix_HMI  := [[[12,'VU-COM-SWI-B$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,3,3,3,2,3,3,3,3,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0],[0,3,3,3,2,3,3,3,3,1,2,2,2,23,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,0],[[2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0]],[10,0,1,0,0,0,0,0],[[14,'1783-IMS28GNAC Stratix 5410$00$00$00$00$00'],[8,'610244B1$00$00$00$00$00$00$00$00'
				],[38,'S5410-UNIVERSALK9-M, Version 15.2(8)E2$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],8,2,6],[[12,'172.16.2.251$00$00$00$00'],[13,'255.255.255.0$00$00$00'],[7,'0.0.0.0$00$00$00$00$00$00$00$00$00'
				],[7,'0.0.0.0$00$00$00$00$00$00$00$00$00'],[7,'0.0.0.0$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],61,[19,'5 weeks, 55 minutes hours, 59 minutes$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[1,0]]],[[[5,'Gi1/1$00$00$00$00$00$00$00$00$00$00$00'],0],[1,0,0,0,0,0,0,0,0,0,0,0],[[0,0],[0,0],[0,0],0,0,0,[0,0],[0,0],[0,0],0,0],[0,0,0,0,0,0,0,0
				,0,0,0,0]],[[[0,0,0,0,0,0,0,0,0,0],0,[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]],0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,4],[0,80,[[0,0],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0],[0,[0,0],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0],[0,0]],[[0,0],[512,0,0],0],5410,10,4,[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];
		OTN_LAN_B_Path : STRING  := [18,'1,2,2,172.16.2.251$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				];
		T5_DLR_V_1_Parameters : DLR_HMI  := [0,0,[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0]],0,0,0,0,[[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,99,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,0,0]],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,0,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],[2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1
				,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],0,1,[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,[[0,0,0,0,0,0]]],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],0];
		T5_DLR_V_1_Path : STRING  := [18,'1,1,2,172.16.54.58$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				];
		test : DINT (RADIX := Decimal) := 1091;
		test1 : BOOL (RADIX := Decimal) := 0;
		test2 : BOOL (RADIX := Decimal) := 0;
		Watchdog_1_AOI : AOI_Watchdog_1  := [1,0,[0,1000,738],0];
		Watchdog_2_AOI : AOI_Watchdog_2  := [1,0,[0,10000,0],0,[0,500,2500]];
		Watchdog_3_AOI : AOI_Watchdog_3  := [1,[0,10000,10000]];
		_032PLC201_036PLC201DigCom : DINT[100] (RADIX := Decimal) := [8,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
		_032PLC201_036PLC201DigData : DINT[1000] (RADIX := Decimal) := [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,748,0,4097,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
		_032PLC202_203DigCom : Comms_Data (ProduceCount := 1,
		            ProgrammaticallySendEventTrigger := No,
		            UnicastPermitted := Yes,
		            MinimumRPI := 0.200,
		            MaximumRPI := 536870.900,
		            DefaultRPI := 0) := [[1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];
		_032PLC202_203_WatchDog_Timer : TIMER  := [1880724,10000,0];
		_104PLC201_202_WatchDog_Timer : TIMER  := [-1608422598,10000,10000];
		OTN_LAN_A_GetMsgAll : MESSAGE (MessageType := CIP Generic,
		                             RequestedLength := 0,
		                             ConnectedFlag := 2,
		                             CommTypeCode := 0,
		                             ServiceCode := 16#0001,
		                             ObjectType := 16#035f,
		                             TargetObject := 1,
		                             AttributeNumber := 16#0000,
		                             LocalIndex := 0,
		                             DestinationTag := "OTN_LAN_A_Parameters.Storage[0]",
		                             LargePacketUsage := No);
		OTN_LAN_A_GetMsgSgl : MESSAGE (MessageType := CIP Generic,
		                             RequestedLength := 0,
		                             ConnectedFlag := 2,
		                             CommTypeCode := 0,
		                             ServiceCode := 16#000e,
		                             ObjectType := 16#00f6,
		                             TargetObject := 20,
		                             AttributeNumber := 16#0069,
		                             LocalIndex := 0,
		                             DestinationTag := "OTN_LAN_A_Parameters.Storage[0]",
		                             LargePacketUsage := No);
		OTN_LAN_A_SetMsgCust : MESSAGE (MessageType := CIP Generic,
		                              RequestedLength := 0,
		                              ConnectedFlag := 2,
		                              CommTypeCode := 0,
		                              ServiceCode := 16#0034,
		                              ObjectType := 16#00f6,
		                              TargetObject := 11,
		                              AttributeNumber := 16#0000,
		                              LocalIndex := 0,
		                              LargePacketUsage := No);
		OTN_LAN_B_GetMsgAll : MESSAGE (MessageType := CIP Generic,
		                             RequestedLength := 0,
		                             ConnectedFlag := 2,
		                             CommTypeCode := 0,
		                             ServiceCode := 16#0001,
		                             ObjectType := 16#035f,
		                             TargetObject := 1,
		                             AttributeNumber := 16#0000,
		                             LocalIndex := 0,
		                             DestinationTag := "OTN_LAN_B_Parameters.Storage[0]",
		                             LargePacketUsage := No);
		OTN_LAN_B_GetMsgSgl : MESSAGE (MessageType := CIP Generic,
		                             RequestedLength := 0,
		                             ConnectedFlag := 2,
		                             CommTypeCode := 0,
		                             ServiceCode := 16#000e,
		                             ObjectType := 16#00f6,
		                             TargetObject := 19,
		                             AttributeNumber := 16#0069,
		                             LocalIndex := 0,
		                             DestinationTag := "OTN_LAN_B_Parameters.Storage[0]",
		                             LargePacketUsage := No);
		OTN_LAN_B_SetMsgCust : MESSAGE (MessageType := CIP Generic,
		                              RequestedLength := 0,
		                              ConnectedFlag := 2,
		                              CommTypeCode := 0,
		                              ServiceCode := 16#0034,
		                              ObjectType := 16#00f6,
		                              TargetObject := 11,
		                              AttributeNumber := 16#0000,
		                              LocalIndex := 0,
		                              LargePacketUsage := No);
		T5_DLR_V_1_Clear_Count : MESSAGE (MessageType := CIP Generic,
		                                RequestedLength := 2,
		                                ConnectedFlag := 2,
		                                ConnectionPath := "1, 1, 2, 192.168.1.1",
		                                CommTypeCode := 0,
		                                ServiceCode := 16#0010,
		                                ObjectType := 16#0047,
		                                TargetObject := 1,
		                                AttributeNumber := 16#0005,
		                                LocalIndex := 0,
		                                LocalElement := "T5_DLR_V_1_Parameters.Storage[0]",
		                                LargePacketUsage := No);
		T5_DLR_V_1_Clr_Rapid_Flt : MESSAGE (MessageType := CIP Generic,
		                                  RequestedLength := 0,
		                                  ConnectedFlag := 2,
		                                  ConnectionPath := "1, 1, 2, 192.168.1.1",
		                                  CommTypeCode := 0,
		                                  ServiceCode := 16#004c,
		                                  ObjectType := 16#0047,
		                                  TargetObject := 1,
		                                  AttributeNumber := 16#0000,
		                                  LocalIndex := 0,
		                                  LargePacketUsage := No);
		T5_DLR_V_1_Get_All : MESSAGE (MessageType := CIP Generic,
		                            RequestedLength := 0,
		                            ConnectedFlag := 2,
		                            CommTypeCode := 0,
		                            ServiceCode := 16#0001,
		                            ObjectType := 16#0047,
		                            TargetObject := 1,
		                            AttributeNumber := 16#0000,
		                            LocalIndex := 0,
		                            DestinationTag := "T5_DLR_V_1_Parameters.Storage[0]",
		                            LargePacketUsage := No);
		T5_DLR_V_1_Get_Sgl : MESSAGE (MessageType := CIP Generic,
		                            RequestedLength := 0,
		                            ConnectedFlag := 2,
		                            ConnectionPath := "1, 1, 2, 192.168.1.1",
		                            CommTypeCode := 0,
		                            ServiceCode := 16#000e,
		                            ObjectType := 16#0047,
		                            TargetObject := 1,
		                            AttributeNumber := 16#0002,
		                            LocalIndex := 0,
		                            DestinationTag := "T5_DLR_V_1_Parameters.Storage[0]",
		                            LargePacketUsage := No);
		T5_DLR_V_1_Reset : MESSAGE (MessageType := CIP Generic,
		                          RequestedLength := 0,
		                          ConnectedFlag := 2,
		                          ConnectionPath := "1, 1, 2, 192.168.1.1",
		                          CommTypeCode := 0,
		                          ServiceCode := 16#004d,
		                          ObjectType := 16#0047,
		                          TargetObject := 1,
		                          AttributeNumber := 16#0000,
		                          LocalIndex := 0,
		                          LargePacketUsage := No);
	END_TAG

	PROGRAM _000_Housekeeping (MAIN := "_001_MainRoutine",
	                           MODE := 0,
	                           DisableFlag := 0,
	                           UseAsFolder := 0)
		TAG
			LANADiagnostics : UDT_Stratix_Diagnostics (COMMENT.FAULTMASK := "Mask value is 16#1fff_fffe") := [1,62,0,[0,0,5,0,0,41],[0,3,3,3,3,3,3,3,3,1,2,2,2,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99],512,0,536870910,[4,'Year$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[5,'Month$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[4,'Week$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[3,'Day$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[4,'Hour$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[6,'Minute$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];
			LANBDiagnostics : UDT_Stratix_Diagnostics (COMMENT.FAULTMASK := "Mask value is 16#1fff_fffe") := [1,61,0,[0,0,5,0,0,55],[0,3,3,3,2,3,3,3,3,1,2,2,2,23,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99],512,0,536870910,[4,'Year$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[5,'Month$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[4,'Week$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[3,'Day$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[4,'Hour$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[6,'Minute$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];
			PLCRedundancy : ControllerRedundancy  := [0,[0,0,0],[0,0,0],0];
			Step : DINT (RADIX := Decimal) := 0;
			T5_DLR_V_1_Data : DLR_Diagnostics  := [0,0,0,0,0,[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0],[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],0,[1,0
					,0,[0,100,0],50,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[1,',$00'],0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],0,0,[0,30000,0],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],0,0,[1,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],1,[0,'$00$00']],0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[1],[1,0,0,[0,0,0,0,0,0,0,0,0],0,0],[1,0,0,0,[1,',$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],0,0,[1,'.$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					]],0,[0,20000,0],[1,[0,0,0,0,0,0],[0,0,0,0,0,0]],[0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					]],0,[1,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],0,0,[0,0],0,[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],0,0],[0,0],[0,10000,0],0,0,[[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0
					,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0
					,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0
					,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0
					]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0
					,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]],[0,0,[[0,0,0,0,0,0]]]],0,[0,0,[[0,0,0,0,0,0]]],0,0]];
			Watchdog_1_Counter : COUNTER  := [0,1000,738];
			Watchdog_2_Timer : TIMER  := [0,10000,0];
			Watchdog_2_Update_Timer : TIMER  := [0,500,2500];
			Watchdog_2_Value : DINT (RADIX := Decimal) := 0;
			Watchdog_3_Timer : TIMER[15]  := [[0,10000,10000],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]];
			_032PLC202_203_FAL : CONTROL  := [0,50,0];
		END_TAG

		ST_ROUTINE _000_MainVersion 
			'
		END_ST_ROUTINE

		ROUTINE _001_MainRoutine 
				N: JSR(_New_Routine,0);
		END_ROUTINE

		ROUTINE _007_Watchdog_GW 
				RC: "*********************************************************************************************************************************************$N"
				    "Routine Name: _007_Watchdog$N"
				    "Common Function: Yes$N"
				    "Author: Guy Jones$N"
				    "Date: 06/02/2024$N"
				    "Version: 0.2$N"
				    "$N"
				    "Watchdog #1 - Monitor and report status of PLC to SCADA communication health$N"
				    "Watchdog #2 - Monitor SCADA communication health & perform redundancy switchovers$N"
				    "Watchdog #3 - Monitor Sub Network PLC communication health$N"
				    "*********************************************************************************************************************************************$N"
				    "";
				N: NOP();
				N: AOI_Watchdog_1(Watchdog_1_AOI,Insert_SCADA_DigData_Address.Tag[0]);
				N: AOI_Watchdog_2(Watchdog_2_AOI,Insert_SCADA_DigData_Address.Tag[1],Insert_SCADA_DigData_Address.Tag[4].0,PLCRedundancy.WatchdogSwitchover,0);
				N: AOI_Watchdog_3(Watchdog_3_AOI,Insert_SCADA_DigData_Address.Tags_Stat.RunMode,Insert_SCADA_DigData_Address.Tags_Stat.ConnectionFaulted,Insert_SCADA_DigData_Address.Tag[3].0,Insert_SCADA_DigCom_Address.Tag[3].0);
		END_ROUTINE

		ROUTINE _009_DigitalWrites_GW 
				RC: "*********************************************************************************************************************************************$N"
				    "Routine Name: _009_DigitalWrites_GW$N"
				    "Common Function: Yes$N"
				    "Author: Guy Jones$N"
				    "Date: 06/02/2024$N"
				    "Version: 0.1$N"
				    "$N"
				    "Compare the Sub Network acknowledgement data (Buffer) against the alarm/command data (DigCom) and$N"
				    "clear the (DigCom) if the Sub Network has recieved the data.$N"
				    "*********************************************************************************************************************************************$N"
				    "";
				N: NOP();
				N: AOI_DigitalWrites_GW(DigitalWrites_AOI,Insert_SCADA_DigComBuffer_Address,Insert_SCADA_DigCom_Address);
		END_ROUTINE

		ROUTINE _010_DlrDiagnostics 
				RC: "*********************************************************************************************************************************************$N"
				    "Routine Name: _010_DlrDiagnostics$N"
				    "Common Function: Yes$N"
				    "Author: Gary Livermore$N"
				    "Date: 31/01/2024$N"
				    "Version: 0.1$N"
				    "$N"
				    "Monitor and report status of Device Level Ring Network and ring Participants$N"
				    "*********************************************************************************************************************************************";
				N: NOP();
				RC: "DLR Diagnostics Faceplate AOI.$N"
				    "$N"
				    "This instruction is designed to work with the DLR Diagnostics Faceplate V 3.02. $N"
				    "This instruction polls up to 46 nodes (Logix CIP Message size limitation).$N"
				    "For HMI component installation instructions see the Implementation Guide included with the DLR Faceplate$N"
				    "version 3.02 from the sample code website of Rockwell Automation (www.rockwellautomation.com)";
				N: DLR_AOI(T5_DLR_V_1_Data.AOI,T5_DLR_V_1_Parameters,T5_DLR_V_1_Path,T5_DLR_V_1_Get_All,T5_DLR_V_1_Get_Sgl,T5_DLR_V_1_Clear_Count,T5_DLR_V_1_Reset,T5_DLR_V_1_Clr_Rapid_Flt);
				RC: "Map DLR network details from parametrs to UDT$N"
				    "Network Status$N"
				    "Ring Count$N"
				    "Fault Count$N"
				    "Last Node on Port 1$N"
				    "Last Node on Port 2";
				N: [MOV(T5_DLR_V_1_Parameters.Val_Network_Status,T5_DLR_V_1_Data.NetworkStatus) ,MOV(T5_DLR_V_1_Parameters.Val_Ring_Participant_Count,T5_DLR_V_1_Data.RingCount) ,MOV(T5_DLR_V_1_Parameters.Val_Display_Node.Ring_Faults,T5_DLR_V_1_Data.FaultCount) ,MOV(T5_DLR_V_1_Parameters.Val_Last_Node_Port1.Last_Node_Number,T5_DLR_V_1_Data.LastNode1) ,MOV(T5_DLR_V_1_Parameters.Val_Last_Node_Port2.Last_Node_Number,T5_DLR_V_1_Data.LastNode2) ];
				RC: "Obtain device and link status.$N"
				    "Routine loops through the ring participants only and obtains.$N"
				    "Device type$N"
				    "Supervisor Active State$N"
				    "Link State";
				N: EQU(Step,0)[MOV(T5_DLR_V_1_Parameters.Val_Participants[T5_DLR_V_1_Data.Node].HMI_Icon,T5_DLR_V_1_Data.Participants[T5_DLR_V_1_Data.Node]) ,GRT(T5_DLR_V_1_Data.Participants[T5_DLR_V_1_Data.Node],0) [GRT(T5_DLR_V_1_Parameters.Val_Participants[T5_DLR_V_1_Data.Node].Not_Responding,0) OTE(T5_DLR_V_1_Data.NotResponding[T5_DLR_V_1_Data.Node]) ,EQU(T5_DLR_V_1_Parameters.Val_Participants[T5_DLR_V_1_Data.Node].Supervisor_Mode,1) EQU(T5_DLR_V_1_Parameters.Val_Participants[T5_DLR_V_1_Data.Node].Supervisor_Enable,1) OTE(T5_DLR_V_1_Data.Supervisor[T5_DLR_V_1_Data.Node]) ,XIC(T5_DLR_V_1_Parameters.Val_LinkState[T5_DLR_V_1_Data.Node]) OTE(T5_DLR_V_1_Data.LinkState[T5_DLR_V_1_Data.Node]) ,MOV(10,Step) ] ];
				RC: "For each pass, increase the node number up to the maximum number of nodes identified by the ring participant count";
				N: EQU(Step,10)[ADD(T5_DLR_V_1_Data.Node,1,T5_DLR_V_1_Data.Node) ,MOV(20,Step) ];
				RC: "Loop back for each node within a single program scan$N"
				    "Once all detected devices have been scanned, move on";
				N: EQU(Step,20)[LES(T5_DLR_V_1_Data.Node,T5_DLR_V_1_Data.RingCount) LES(T5_DLR_V_1_Data.Node,63) MOV(0,Step) ,GEQ(T5_DLR_V_1_Data.Node,T5_DLR_V_1_Data.RingCount) MOV(30,Step) ];
				RC: "Once all nodes have been checked, reset node pointer to 0 ready for next scan$N"
				    "Return to start of scan";
				N: EQU(Step,30)[MOV(0,T5_DLR_V_1_Data.Node) ,MOV(0,Step) ];
				RC: "*********************************************************************************************************************************************$N"
				    "Routine Name: _010_DlrDiagnostics$N"
				    "Common Function: No$N"
				    "Author: Gary Livermore$N"
				    "Date: 31/01/2024$N"
				    "Version: 0.1$N"
				    "$N"
				    "Map the data collected from the _010_DlrDiagnostics common function to registers for the SCADA$N"
				    "*********************************************************************************************************************************************";
				N: NOP();
		END_ROUTINE

		ROUTINE _011_PrpDiagostics 
				RC: "**********************************************************************************************************************************************$N"
				    "Routine Neme:_011_PrpDiagnostics$N"
				    "Common Function: Yes$N"
				    "Author: Gary Livermore$N"
				    "Date: 30/01/2024$N"
				    "Version: 0.1$N"
				    "$N"
				    "Obtain and make available Stratix Switch diagnostic data$N"
				    "First half of the application is the status for the Stratix switch on LAN A$N"
				    "The second half of the application is the status for the Stratix switch on LAN B$N"
				    "**********************************************************************************************************************************************";
				N: NOP();
				RC: "Stratix Switch AOI provided by Rockwell Automation.$N"
				    "Set the path and IP address of the Stratix switch to be monitored.$N"
				    "All status data is contained with the .Parameters element.$N"
				    "Status for LAN A stratix switch";
				N: NET_AB_Stratix_All(OTN_LAN_A_AOI,OTN_LAN_A_En_AOI,OTN_LAN_A_Parameters,OTN_LAN_A_Path,OTN_LAN_A_GetMsgAll,OTN_LAN_A_GetMsgSgl,OTN_LAN_A_GetMsgSgl,OTN_LAN_A_SetMsgCust);
				RC: "Determine the status of the power supplies to the switch";
				N: [XIC(OTN_LAN_A_Parameters.Home.Page_1.Power_1) XIO(OTN_LAN_A_Parameters.Home.Page_1.Power_2) MOV(1,LANADiagnostics.PowerSupply) ,XIO(OTN_LAN_A_Parameters.Home.Page_1.Power_1) XIC(OTN_LAN_A_Parameters.Home.Page_1.Power_2) MOV(2,LANADiagnostics.PowerSupply) ,XIC(OTN_LAN_A_Parameters.Home.Page_1.Power_1) XIC(OTN_LAN_A_Parameters.Home.Page_1.Power_2) MOV(3,LANADiagnostics.PowerSupply) ];
				RC: "Read the Temperature of the Stratix switch";
				N: MOV(OTN_LAN_A_Parameters.Home.Page_3.Temperature,LANADiagnostics.Temperature);
				RC: "Obtain the status of CIP Synch time synchronisation";
				N: XIC(OTN_LAN_A_Parameters.PTP.PTP_Enable)XIC(OTN_LAN_A_Parameters.PTP.Page_2.SyncStatus)OTE(LANADiagnostics.TimeSyncStatus.0);
				RC: "$N"
				    "For all Up-time value extractions.$N"
				    "Find the starting position of the word within the uptime string.$N"
				    "Calculate the starting position of the numerical value associated with the parameter.$N"
				    "Extract the value from the string using the start position calculated.$N"
				    "Convert the value from a string to a numerical value.$N"
				    "Place the value in the correct data register.$N"
				    "If the word cannot be located then a zero is placed in the correct data register.";
				N: [FIND(OTN_LAN_A_Parameters.Home.Page_3.UpTime,LANADiagnostics.FindStringYear,1,LANADiagnostics.Temp[0]) ,[GEQ(LANADiagnostics.Temp[0],2) SUB(LANADiagnostics.Temp[0],2,LANADiagnostics.Temp[6]) ,LES(LANADiagnostics.Temp[0],2) MOV(0,LANADiagnostics.Temp[6]) ] ,[GRT(LANADiagnostics.Temp[6],0) MID(OTN_LAN_A_Parameters.Home.Page_3.UpTime,2,LANADiagnostics.Temp[6],LANADiagnostics.StringYear) STOD(LANADiagnostics.StringYear,LANADiagnostics.UpTime[0]) ,LEQ(LANADiagnostics.Temp[6],0) MOV(0,LANADiagnostics.UpTime[0]) ] ];
				RC: "Extract the number of Months the Stratix switch has been active from the Up-time parameter";
				N: [FIND(OTN_LAN_A_Parameters.Home.Page_3.UpTime,LANADiagnostics.FindStringMonth,1,LANADiagnostics.Temp[1]) ,[GEQ(LANADiagnostics.Temp[1],2) SUB(LANADiagnostics.Temp[1],2,LANADiagnostics.Temp[7]) ,LES(LANADiagnostics.Temp[1],2) MOV(0,LANADiagnostics.Temp[7]) ] ,[GRT(LANADiagnostics.Temp[7],0) MID(OTN_LAN_A_Parameters.Home.Page_3.UpTime,2,LANADiagnostics.Temp[7],LANADiagnostics.StringMonth) STOD(LANADiagnostics.StringMonth,LANADiagnostics.UpTime[1]) ,LEQ(LANADiagnostics.Temp[7],0) MOV(0,LANADiagnostics.UpTime[1]) ] ];
				RC: "Extract the number of Weeks the Stratix switch has been active from the Up-time parameter";
				N: [FIND(OTN_LAN_A_Parameters.Home.Page_3.UpTime,LANADiagnostics.FindStringWeek,1,LANADiagnostics.Temp[2]) ,[GEQ(LANADiagnostics.Temp[2],2) SUB(LANADiagnostics.Temp[2],2,LANADiagnostics.Temp[8]) ,LES(LANADiagnostics.Temp[2],2) MOV(0,LANADiagnostics.Temp[8]) ] ,[GRT(LANADiagnostics.Temp[8],0) MID(OTN_LAN_A_Parameters.Home.Page_3.UpTime,2,LANADiagnostics.Temp[8],LANADiagnostics.StringWeek) STOD(LANADiagnostics.StringWeek,LANADiagnostics.UpTime[2]) ,LEQ(LANADiagnostics.Temp[8],0) MOV(0,LANADiagnostics.UpTime[2]) ] ];
				RC: "Extract the number of Days the Stratix switch has been active from the Up-time parameter";
				N: [FIND(OTN_LAN_A_Parameters.Home.Page_3.UpTime,LANADiagnostics.FindStringDay,1,LANADiagnostics.Temp[3]) ,[GEQ(LANADiagnostics.Temp[3],2) SUB(LANADiagnostics.Temp[3],2,LANADiagnostics.Temp[9]) ,LES(LANADiagnostics.Temp[3],2) MOV(0,LANADiagnostics.Temp[9]) ] ,[GRT(LANADiagnostics.Temp[9],0) MID(OTN_LAN_A_Parameters.Home.Page_3.UpTime,2,LANADiagnostics.Temp[9],LANADiagnostics.StringDay) STOD(LANADiagnostics.StringDay,LANADiagnostics.UpTime[3]) ,LEQ(LANADiagnostics.Temp[9],0) MOV(0,LANADiagnostics.UpTime[3]) ] ];
				RC: "Extract the number of Hours the Stratix switch has been active from the Up-time parameter";
				N: [FIND(OTN_LAN_A_Parameters.Home.Page_3.UpTime,LANADiagnostics.FindStringHour,1,LANADiagnostics.Temp[4]) ,[GEQ(LANADiagnostics.Temp[4],2) SUB(LANADiagnostics.Temp[4],3,LANADiagnostics.Temp[10]) ,LES(LANADiagnostics.Temp[4],2) MOV(0,LANADiagnostics.Temp[10]) ] ,[GRT(LANADiagnostics.Temp[10],0) MID(OTN_LAN_A_Parameters.Home.Page_3.UpTime,2,LANADiagnostics.Temp[10],LANADiagnostics.StringHour) STOD(LANADiagnostics.StringHour,LANADiagnostics.UpTime[4]) ,LEQ(LANADiagnostics.Temp[10],0) MOV(0,LANADiagnostics.UpTime[4]) ] ];
				RC: "Extract the number of Minutes the Stratix switch has been active from the Up-time parameter";
				N: [FIND(OTN_LAN_A_Parameters.Home.Page_3.UpTime,LANADiagnostics.FindStringMinute,1,LANADiagnostics.Temp[5]) ,[GEQ(LANADiagnostics.Temp[5],2) SUB(LANADiagnostics.Temp[5],3,LANADiagnostics.Temp[11]) ,LES(LANADiagnostics.Temp[5],2) MOV(0,LANADiagnostics.Temp[11]) ] ,[GRT(LANADiagnostics.Temp[11],0) MID(OTN_LAN_A_Parameters.Home.Page_3.UpTime,2,LANADiagnostics.Temp[11],LANADiagnostics.StringMinute) STOD(LANADiagnostics.StringMinute,LANADiagnostics.UpTime[5]) ,LEQ(LANADiagnostics.Temp[11],0) MOV(0,LANADiagnostics.UpTime[5]) ] ];
				RC: "Obtain the status of Ports 1 to 4";
				N: [MOV(OTN_LAN_A_Parameters.Home.Port_Indicator[1],LANADiagnostics.PortStatus[1]) ,MOV(OTN_LAN_A_Parameters.Home.Port_Indicator[2],LANADiagnostics.PortStatus[2]) ,MOV(OTN_LAN_A_Parameters.Home.Port_Indicator[3],LANADiagnostics.PortStatus[3]) ,MOV(OTN_LAN_A_Parameters.Home.Port_Indicator[4],LANADiagnostics.PortStatus[4]) ];
				RC: "Obtain the status of Ports 5 to 8";
				N: [MOV(OTN_LAN_A_Parameters.Home.Port_Indicator[5],LANADiagnostics.PortStatus[5]) ,MOV(OTN_LAN_A_Parameters.Home.Port_Indicator[6],LANADiagnostics.PortStatus[6]) ,MOV(OTN_LAN_A_Parameters.Home.Port_Indicator[7],LANADiagnostics.PortStatus[7]) ,MOV(OTN_LAN_A_Parameters.Home.Port_Indicator[8],LANADiagnostics.PortStatus[8]) ];
				RC: "Obtain the status of Ports 9 to 12";
				N: [MOV(OTN_LAN_A_Parameters.Home.Port_Indicator[9],LANADiagnostics.PortStatus[9]) ,MOV(OTN_LAN_A_Parameters.Home.Port_Indicator[10],LANADiagnostics.PortStatus[10]) ,MOV(OTN_LAN_A_Parameters.Home.Port_Indicator[11],LANADiagnostics.PortStatus[11]) ,MOV(OTN_LAN_A_Parameters.Home.Port_Indicator[12],LANADiagnostics.PortStatus[12]) ];
				RC: "Obtain the status of Ports 13 to 16";
				N: [MOV(OTN_LAN_A_Parameters.Home.SFP_Indicator[13],LANADiagnostics.PortStatus[13]) ,MOV(OTN_LAN_A_Parameters.Home.SFP_Indicator[14],LANADiagnostics.PortStatus[14]) ,MOV(OTN_LAN_A_Parameters.Home.SFP_Indicator[15],LANADiagnostics.PortStatus[15]) ,MOV(OTN_LAN_A_Parameters.Home.SFP_Indicator[16],LANADiagnostics.PortStatus[16]) ];
				RC: "Obtain the status of Ports 17 to 20";
				N: [MOV(OTN_LAN_A_Parameters.Home.SFP_Indicator[17],LANADiagnostics.PortStatus[17]) ,MOV(OTN_LAN_A_Parameters.Home.SFP_Indicator[18],LANADiagnostics.PortStatus[18]) ,MOV(OTN_LAN_A_Parameters.Home.SFP_Indicator[19],LANADiagnostics.PortStatus[19]) ,MOV(OTN_LAN_A_Parameters.Home.SFP_Indicator[20],LANADiagnostics.PortStatus[20]) ];
				RC: "Obtain the status of Ports 21 to 24";
				N: [MOV(OTN_LAN_A_Parameters.Home.SFP_Indicator[21],LANADiagnostics.PortStatus[21]) ,MOV(OTN_LAN_A_Parameters.Home.SFP_Indicator[22],LANADiagnostics.PortStatus[22]) ,MOV(OTN_LAN_A_Parameters.Home.SFP_Indicator[23],LANADiagnostics.PortStatus[23]) ,MOV(OTN_LAN_A_Parameters.Home.SFP_Indicator[24],LANADiagnostics.PortStatus[24]) ];
				RC: "Obtain the status of Ports 25 to 28";
				N: [MOV(OTN_LAN_A_Parameters.Home.SFP_Indicator[25],LANADiagnostics.PortStatus[25]) ,MOV(OTN_LAN_A_Parameters.Home.SFP_Indicator[26],LANADiagnostics.PortStatus[26]) ,MOV(OTN_LAN_A_Parameters.Home.SFP_Indicator[27],LANADiagnostics.PortStatus[27]) ,MOV(OTN_LAN_A_Parameters.Home.SFP_Indicator[28],LANADiagnostics.PortStatus[28]) ];
				RC: "Set bit 0 of the alarm status when an alarm is active for the stratix switch";
				N: XIC(OTN_LAN_A_Parameters.Alarm_Active)OTE(LANADiagnostics.Fault.0);
				RC: "Set bits 1 to 28 of the alarm status flag when a port has an active alarm";
				N: MVM(OTN_LAN_A_Parameters.Alarm.Port.Port_Alarm,LANADiagnostics.FaultMask,LANADiagnostics.Fault);
				RC: "Set bit 29 of the alarm status flag when there is a fault with the power supplies";
				N: XIC(OTN_LAN_A_Parameters.Alarm.Global.Power_Supply)OTE(LANADiagnostics.Fault.29);
				RC: "Set bit 30 of the alarm status flag when the Stratix switch temperature has exceeded the high temperature set value.$N"
				    "90 degrees C for the secondary Temperature$N"
				    "95 degrees C for the Primary Temperature";
				N: [XIC(OTN_LAN_A_Parameters.Alarm.Global.Primary_Temperature) ,XIC(OTN_LAN_A_Parameters.Alarm.Global.Secondary_Temperature) ]OTE(LANADiagnostics.Fault.30);
				RC: "Set bit 30 of the alarms status lag when an alarm for a port is active";
				N: XIC(OTN_LAN_A_Parameters.Alarm.Port_Alarm)OTE(LANADiagnostics.Fault.31);
				RC: "Stratix Switch AOI provided by Rockwell Automation.$N"
				    "Set the path and IP address of the Stratix switch to be monitored.$N"
				    "All status data is contained with the .Parameters element.$N"
				    "Status for LAN A stratix switch";
				N: NET_AB_Stratix_All(OTN_LAN_B_AOI,OTN_LAN_B_En_AOI,OTN_LAN_B_Parameters,OTN_LAN_B_Path,OTN_LAN_B_GetMsgAll,OTN_LAN_B_GetMsgSgl,OTN_LAN_B_GetMsgSgl,OTN_LAN_B_SetMsgCust);
				RC: "Determine the status of the power supplies to the switch";
				N: [XIC(OTN_LAN_B_Parameters.Home.Page_1.Power_1) XIO(OTN_LAN_B_Parameters.Home.Page_1.Power_2) MOV(1,LANBDiagnostics.PowerSupply) ,XIO(OTN_LAN_B_Parameters.Home.Page_1.Power_1) XIC(OTN_LAN_B_Parameters.Home.Page_1.Power_2) MOV(2,LANBDiagnostics.PowerSupply) ,XIC(OTN_LAN_B_Parameters.Home.Page_1.Power_1) XIC(OTN_LAN_B_Parameters.Home.Page_1.Power_2) MOV(3,LANBDiagnostics.PowerSupply) ];
				RC: "Read the Temperature of the Stratix switch";
				N: MOV(OTN_LAN_B_Parameters.Home.Page_3.Temperature,LANBDiagnostics.Temperature);
				RC: "Obtain the status of CIP Synch time synchronisation";
				N: XIC(OTN_LAN_B_Parameters.PTP.PTP_Enable)XIC(OTN_LAN_B_Parameters.PTP.Page_2.SyncStatus)OTE(LANBDiagnostics.TimeSyncStatus.0);
				RC: "Extract the number of years the Stratix switch has been active from the Up Time parameter.$N"
				    "";
				N: [FIND(OTN_LAN_B_Parameters.Home.Page_3.UpTime,LANBDiagnostics.FindStringYear,1,LANBDiagnostics.Temp[0]) ,[GEQ(LANBDiagnostics.Temp[0],2) SUB(LANBDiagnostics.Temp[0],2,LANBDiagnostics.Temp[6]) ,LES(LANBDiagnostics.Temp[0],2) MOV(0,LANBDiagnostics.Temp[6]) ] ,[GRT(LANBDiagnostics.Temp[6],0) MID(OTN_LAN_B_Parameters.Home.Page_3.UpTime,2,LANBDiagnostics.Temp[6],LANBDiagnostics.StringYear) STOD(LANBDiagnostics.StringYear,LANBDiagnostics.UpTime[0]) ,LEQ(LANBDiagnostics.Temp[6],0) MOV(0,LANBDiagnostics.UpTime[0]) ] ];
				RC: "Extract the number of Months the Stratix switch has been active from the Up Time parameter.$N"
				    "";
				N: [FIND(OTN_LAN_B_Parameters.Home.Page_3.UpTime,LANBDiagnostics.FindStringMonth,1,LANBDiagnostics.Temp[1]) ,[GEQ(LANBDiagnostics.Temp[1],2) SUB(LANBDiagnostics.Temp[1],2,LANBDiagnostics.Temp[7]) ,LES(LANBDiagnostics.Temp[1],2) MOV(0,LANBDiagnostics.Temp[7]) ] ,[GRT(LANBDiagnostics.Temp[7],0) MID(OTN_LAN_B_Parameters.Home.Page_3.UpTime,2,LANBDiagnostics.Temp[7],LANBDiagnostics.StringMonth) STOD(LANBDiagnostics.StringMonth,LANBDiagnostics.UpTime[1]) ,LEQ(LANBDiagnostics.Temp[7],0) MOV(0,LANBDiagnostics.UpTime[1]) ] ];
				RC: "Extract the number of Weeks the Stratix switch has been active from the Up Time parameter.$N"
				    "";
				N: [FIND(OTN_LAN_B_Parameters.Home.Page_3.UpTime,LANBDiagnostics.FindStringWeek,1,LANBDiagnostics.Temp[2]) ,[GEQ(LANBDiagnostics.Temp[2],2) SUB(LANBDiagnostics.Temp[2],2,LANBDiagnostics.Temp[8]) ,LES(LANBDiagnostics.Temp[2],2) MOV(0,LANBDiagnostics.Temp[8]) ] ,[GRT(LANBDiagnostics.Temp[8],0) MID(OTN_LAN_B_Parameters.Home.Page_3.UpTime,2,LANBDiagnostics.Temp[8],LANBDiagnostics.StringWeek) STOD(LANBDiagnostics.StringWeek,LANBDiagnostics.UpTime[2]) ,LEQ(LANBDiagnostics.Temp[8],0) MOV(0,LANBDiagnostics.UpTime[2]) ] ];
				RC: "Extract the number of Days the Stratix switch has been active from the Up Time parameter.$N"
				    "";
				N: [FIND(OTN_LAN_B_Parameters.Home.Page_3.UpTime,LANBDiagnostics.FindStringDay,1,LANBDiagnostics.Temp[3]) ,[GEQ(LANBDiagnostics.Temp[3],2) SUB(LANBDiagnostics.Temp[3],2,LANBDiagnostics.Temp[9]) ,LES(LANBDiagnostics.Temp[3],2) MOV(0,LANBDiagnostics.Temp[9]) ] ,[GRT(LANBDiagnostics.Temp[9],0) MID(OTN_LAN_B_Parameters.Home.Page_3.UpTime,2,LANBDiagnostics.Temp[9],LANBDiagnostics.StringDay) STOD(LANBDiagnostics.StringDay,LANBDiagnostics.UpTime[3]) ,LEQ(LANBDiagnostics.Temp[9],0) MOV(0,LANBDiagnostics.UpTime[3]) ] ];
				RC: "Extract the number of Hours the Stratix switch has been active from the Up Time parameter.$N"
				    "";
				N: [FIND(OTN_LAN_B_Parameters.Home.Page_3.UpTime,LANBDiagnostics.FindStringHour,1,LANBDiagnostics.Temp[4]) ,[GEQ(LANBDiagnostics.Temp[4],2) SUB(LANBDiagnostics.Temp[4],3,LANBDiagnostics.Temp[10]) ,LES(LANBDiagnostics.Temp[4],2) MOV(0,LANBDiagnostics.Temp[10]) ] ,[GRT(LANBDiagnostics.Temp[10],0) MID(OTN_LAN_B_Parameters.Home.Page_3.UpTime,2,LANBDiagnostics.Temp[10],LANBDiagnostics.StringHour) STOD(LANBDiagnostics.StringHour,LANBDiagnostics.UpTime[4]) ,LEQ(LANBDiagnostics.Temp[10],0) MOV(0,LANBDiagnostics.UpTime[4]) ] ];
				RC: "Extract the number of Minutes the Stratix switch has been active from the Up Time parameter.$N"
				    "";
				N: [FIND(OTN_LAN_B_Parameters.Home.Page_3.UpTime,LANBDiagnostics.FindStringMinute,1,LANBDiagnostics.Temp[5]) ,[GEQ(LANBDiagnostics.Temp[5],2) SUB(LANBDiagnostics.Temp[5],3,LANBDiagnostics.Temp[11]) ,LES(LANBDiagnostics.Temp[5],2) MOV(0,LANBDiagnostics.Temp[11]) ] ,[GRT(LANBDiagnostics.Temp[11],0) MID(OTN_LAN_B_Parameters.Home.Page_3.UpTime,2,LANBDiagnostics.Temp[11],LANBDiagnostics.StringMinute) STOD(LANBDiagnostics.StringMinute,LANBDiagnostics.UpTime[5]) ,LEQ(LANBDiagnostics.Temp[11],0) MOV(0,LANBDiagnostics.UpTime[5]) ] ];
				RC: "Obtain the status of Ports 1 to 4";
				N: [MOV(OTN_LAN_B_Parameters.Home.Port_Indicator[1],LANBDiagnostics.PortStatus[1]) ,MOV(OTN_LAN_B_Parameters.Home.Port_Indicator[2],LANBDiagnostics.PortStatus[2]) ,MOV(OTN_LAN_B_Parameters.Home.Port_Indicator[3],LANBDiagnostics.PortStatus[3]) ,MOV(OTN_LAN_B_Parameters.Home.Port_Indicator[4],LANBDiagnostics.PortStatus[4]) ];
				RC: "Obtain the status of Ports 5 to 8";
				N: [MOV(OTN_LAN_B_Parameters.Home.Port_Indicator[5],LANBDiagnostics.PortStatus[5]) ,MOV(OTN_LAN_B_Parameters.Home.Port_Indicator[6],LANBDiagnostics.PortStatus[6]) ,MOV(OTN_LAN_B_Parameters.Home.Port_Indicator[7],LANBDiagnostics.PortStatus[7]) ,MOV(OTN_LAN_B_Parameters.Home.Port_Indicator[8],LANBDiagnostics.PortStatus[8]) ];
				RC: "Obtain the status of Ports 9 to 12";
				N: [MOV(OTN_LAN_B_Parameters.Home.Port_Indicator[9],LANBDiagnostics.PortStatus[9]) ,MOV(OTN_LAN_B_Parameters.Home.Port_Indicator[10],LANBDiagnostics.PortStatus[10]) ,MOV(OTN_LAN_B_Parameters.Home.Port_Indicator[11],LANBDiagnostics.PortStatus[11]) ,MOV(OTN_LAN_B_Parameters.Home.Port_Indicator[12],LANBDiagnostics.PortStatus[12]) ];
				RC: "Obtain the status of Ports 13 to 16";
				N: [MOV(OTN_LAN_B_Parameters.Home.SFP_Indicator[13],LANBDiagnostics.PortStatus[13]) ,MOV(OTN_LAN_B_Parameters.Home.SFP_Indicator[14],LANBDiagnostics.PortStatus[14]) ,MOV(OTN_LAN_B_Parameters.Home.SFP_Indicator[15],LANBDiagnostics.PortStatus[15]) ,MOV(OTN_LAN_B_Parameters.Home.SFP_Indicator[16],LANBDiagnostics.PortStatus[16]) ];
				RC: "Obtain the status of Ports 17 to 20";
				N: [MOV(OTN_LAN_B_Parameters.Home.SFP_Indicator[17],LANBDiagnostics.PortStatus[17]) ,MOV(OTN_LAN_B_Parameters.Home.SFP_Indicator[18],LANBDiagnostics.PortStatus[18]) ,MOV(OTN_LAN_B_Parameters.Home.SFP_Indicator[19],LANBDiagnostics.PortStatus[19]) ,MOV(OTN_LAN_B_Parameters.Home.SFP_Indicator[20],LANBDiagnostics.PortStatus[20]) ];
				RC: "Obtain the status of Ports 21 to 24";
				N: [MOV(OTN_LAN_B_Parameters.Home.SFP_Indicator[21],LANBDiagnostics.PortStatus[21]) ,MOV(OTN_LAN_B_Parameters.Home.SFP_Indicator[22],LANBDiagnostics.PortStatus[22]) ,MOV(OTN_LAN_B_Parameters.Home.SFP_Indicator[23],LANBDiagnostics.PortStatus[23]) ,MOV(OTN_LAN_B_Parameters.Home.SFP_Indicator[24],LANBDiagnostics.PortStatus[24]) ];
				RC: "Obtain the status of Ports 25 to 28";
				N: [MOV(OTN_LAN_B_Parameters.Home.SFP_Indicator[25],LANBDiagnostics.PortStatus[25]) ,MOV(OTN_LAN_B_Parameters.Home.SFP_Indicator[26],LANBDiagnostics.PortStatus[26]) ,MOV(OTN_LAN_B_Parameters.Home.SFP_Indicator[27],LANBDiagnostics.PortStatus[27]) ,MOV(OTN_LAN_B_Parameters.Home.SFP_Indicator[28],LANBDiagnostics.PortStatus[28]) ];
				RC: "Set bit 0 of the alarm status when an alarm is active for the stratix switch";
				N: XIC(OTN_LAN_B_Parameters.Alarm_Active)OTE(LANBDiagnostics.Fault.0);
				RC: "Set bits 1 to 28 of the alarm status flag when a port has an active alarm";
				N: MVM(OTN_LAN_B_Parameters.Alarm.Port.Port_Alarm,LANBDiagnostics.FaultMask,LANBDiagnostics.Fault);
				RC: "Set bit 29 of the alarm status flag when there is a fault with the power supplies";
				N: XIC(OTN_LAN_B_Parameters.Alarm.Global.Power_Supply)OTE(LANBDiagnostics.Fault.29);
				RC: "Set bit 30 of the alarm status flag when the Stratix switch temperature has exceeded the high temperature set value.$N"
				    "90 degrees C for the secondary Temperature$N"
				    "95 degrees C for the Primary Temperature";
				N: [XIC(OTN_LAN_B_Parameters.Alarm.Global.Primary_Temperature) ,XIC(OTN_LAN_B_Parameters.Alarm.Global.Secondary_Temperature) ]OTE(LANBDiagnostics.Fault.30);
				RC: "Set bit 30 of the alarms status lag when an alarm for a port is active";
				N: XIC(OTN_LAN_B_Parameters.Alarm.Port_Alarm)OTE(LANBDiagnostics.Fault.31);
				RC: "Determine PRP status.$N"
				    "Gateway A LAN A Connection LAN B Connection$N"
				    "Gateway B LAN A Connection LAN B Connection$N"
				    "$N"
				    "Subnetwork PLC A 054 PLC 301_302 LAN A Connection LAN B Connection$N"
				    "Subnetwork PLC B 054 PLC 301_302 LAN A Connection LAN B Connection";
				N: NOP();
				N: EQU(LANADiagnostics.PortStatus[1],3)EQU(LANBDiagnostics.PortStatus[1],3)OTE(LANADiagnostics.PrpStatus.0);
				N: EQU(LANADiagnostics.PortStatus[2],3)EQU(LANBDiagnostics.PortStatus[2],3)OTE(LANADiagnostics.PrpStatus.1);
				N: EQU(LANADiagnostics.PortStatus[3],3)EQU(LANBDiagnostics.PortStatus[3],3)OTE(LANADiagnostics.PrpStatus.2);
				N: EQU(LANADiagnostics.PortStatus[4],3)EQU(LANBDiagnostics.PortStatus[13],23)OTE(LANADiagnostics.PrpStatus.3);
				RC: "**********************************************************************************************************************************************$N"
				    "Routine Neme:_011_PrpDiagnostics Customisation$N"
				    "Common Function: No$N"
				    "Author: Gary Livermore$N"
				    "Date: 30/01/2024$N"
				    "Version: 0.1$N"
				    "$N"
				    "Mapping of Stratix Switch diagnostics to SCADA$N"
				    "**********************************************************************************************************************************************";
				N: NOP();
		END_ROUTINE

		ROUTINE _New_Routine 
				N: XIC(test1)OTE(test2);
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	TASK MainTask (Type := PERIODIC,
	               Rate := 250,
	               Priority := 10,
	               Watchdog := 500,
	               DisableUpdateOutputs := No,
	               InhibitTask := No)
			_000_Housekeeping;
	END_TASK

CONFIG ASCII(XONXOFFEnable := 0,
	             DeleteMode := 0,
	             EchoMode := 0,
	             TerminationChars := 65293,
	             AppendChars := 2573,
	             BufferSize := 82) END_CONFIG

CONFIG CST(SystemTimeMasterID := 0) END_CONFIG

CONFIG DF1(DuplicateDetection := 1,
	           ErrorDetection := BCC Error,
	           EmbeddedResponseEnable := 0,
	           DF1Mode := Pt to Pt,
	           ACKTimeout := 50,
	           NAKReceiveLimit := 3,
	           ENQTransmitLimit := 3,
	           TransmitRetries := 3,
	           StationAddress := 0,
	           ReplyMessageWait := 5,
	           PollingMode := 1,
	           MasterMessageTransmit := 0,
	           NormalPollNodeFile := "<NA>",
	           NormalPollGroupSize := 0,
	           PriorityPollNodeFile := "<NA>",
	           ActiveStationFile := "<NA>",
	           SlavePollTimeout := 3000,
	           EOTSuppression := 0,
	           MaxStationAddress := 31,
	           TokenHoldFactor := 1,
	           EnableStoreFwd := 0,
	           StoreFwdFile := "<NA>") END_CONFIG

CONFIG SerialPort(BaudRate := 19200,
	                  Parity := No Parity,
	                  DataBits := 8 Bits of Data,
	                  StopBits := 1 Stop Bit,
	                  ComDriverId := DF1,
	                  PendingComDriverId := DF1,
	                  RTSOffDelay := 0,
	                  RTSSendDelay := 0,
	                  ControlLine := No Handshake,
	                  PendingControlLine := No Handshake,
	                  RemoteModeChangeFlag := 0,
	                  PendingRemoteModeChangeFlag := 0,
	                  ModeChangeAttentionChar := 27,
	                  PendingModeChangeAttentionChar := 27,
	                  SystemModeCharacter := 83,
	                  PendingSystemModeCharacter := 83,
	                  UserModeCharacter := 85,
	                  PendingUserModeCharacter := 85,
	                  DCDWaitDelay := 0) END_CONFIG

CONFIG TimeSynchronize(Priority1 := 128,
	                                 Priority2 := 128,
	                                 PTPEnable := 0) END_CONFIG

CONFIG WallClockTime(LocalTimeAdjustment := 0,
	                     TimeZone := 0) END_CONFIG

END_CONTROLLER

